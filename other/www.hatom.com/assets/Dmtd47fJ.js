var Fn=Object.defineProperty;var An=(a,t,e)=>t in a?Fn(a,t,{enumerable:!0,configurable:!0,writable:!0,value:e}):a[t]=e;var l=(a,t,e)=>(An(a,typeof t!="symbol"?t+"":t,e),e);import{ao as Un,r as ee,f as it,ap as zn,d as xe,aq as Gn,ar as M,as as Bn,at as Yt,k as oi,au as Mi,av as Ni,o as se,c as ut,G as tt,v as Me,b as oe,V as kn,y as mt,aw as W,ax as I,ay as le,az as Di,aA as Ri,l as ae,aB as T,aC as C,aD as A,aE as Hn,aF as Y,aG as V,aH as te,aI as Vn,aJ as pe,aK as Oi,j as F,n as Fo,_ as lt,A as Ao,B as Uo,q as _e,e as ve,u as ni,h as Be,t as Je,a9 as jt,s as Wn,aL as Yn,F as Ot,x as Wt,p as jn,aM as $t,aN as Yi,a1 as ne,X as et,g as zo,E as He,a2 as Go,ae as Bo,aO as $n,aP as At,aQ as Pi,aR as z,aS as ye,aT as vi,aU as ko,aV as ji,aW as Zn,aX as Ho,aY as Kn,aZ as gt,a_ as pt,a$ as Zt,b0 as $i,b1 as qn,D as yt,Y as Zi,b2 as Kt,b3 as st,b4 as Vo,b5 as Xn,b6 as Ii,b7 as Ki,b8 as Z,b9 as Li,ba as Wo,bb as Qn,bc as ie,bd as Jn,be as ai,bf as ea,bg as $,bh as dt,bi as Ve,bj as ke,bk as Yo,bl as jo,bm as $o,bn as ta,bo as Zo,bp as ia,bq as oa,br as ri,bs as Pt,bt,bu as Le,bv as Ko,bw as Fe,bx as qo,by as Xo,bz as na,bA as Qo,bB as Ne,bC as si,bD as Jo,bE as en,bF as vt,bG as Qe,bH as Se,bI as It,bJ as aa,bK as fi,bL as ra,bM as qi,bN as sa,bO as la,bP as ca,bQ as ua,bR as ma,bS as da,bT as va,bU as fa,R as tn,bV as ha,Q as hi,O as gi,bW as ga,$ as pa,bX as _a,z as Xi,bY as xa}from"./BwWP8iEj.js";import{Q as ba,H as ya,T as St,E as ct,A as Te,a as on}from"./Vg9EGtk5.js";import{a as Sa,M as Ca}from"./DKOeehjH.js";const Ta=Symbol.for("nuxt:client-only"),nn=Un({name:"ClientOnly",inheritAttrs:!1,props:["fallback","placeholder","placeholderTag","fallbackTag"],setup(a,{slots:t,attrs:e}){const i=ee(!1);return it(()=>{i.value=!0}),zn(Ta,!0),o=>{var c;if(i.value)return(c=t.default)==null?void 0:c.call(t);const n=t.fallback||t.placeholder;if(n)return n();const r=o.fallback||o.placeholder||"",s=o.fallbackTag||o.placeholderTag||"span";return xe(s,e,r)}}});class wa extends Gn{constructor(t={}){super(),this._progress=0,this._preloadedResources=0,this._isComplete=!1,this._name=t.name,this._namespace=t.namespace,this._setupResources(),this._bindAll()}get resources(){return this._resources}get isComplete(){return this._isComplete}get(t,e=M.triggerErrors){const i=this._resources.find(({name:o})=>o===t);if(!i){e&&console.error(`Resource manager "${this._namespace}" : Couln't find resource with name "${t}"`);return}return i.data}getResourceByName(t,e=M.triggerErrors){const i=this._resources.find(({name:o})=>o===t);if(!i){e&&console.error(`Resource manager "${this._namespace}" : Couln't find resource with name "${t}"`);return}return i}isLoaded(t){return!!this.get(t)}isAdded(t){return!!this.getResourceByName(t)}dispose(t){const e=this._resources.findIndex(({name:i})=>i===t);if(e!==-1){const i=this._resources[e];i.data&&i.data.dispose&&i.data.dispose(),i.data=null,this._resources.splice(e,1)}M.dispose(t)}add(t,e=M.triggerWarns){if(Array.isArray(t)){this._addMultiple(t,e);return}if(this._isResourceAdded(t)){e&&console.warn(`Resource manager "${this._namespace}" : Resource with same name or path has already been added for "${t.name}"`);return}this._resources.push(t),M.resources.push(t)}addByName(t,e=M.triggerWarns){if(Array.isArray(t)){this._addByNames(t,e);return}let i=null;for(let o=0;o<M.resources.length;o++){const n=M.resources[o];if(t===n.name){if(this._isResourceAdded(n)){e&&console.warn(`Resource manager "${this._namespace}" : Resource with name "${n.name}" has already been added`),i=void 0;continue}this._resources.push(n),i=n;return}}i===null&&e&&console.warn(`Resource manager "${this._namespace}" : Could not find any resource with name "${t}"`)}load(){const t=[];this._preloadStartHandler();for(let e=0;e<this._resources.length;e++){const i=this._resources[e],o=M.load(i);o.then(this._preloadProgressHandler,this._preloadErrorHandler),t.push(o)}return Promise.all(t).then(this._preloadCompleteHandler)}destroy(){this._progress=null,this._preloadedResources=null,this._name=null,this._namespace=null,this._resources=null}_setupResources(){this._resources=[];for(let t=0;t<M.resources.length;t++){const e=M.resources[t];this._isResourceAdded(e)||(e.namespace!==void 0&&e.namespace===this._namespace?this._resources.push(e):this._namespace===void 0&&e.preload&&this._resources.push(e))}}_addMultiple(t,e=M.triggerWarns){for(let i=0;i<t.length;i++){const o=t[i];if(this._isResourceAdded(o)){e&&console.warn(`Resource manager "${this._namespace}" : Resource with same name or path has already been added for "${o.name}"`);continue}this._resources.push(o),M.resources.push(o)}}_addByNames(t,e=M.triggerWarns){for(let i=0;i<M.resources.length;i++){const o=M.resources[i];if(!t.includes(o.name))continue;if(this._isResourceAdded(o)){e&&console.warn(`Resource manager "${this._namespace}" : Resource with same name or path has already been added for "${o.name}"`);const r=t.indexOf(o.name);t.splice(r,1);continue}this._resources.push(o);const n=t.indexOf(o.name);t.splice(n,1)}t.length>0&&e&&console.warn(`Resource manager "${this._namespace}" : Could not find any resource with following name(s) : ${t.join(", ")}`)}_bindAll(){Bn(this,"_preloadCompleteHandler","_preloadErrorHandler","_preloadProgressHandler")}_preloadStartHandler(){this.dispatchEvent("start",null)}_preloadProgressHandler(t){this._preloadedResources++,this._progress=this._preloadedResources/this._resources.length,this.dispatchEvent("progress",this._progress)}_preloadCompleteHandler(t){this._isComplete=!0,this.dispatchEvent("complete",t)}_preloadErrorHandler(){console.error(`Resource manager ${this._namespace} : something went wrong while preloading resources`)}_isResourceAdded(t){for(let e=0;e<this._resources.length;e++)if(this._resources[e].type===t.type&&(this._resources[e].name===t.name||this._resources[e].path===t.path))return!0}}function an(a){const t=new Mi,e=()=>{const i=t.getDelta(),o=t.getElapsedTime();a(i,o)};it(()=>{Yt.add(e)}),oi(()=>{Yt.remove(e),t.stop()})}var Ea=4,Ma=.001,Na=1e-7,Da=10,Rt=11,kt=1/(Rt-1),Ra=typeof Float32Array=="function";function rn(a,t){return 1-3*t+3*a}function sn(a,t){return 3*t-6*a}function ln(a){return 3*a}function qt(a,t,e){return((rn(t,e)*a+sn(t,e))*a+ln(t))*a}function cn(a,t,e){return 3*rn(t,e)*a*a+2*sn(t,e)*a+ln(t)}function Oa(a,t,e,i,o){var n,r,s=0;do r=t+(e-t)/2,n=qt(r,i,o)-a,n>0?e=r:t=r;while(Math.abs(n)>Na&&++s<Da);return r}function Pa(a,t,e,i){for(var o=0;o<Ea;++o){var n=cn(t,e,i);if(n===0)return t;var r=qt(t,e,i)-a;t-=r/n}return t}function Ia(a){return a}var La=function(t,e,i,o){if(!(0<=t&&t<=1&&0<=i&&i<=1))throw new Error("bezier x values must be in [0, 1] range");if(t===e&&i===o)return Ia;for(var n=Ra?new Float32Array(Rt):new Array(Rt),r=0;r<Rt;++r)n[r]=qt(r*kt,t,i);function s(c){for(var m=0,f=1,v=Rt-1;f!==v&&n[f]<=c;++f)m+=kt;--f;var h=(c-n[f])/(n[f+1]-n[f]),g=m+h*kt,b=cn(g,t,i);return b>=Ma?Pa(c,g,t,i):b===0?g:Oa(c,m,m+kt,t,i)}return function(m){return m===0?0:m===1?1:qt(s(m),e,o)}};const Fa=Ni(La),Aa=3,_t=90,Ua=151,za={__name:"CursorAnimation",props:{className:{type:String,default:""},size:{type:Number,required:!0}},setup(a,{expose:t}){let e=0,i=!1;const o=a,n=ee(),r=ee(0),s=()=>_t/60/r.value,c=h=>{r.value=h,i=!0,e=0,n.value.setSpeed(s()),n.value.playSegments([0,_t],!0)},m=()=>{if(i=!1,e===0){n.value.playSegments([0,1],!0);return}const h=Math.min(e,_t);n.value.setSpeed(Aa),n.value.playSegments([h,0],!0),e=0},f=()=>{i=!1,e=0;const h=2,g=100,b=(g-_t)/60/h;n.value.setSpeed(h),n.value.playSegments([g,_t],!0),setTimeout(()=>{n.value.playSegments([0,1],!0)},b*1e3)},v=()=>{i=!1,e=0,n.value.setSpeed(1),n.value.playSegments([_t,Ua],!0)};return an(()=>{i&&(e+=s())}),t({playLoadCancel:m,playLoad:c,playClose:f,playOpen:v}),(h,g)=>{const b=nn;return se(),ut(b,null,{default:tt(()=>[Me(oe(kn),{ref_key:"lottie",ref:n,class:mt(o.className),"animation-link":"/lottie/C&HLottie.json",height:o.size*1.2,width:o.size*1.2,"auto-play":!1,"no-margin":!0,loop:!1},null,8,["class","height","width"])]),_:1})}}},Ga=za;class Ba{constructor(){l(this,"_position");l(this,"_lerpedPosition");l(this,"_dampFactor");W(this),this._dampFactor=3,this._bind(!0)}get position(){return this._position}get lerpedPosition(){return this._lerpedPosition}_bind(t){window[t?"addEventListener":"removeEventListener"]("mousemove",this._handleMouseMove)}_handleMouseMove(t){this._position||(this._position=new I),this._position.set(t.clientX,t.clientY)}update({time:t,delta:e}){if(this._position)if(!this._lerpedPosition)this._lerpedPosition=this._position.clone();else{const i=1-Math.exp(-this._dampFactor*e);this._lerpedPosition.lerp(this._position,i)}}}const rt=new Ba;function Lt(a,t,e){return(1-e)*a+e*t}const Xt=(a,t,e=null)=>{};let ka=0;function w(a,t,e){const i=()=>{};return{c:++ka,shader:a,use:n=>{const r=n.material||n;return r[t]=a,r.needsUpdate=!0,n},unuse:i,clear:i}}const Ha=`#define GLSLIFY 1
#define USE_UV
uniform vec3 diffuse;uniform float opacity;
#include <common>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <fog_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main(){vec4 diffuseColor=vec4(diffuse,opacity);
#include <clipping_planes_fragment>
vec3 outgoingLight=vec3(0.0);
#include <logdepthbuf_fragment>
#include <map_fragment>
float a=0.5-length(vUv-0.5);a=clamp(a/fwidth(a)+0.5,0.0,1.0);diffuseColor.a=a;
#include <alphamap_fragment>
#include <alphatest_fragment>
#include <alphahash_fragment>
outgoingLight=diffuseColor.rgb;
#include <opaque_fragment>
#include <tonemapping_fragment>
#include <colorspace_fragment>
#include <fog_fragment>
}`,Va=w(Ha,"fragmentShader");class Wa extends le{constructor(e){super();l(this,"_config");l(this,"_cursor");l(this,"_sprite");l(this,"_debug");l(this,"_targetPosition");l(this,"_dampFactor");l(this,"_animation",{scale:1});W(this),this._config=e.config,this._cursor=e.cursor,this._dampFactor=3,this._targetPosition=new I,this._sprite=this._createSprite(),this._debug=this._createDebug(e.debugContainer),this._onConfigUpdated()}_createSprite(){const e=new Di({color:"#ffffff",sizeAttenuation:!1});e.onBeforeCompile=o=>{o.vertexShader=`#define USE_UV 

`+o.vertexShader,o.fragmentShader=Va.shader};const i=new Ri(e);return i.scale.setScalar(this._config.size),this.add(i),i}holdAnimation(){const e=ae.timeline();return e.to(this._animation,{scale:0,duration:2,ease:"power2.in"}),e}releaseAnimation(){const e=ae.timeline();return e.to(this._animation,{scale:1,duration:.5,ease:"power2.in"}),e}updatePosition(e,i){const o=.5-this._config.size/2;this._targetPosition.set(Math.cos(e)*o*i,Math.sin(e)*o*i)}update({time:e,delta:i}){const o=1-Math.exp(-this._dampFactor*i);this.position.x=Lt(this.position.x,this._targetPosition.x,o),this.position.y=Lt(this.position.y,this._targetPosition.y,o),this.position.z=0;const n=.5-this._config.size/2;this.position.z=Math.sqrt(1-this.position.manhattanLength())*n,this._sprite.scale.setScalar(this._config.size*this._animation.scale)}_onConfigUpdated(){for(const e of this._cursor._rings||[])e._onConfigUpdated()}_createDebug(e){if(!T)return;const i=T.addFolder({title:"Dot",parent:e});return C.addInputs(i,this._config,this._onConfigUpdated,{size:{label:"Size",step:.01,min:0}},{className:"config"}),i}}const Ya=Math.PI*2;function ja(a=new A){const t=Math.random(),e=Math.random(),i=Math.acos(2*e-1),o=Ya*t;return a.x=Math.sin(i)*Math.cos(o),a.y=Math.sin(i)*Math.sin(o),a.z=Math.cos(i),a}const $a=`#define GLSLIFY 1
uniform vec3 uColor;uniform float uOpacity;uniform float uOffset;varying vec2 vUv;void main(){vec2 uv=vUv;float progress=fract(uv.x+uOffset)-0.5;float a=smoothstep(0.25,0.,abs(progress));gl_FragColor=vec4(vec3(1.),a*uOpacity);}`,Za=w($a,"fragmentShader"),Ka=`#define GLSLIFY 1
varying vec2 vUv;varying vec3 vNormal;void main(){vUv=uv;gl_Position=projectionMatrix*modelViewMatrix*vec4(position,1.0);}`,qa=w(Ka,"vertexShader");class Xa extends le{constructor(e){super();l(this,"_config");l(this,"_globalConfig");l(this,"_dot");l(this,"_material");l(this,"_geometry");l(this,"_animation",{scale:1,rotationAxis:new A,rotationAngle:0,opacity:1});l(this,"_mesh");l(this,"_debug");W(this),this._config=e.config,this._globalConfig=e.globalConfig,this._dot=e.dot,this._material=this._createMaterial(),this._geometry=this._createGeometry(),this._mesh=this._createMesh(),this._debug=this._createDebug(e.debugContainer),this._onConfigUpdated()}_createGeometry(){const e=new Hn(.5-this._globalConfig.dot.size/2,this._globalConfig.ring.thickness,this._globalConfig.ring.quality.radial,this._globalConfig.ring.quality.tubular);return e.rotateY(Math.PI/2+this._config.tilt),e}_createMaterial(){const e=new Y({uniforms:{uColor:{value:new V(this._config.color)},uOffset:{value:0},uOpacity:{value:1}},transparent:!0,depthTest:!1});return Za.use(e),qa.use(e),e}_createMesh(){const e=new te(this._geometry,this._material);return this.add(e),e}_updateGeometry(){this._geometry.dispose(),this._geometry=this._createGeometry(),this._mesh.geometry=this._geometry}holdAnimation(){const e=ae.timeline();return e.call(()=>{(this._animation.scale===0||this._animation.rotationAngle===0)&&ja(this._animation.rotationAxis)}),e.to(this._animation,{rotationAngle:10,duration:2.5,ease:"power1.in"},0),e.to(this._animation,{scale:0,delay:1.8,duration:.7,ease:"power1.in"},0),e.to(this._animation,{opacity:0,delay:1.8,duration:.7,ease:"none"},0),e}releaseAnimation(){const e=ae.timeline();return e.to(this._animation,{rotationAngle:0,duration:.5,ease:"power2.out"},0),e.to(this._animation,{scale:1,duration:.5,ease:"power2.out"},0),e.to(this._animation,{opacity:1,duration:.5,ease:"none"},0),e}update({time:e,delta:i}){this.up.set(0,1,0).applyQuaternion(this._config.up),this.lookAt(this._dot.position),this._mesh.material.uniforms.uOpacity.value=this._globalConfig.ring.opacity*this._animation.opacity,this._mesh.quaternion.setFromAxisAngle(this._animation.rotationAxis,this._animation.rotationAngle),this.scale.setScalar(this._animation.scale)}_onConfigUpdated(){this._mesh.material.uniforms.uOffset.value=this._config.offset,this._mesh.material.uniforms.uColor.value.set(this._config.color),this._updateGeometry()}_createDebug(e){if(!T)return;const i=(()=>{let n=JSON.stringify(this._config.up);return()=>{const r=JSON.stringify(this._config.up);n!==r&&(n=r,this._onConfigUpdated())}})(),o=T.addFolder({title:"Ring",parent:e,expanded:!1});return C.addInputs(o,this._config,this._onConfigUpdated,{color:{label:"Color"},offset:{label:"Offset",step:.01},tilt:{label:"Tilt",step:.01}},{className:"config"}),C.addInput(o,this._config,"up",i,{label:"Up",view:"rotation",unit:"rad",className:"config"}),o}}const Qa=new I;class Ja extends le{constructor(e){super();l(this,"_config");l(this,"_globalConfig");l(this,"_debug");l(this,"_ringsFolder");l(this,"_rings");l(this,"_dot");l(this,"_lockPosition",!1);W(this),this._config=e.config,this._globalConfig=e.globalConfig,this._debug=this._createDebug(e.debugContainer),this._dot=this._createDot(),this._rings=this._createRings(),this._onConfigUpdated()}_createRings(){const e=[];for(const i of this._config.ring.elements){const o=new Xa({config:i,globalConfig:this._config,debugContainer:this._ringsFolder,dot:this._dot});this.add(o),e.push(o)}return e}_createDot(){const e=new Wa({config:this._config.dot,debugContainer:this._debug,cursor:this});return this.add(e),e}lockPosition(){this._lockPosition=!0}unlockPosition(){this._lockPosition=!1}holdAnimation(){const e=ae.timeline();e.add(this._dot.holdAnimation(),0);for(const i of this._rings)e.add(i.holdAnimation(),0);return e}releaseAnimation(){const e=ae.timeline();e.add(this._dot.releaseAnimation(),0);for(const i of this._rings)e.add(i.releaseAnimation(),0);return e}update({time:e,delta:i}){if(this._lockPosition)this._dot.updatePosition(0,0);else if(rt.lerpedPosition){const o=Qa.subVectors(rt.position,rt.lerpedPosition);o.y=-o.y;const n=Math.min(o.length()/(this._globalConfig.size/2),1),r=o.angle();this._dot.updatePosition(r,n)}for(const o of this._rings)o.update({time:e,delta:i});this._dot.update({time:e,delta:i})}_onConfigUpdated(){for(const e of this._rings)e._onConfigUpdated()}_createDebug(e){if(!T)return;const i=T.addFolder({title:"Cursor",parent:e}),o=i.addFolder({title:"Rings"});C.addInputs(o,this._config.ring,this._onConfigUpdated,{thickness:{label:"Thickness",step:.001,min:0},opacity:{label:"Opacity",step:.01,min:0},elements:!1,quality:!1},{className:"config"});const n=o.addFolder({title:"Quality"});return C.addInputs(n,this._config.ring.quality,this._onConfigUpdated,{radial:{label:"Radial",step:1,min:3},tubular:{label:"Tubular",step:1,min:3}},{className:"config"}),this._ringsFolder=o,i}}const Ie={size:60,quality:{dpr:2,antialias:!0},components:{ring:{thickness:.012,opacity:.3,quality:{radial:4,tubular:64},elements:[{up:{x:.6591807313454883,y:.031259595987177306,z:-.04433935511394203,w:.8061779735629073},tilt:-.05,color:"#ff0000",offset:.42},{up:{x:.1045710539234992,y:-3.7660317287840672,z:-.03534287533824316,w:.9807571351608771},tilt:0,color:"#00ff00",offset:.22},{up:{x:-.0004979862203394747,y:-4.927919777337282,z:.11127895451232299,w:8.830479581929723},tilt:-.3,color:"#0000ff",offset:-.019999999999999997},{up:{x:.8295020137796606,y:-.302919777337282,z:.131278954512323,w:.45047958192972165},tilt:-.3900000000000001,color:"#ff00ff",offset:-.42000000000000004}]},dot:{size:.06}}};class er{constructor(t){l(this,"_renderer");l(this,"_scene");l(this,"_camera");l(this,"_clock");l(this,"_enabled",!0);l(this,"_debug");l(this,"_components");W(this),this._renderer=this._createRenderer(t.canvas),this._scene=this._createScene(),this._camera=this._createCamera(),this._clock=this._createClock(),this._debug=this._createDebug({reload:t.reload,resize:t.resize}),this._components=this._createComponents(),this._bind(!0)}get cursor(){return this._components.cursor}_bind(t){t?ae.ticker.add(this._tick):ae.ticker.remove(this._tick)}_createRenderer(t){const e=t.getBoundingClientRect(),i=new Vn({canvas:t,antialias:Ie.quality.antialias});return i.setSize(e.width*Ie.quality.dpr,e.height*Ie.quality.dpr,!1),i.autoClear=!1,i.setClearAlpha(0),i}_createScene(){return new pe}_createCamera(){const t=new Oi(-.5,.5,.5,-.5,.1,4);return t.position.z=2,t}_createClock(){return new Mi}_onConfigUpdated(){const t=this._renderer.domElement.getBoundingClientRect();this._renderer.setSize(t.width*Ie.quality.dpr,t.height*Ie.quality.dpr,!1)}_createDebug(t){if(!T)return;const e=T.addFolder({title:"Cursor Scene"});e.addButton({title:"Copy config"}).on("click",()=>{navigator.clipboard.writeText("export default "+JSON.stringify(Ie,null,"	"))}),C.addInput(e,Ie,"size",()=>{t.resize(),setTimeout(this._onConfigUpdated,0)},{label:"Size",step:1,min:0,className:"config"});const i=e.addFolder({title:"Quality"});return C.addInputs(i,Ie.quality,this._onConfigUpdated,{antialias:!1,dpr:{label:"Dpr",min:0,step:.1}},{className:"config"}),C.addInput(i,Ie.quality,"antialias",()=>setTimeout(t.reload,0),{label:"Antialias",className:"config"}),e}_createComponents(){const t=new Ja({config:Ie.components,globalConfig:Ie,debugContainer:this._debug});return this._scene.add(t),{cursor:t}}_tick(){const t=this._clock.getDelta(),e=this._clock.getElapsedTime();if(this._enabled){for(const i in this._components){const o=this._components[i];"update"in o&&o.update({time:e,delta:t})}this._renderer.clear(),this._renderer.render(this._scene,this._camera)}}destroy(){var t;this._bind(!1),this._renderer.domElement.width=1,this._renderer.domElement.height=1,this._renderer.dispose(),(t=this._debug)==null||t.dispose()}setEnabled(t){this._enabled=t}}const tr={__name:"CursorCanvas",props:{hidden:{type:Boolean,required:!1}},emits:["resize"],setup(a,{expose:t,emit:e}){const i=a,o=e,n=ee();let r;const s=()=>{r.destroy()},c=()=>{r=new er({canvas:n.value,reload:f,resize:x})},m=ee(0),f=()=>{s(),m.value++,Fo(c)},v=()=>(r.cursor.unlockPosition(),r.cursor.releaseAnimation()),h=()=>(r.cursor.lockPosition(),r.cursor.holdAnimation()),g=()=>(r.cursor.unlockPosition(),r.cursor.releaseAnimation()),b=()=>{},x=()=>{o("resize")};return F(()=>!i.hidden,p=>{r.setEnabled(p)}),it(()=>{x(),c()}),oi(()=>{s()}),t({playLoadCancel:v,playLoad:h,playClose:g,playOpen:b}),(p,y)=>(se(),xe("canvas",{ref_key:"canvas",ref:n,key:oe(m)}))}},ir=tr,or=a=>(Ao("data-v-f57103e8"),a=a(),Uo(),a),nr=or(()=>_e("path",{d:"M145.772 150.639L145.77 150.65L145.769 150.66C144.149 163.559 140.408 173.399 134.224 181.902C132.762 183.897 128.427 188.536 126.496 190.163C121.647 194.224 115.101 197.642 109.261 199.179L109.249 199.182C104.413 200.464 97.8192 201.001 92.9584 200.502L92.949 200.501C73.2785 198.51 57.2957 184.366 51.2035 161.884L51.202 161.879C48.3304 151.317 47.8382 137.75 50.0562 124.456L50.057 124.452C52.743 108.287 59.137 92.6338 67.852 80.538C70.6214 76.7195 76.0473 71.0092 79.0171 68.7308L79.0258 68.7241L79.0345 68.7174C84.4445 64.5397 89.7587 62.3368 94.9523 61.7651C97.1853 61.5275 97.9536 61.5253 100.289 61.7856C105.092 62.3453 110.552 64.6393 115.934 68.7949C118.345 70.6949 123.864 76.3284 125.968 79.103C136.207 92.6069 143.074 110.212 145.653 130.325C145.852 131.91 146.009 136.066 146.036 140.63C146.063 145.239 145.949 149.261 145.772 150.639Z",class:"egg__inner"},null,-1)),ar=[nr],rr={__name:"CursorEgg",props:{light:{type:Boolean,default:!1}},setup(a){return(t,e)=>(se(),xe("svg",{class:mt(["egg",{"egg--light":a.light}]),width:"195",height:"263",viewBox:"0 0 195 263",fill:"none",xmlns:"http://www.w3.org/2000/svg"},ar,2))}},sr=lt(rr,[["__scopeId","data-v-f57103e8"]]),lr={viewBox:"0 0 600 600",class:"cursor__circle",xmlns:"http://www.w3.org/2000/svg"},cr={__name:"Cursor",props:{show:{type:Boolean,default:!0}},setup(a,{expose:t}){const e=a,i=ve(),o=ni(),n=ee(),r=ee(),s=ee(),c=ee(),m=ee(Ie.size),f=ee(!1),v=ee(!0),h={value:1},g=ee(!1),b=Be(()=>!v.value||!f.value||i.menu.isOpen||!e.show||i.cursor.isOver),x=Be(()=>i.mainLoader.visible),p=Be(()=>!i.mainLoader.visible),y=Be(()=>i.home.isHold||i.home.isZoom?"":i.mainLoader.hidding?i.menu.isOpen||i.mainLoader.visible||!g.value?"":o.globalTexts.clickHoldToListen:"Click to enable sound"),_=Be(()=>({width:m.value+"px",height:m.value+"px"}));let S;an((H,U)=>{rt.update({time:U,delta:H});const G=rt.position;!S&&G&&(f.value=!0),S=G,G&&(g.value=rt.position.distanceTo(rt.lerpedPosition)<40,n.value.style.transform=`translate(calc(${G.x}px - 50%), calc(${G.y}px - 50%)) scale(${h.value})`)}),it(()=>{document.addEventListener("mouseover",E),document.addEventListener("mouseout",D)}),oi(()=>{document.removeEventListener("mouseover",E),document.removeEventListener("mouseout",D)});const D=()=>{v.value=!1},E=()=>{v.value=!0},R=()=>{m.value=Ie.size};let d;const N=Fa(.4,0,.1,1);return t({playLoadCancel:()=>(d==null||d.kill(),d=ae.timeline(),d.call(c.value.playLoadCancel),d.to(h,{value:1,duration:.4,ease:"power2.out"},0),d.to(r.value,{scale:1,ease:N,duration:1},0),d.add(s.value.playLoadCancel(),.2),d),playLoad:()=>{const H=Yn(ya,ba,i.home.interactionController.quickZoom),U=H*.32,G=H*.85;d==null||d.kill(),d=ae.timeline();const k=s.value.playLoad(),X=k.duration(),fe=G/1e3,me=X/fe;k.timeScale(me),d.add(k),d.to(h,{value:.75,duration:.4,ease:"power2.out"},0),d.to(h,{value:1,duration:H/1e3-.4,ease:"none"},.4),d.call(()=>c.value.playLoad(U/1e3),null,(H-U)/1e3);const O=.1;return d.to(r.value,{scale:.9,transformOrigin:"center",duration:U/1e3-O,ease:"power1.out"},(H-U)/1e3+O),d.call(()=>{},null,H),d},playClose:()=>(d==null||d.kill(),d=ae.timeline(),d.call(c.value.playClose),d.to(h,{value:1,duration:.4,ease:"power2.out"},0),d.to(r.value,{scale:1,transformOrigin:"center",ease:N,duration:1},0),d.add(s.value.playClose(),0),d),playOpen:()=>(d==null||d.kill(),d=ae.timeline(),d.call(c.value.playOpen),d.to(h,{value:1,ease:"power2.out",duration:.7},0),d.to(r.value,{scale:1.07,transformOrigin:"center",ease:"power2.out",duration:.7},0),d.add(s.value.playOpen(),.2),d)}),(H,U)=>(se(),xe("div",{ref_key:"container",ref:n,class:mt(["cursor",{"cursor--dark":!oe(p),"cursor--hidden":oe(b)}]),style:Wn(oe(_))},[Me(ir,{ref_key:"canvas",ref:s,class:mt(["cursor__canvas",{"cursor__canvas--hidden":oe(x)}]),hidden:oe(b),onResize:R},null,8,["class","hidden"]),Me(Ga,{ref_key:"animation",ref:c,"class-name":"cursor__animation",size:oe(m)},null,8,["size"]),(se(),xe("svg",lr,[_e("circle",{ref_key:"circle",ref:r,cx:"300",cy:"300",r:"270"},null,512)])),Me(sr,{class:mt(["cursor__egg",{"cursor__egg--hidden":!oe(x)}]),light:oe(p)},null,8,["class","light"]),Me(jt,{name:"fade-global",mode:"out-in"},{default:tt(()=>[(se(),xe("div",{key:oe(y),class:"cursor__text"},Je(oe(y)),1))]),_:1})],6))}},ur=lt(cr,[["__scopeId","data-v-11dc03be"]]),mr={class:"menuBlock"},dr={class:"medias"},vr={__name:"MenuBlock",props:{},setup(a){ve();const t=ni(),e=Be(()=>t.menu.medias);return Be(()=>t.menu),it(()=>{}),oi(()=>{}),(i,o)=>(se(),xe("section",mr,[Me(Sa,{"is-white":!0,"is-menu":!0}),_e("div",dr,[(se(!0),xe(Ot,null,Wt(oe(e),(n,r)=>(se(),ut(Ca,{key:r,name:n.icon,url:n.url,"is-white":!0,class:"icon"},null,8,["name","url"]))),128))])]))}},fr=lt(vr,[["__scopeId","data-v-78b1fb43"]]),hr=jn("/video/hatom_logo.mp4");function un(a,t=4){return Number(a.toFixed(t))}const Ut=a=>(Ao("data-v-d365f691"),a=a(),Uo(),a),gr=Ut(()=>_e("mask",{id:"mask",style:{"mask-type":"alpha"},maskUnits:"userSpaceOnUse",x:"2",y:"2",width:"121",height:"159"},[_e("path",{d:"M58.0407 2.26237C51.2065 3.02455 44.042 6.07327 37.3856 11.0275C34.2607 13.3902 27.8329 19.7163 25.1907 23.0699C13.2244 38.2628 5.39935 57.8 2.47765 79.7509C1.91872 84.0191 1.81709 98.7038 2.35062 102.693C4.23067 117.098 8.65133 128.531 16.1969 138.515C18.1278 141.056 23.2344 146.315 25.775 148.373C31.8217 153.251 39.8754 157.316 47.294 159.196C53.366 160.746 61.3943 161.381 67.568 160.771C92.339 158.357 111.851 141.157 119.117 115.345C122.547 103.201 123.055 88.0333 120.514 73.374C117.44 55.5643 110.123 38.2374 99.9862 24.6959C96.658 20.2753 90.3065 13.7967 86.4193 10.9258C79.6867 5.92083 72.6746 2.99914 65.4593 2.23695C62.4868 1.93208 61.1149 1.93209 58.0407 2.26237Z",fill:"black"})],-1)),pr={mask:"url(#mask)"},_r=Ut(()=>_e("rect",{x:"-65.1775",y:"114.389",width:"256.177",height:"2.79692",fill:"black"},null,-1)),xr=Ut(()=>_e("path",{d:"M60.4336 219.116L60.4336 -56.6786H63.2305L63.2305 219.116H60.4336Z",fill:"black"},null,-1)),br=[_r,xr],yr=Ut(()=>_e("path",{d:"M62.0378 160.426C56.1834 160.426 50.3863 159.273 44.9776 157.033C39.5689 154.792 34.6544 151.509 30.5147 147.369C26.375 143.229 23.0912 138.315 20.8509 132.906C18.6105 127.497 17.4574 121.7 17.4574 115.846C17.4574 109.991 18.6105 104.194 20.8509 98.7856C23.0913 93.3769 26.375 88.4624 30.5147 84.3227C34.6544 80.183 39.5689 76.8993 44.9776 74.6589C50.3864 72.4185 56.1834 71.2654 62.0378 71.2654C67.8922 71.2654 73.6892 72.4185 79.098 74.6589C84.5067 76.8993 89.4212 80.183 93.5609 84.3227C97.7005 88.4624 100.984 93.3769 103.225 98.7856C105.465 104.194 106.618 109.991 106.618 115.846C106.618 121.7 105.465 127.497 103.225 132.906C100.984 138.315 97.7005 143.229 93.5609 147.369C89.4212 151.509 84.5067 154.792 79.0979 157.033C73.6892 159.273 67.8921 160.426 62.0378 160.426L62.0378 160.426Z",stroke:"black","stroke-opacity":"0.2","stroke-width":"2.79692"},null,-1)),Sr=Ut(()=>_e("path",{d:"M58.0407 2.26237C51.2065 3.02455 44.042 6.07327 37.3856 11.0275C34.2607 13.3902 27.8329 19.7163 25.1907 23.0699C13.2244 38.2628 5.39935 57.8 2.47765 79.7509C1.91872 84.0191 1.81709 98.7038 2.35062 102.693C4.23067 117.098 8.65133 128.531 16.1969 138.515C18.1278 141.056 23.2344 146.315 25.775 148.373C31.8217 153.251 39.8754 157.316 47.294 159.196C53.366 160.746 61.3943 161.381 67.568 160.771C92.339 158.357 111.851 141.157 119.117 115.345C122.547 103.201 123.055 88.0333 120.514 73.374C117.44 55.5643 110.123 38.2374 99.9862 24.6959C96.658 20.2753 90.3065 13.7967 86.4193 10.9258C79.6867 5.92083 72.6746 2.99914 65.4593 2.23695C62.4868 1.93208 61.1149 1.93209 58.0407 2.26237Z",stroke:"black","stroke-width":"2.79692"},null,-1)),Cr={__name:"LoaderEgg",setup(a,{expose:t}){const e=ee(),i=ee(),o=ee();return t({moveToPercent:s=>{if(o.value.style.strokeDashoffset=(1-s)*282,s<=.25)i.value.style.transform=`translate(${$t(s,[0,.25],[0,-44.4])}px, 0px)`;else if(s>.75)i.value.style.transform=`translate(${$t(s,[.75,1],[44.4,0])}px, 0px)`;else{const c=Math.cos((s+.25)*Math.PI*2)*44.4,m=Math.sin((s+.25)*Math.PI*2)*44.4;i.value.style.transform=`translate(${c}px, ${m}px)`}},fadeOut:()=>ae.to(e.value,{autoAlpha:0,duration:.5,ease:"none"})}),(s,c)=>(se(),xe("svg",{ref_key:"svg",ref:e,class:"egg",width:"124",height:"163",viewBox:"0 0 124 163",fill:"none",xmlns:"http://www.w3.org/2000/svg"},[gr,_e("g",pr,[_e("g",{ref_key:"crossGroup",ref:i,class:"egg__cross"},br,512)]),_e("path",{ref_key:"loadingRing",ref:o,class:"egg__ring",d:"M62.0377 160.426C56.1833 160.426 50.3862 159.273 44.9775 157.033C39.5687 154.792 34.6542 151.509 30.5146 147.369C26.3749 143.229 23.0911 138.315 20.8508 132.906C18.6104 127.497 17.4573 121.7 17.4573 115.846C17.4573 109.991 18.6104 104.194 20.8508 98.7856C23.0911 93.3769 26.3749 88.4624 30.5146 84.3227C34.6542 80.183 39.5687 76.8993 44.9775 74.6589C50.3862 72.4185 56.1833 71.2654 62.0377 71.2654C67.892 71.2654 73.6891 72.4185 79.0978 74.6589C84.5066 76.8993 89.4211 80.183 93.5608 84.3227C97.7004 88.4624 100.984 93.3769 103.225 98.7856C105.465 104.194 106.618 109.991 106.618 115.846C106.618 121.7 105.465 127.497 103.225 132.906C100.984 138.315 97.7004 143.229 93.5607 147.369C89.4211 151.509 84.5066 154.792 79.0978 157.033C73.6891 159.273 67.892 160.426 62.0376 160.426L62.0377 160.426Z",stroke:"black","stroke-width":"2.79692"},null,512),yr,Sr],512))}},Tr=lt(Cr,[["__scopeId","data-v-d365f691"]]),wr={class:"loader__subtitle loader__subtitle--top"},Er={class:"loader__counter"},Mr={key:0},Nr={key:1,style:{visibility:"hidden"}},Dr={class:"loader__wrapper"},Rr={class:"loader__counter"},Or={key:0,style:{visibility:"hidden"}},Pr={key:1},Ir={key:2},Lr={class:"loader__subtitle loader__subtitle--bottom"},Fr={__name:"Loader",props:{resourceFileSize:{type:Object,default:()=>Yi}},setup(a){const t=a,e=ee(),i=ee(),o=ee(),{$webglApp:n}=Go(),r=ve(),s=ni(),{event:c}=Bo(),m=ee(!1),f=ee(!1),v=ee(!1),h=ee(!1),g=ee(0),b=ee(0),x=ee(0);it(()=>{f.value=!0,v.value=ne.params.skipLoader,v.value&&setTimeout(()=>{const d=ae.timeline();d.add(y()),d.add(p()),d.timeScale(1e3)},0),r.mainLoader.progressComplete&&y(),Yt.add(_),et.addEventListener("complete",R),et.addEventListener("progress",E),window.addEventListener("click",D)}),zo(()=>{Yt.remove(_),et.removeEventListener("complete",R),et.removeEventListener("progress",E),window.removeEventListener("click",D)});function p(){const d=ae.timeline();d.add(e.value.fadeOut(),0),d.set(o.value,{background:"none"},0),d.call(()=>i.value.play(),null,.3),d.add(n.viewManager.showView1("home"),0),d.call(()=>{h.value=!0,!(!m.value&&!ne.params.previewMode)&&y()},null,1.2),ne.params.previewMode&&d.timeScale(1e3)}function y(){const d=ae.timeline();return d.call(()=>He.play("ExpSFX_In")),d.call(()=>{r.updateMainLoader({hidding:!0})},null,0),d.to(o.value,{autoAlpha:0,duration:1},0),d.to(i.value,{autoAlpha:0,duration:1},0),d.call(()=>{r.updateMainLoader({visible:!1})},null,2.3),ne.params.previewMode&&d.timeScale(1e3),d}function _(){b.value+=(g.value-b.value)*.1,v.value&&(b.value=g.value);const d=Math.abs(b.value-g.value);f.value&&d<.001&&g.value>=1?(f.value=!1,S()):f.value&&(x.value=un(b.value+.003,3))}function S(){setTimeout(()=>{r.updateMainLoader({progressComplete:!0}),Fo(()=>{p()})},500)}function D(){m.value||(m.value=!0,c("loader_click",{timing:!r.mainLoader.progressComplete||!h.value?"early":"late"}),r.mainLoader.progressComplete&&h.value&&y())}function E(){const d=t.resourceFileSize;let N=0;for(const q in d)N+=d[q];const K=et._resourceLoader._resourcesToPreload;let ce=0;for(let q=0;q<K.length;q++){const L=K[q],H=L.type==="gltf";let U=0;H?U=M.loaders.gltf.progresses[L.path]||0:U=M.cache.includes(L)?1:0;const G=Yi[L.path]/N;ce+=U*G}g.value=ce}function R(){r.updateMainLoader({loaded:!0}),v.value&&setTimeout(()=>{r.updateMainLoader({progressComplete:!0})},0)}return F(x,d=>{e.value.moveToPercent(Math.floor(d*4)/4+1e-4)}),(d,N)=>(se(),xe(Ot,null,[_e("div",{ref_key:"loaderElement",ref:o,class:"loader"},[_e("div",wr,Je(oe(s).globalTexts.loading),1),_e("div",Er,[Me(jt,{name:"fade-global",mode:"out-in"},{default:tt(()=>[oe(r).mainLoader.progressComplete?(se(),xe("span",Nr," 100 ")):(se(),xe("span",Mr,Je(Math.floor(oe(x)*100)),1))]),_:1})]),_e("div",Dr,[Me(Tr,{ref_key:"eggComponent",ref:e},null,512)]),_e("div",Rr,[Me(jt,{name:"fade-global",mode:"out-in"},{default:tt(()=>[oe(r).mainLoader.hidding?(se(),xe("span",Or," 100 ")):oe(r).mainLoader.progressComplete?(se(),xe("span",Pr,Je(oe(s).globalTexts.clickToEnter),1)):(se(),xe("span",Ir,Je(Math.floor(oe(x)*100)),1))]),_:1})]),_e("div",Lr,Je(oe(s).globalTexts.headphones),1)],512),_e("video",{ref_key:"videoElement",ref:i,class:"loader__video",src:hr,muted:"",playsinline:""},null,512)],64))}},Ar=lt(Fr,[["__scopeId","data-v-d53489c0"]]);class Ur extends $n{constructor(t){super(),this._debugName=t.debugName||"Cameras",this._config=t.config,this._view=t.view,this._renderer=t.renderer,this._scene=t.scene,this._cameras=t.cameras,this._active=null,this._isEnabled=!1,this._createDebug(this._config.name),this._createCameras(t.cameras),this._setupDebugTypes()}destroy(){var t;(t=this._debug)==null||t.dispose(),this._destroyCameras()}get defaultCamera(){return this._cameras.find(t=>t.default===!0)}get active(){return this._active}get(t){return this._getCamera(t)}enable(){var t;this._isEnabled=!0,(t=this._active)==null||t.enable()}disable(){var t;this._isEnabled=!1,(t=this._active)==null||t.disable()}activate(t){var i,o;if(this._active&&this._active.name===t)return;(i=this._active)==null||i.hide(),(o=this._active)==null||o.disable();const e=this.get(t);e&&(this._active=e,this._active.enable(),this._active.show(),this.dispatchEvent("change",e)),this._updateDebugCamera(this._active)}_createCameras(t){this._cameras=[],t.forEach(e=>{const i=Object.assign({debugContainer:this._debug,renderer:this._renderer,scene:this._scene,view:this._view},e.options),o=new e.camera(i);o.name=e.name,o.default=i.default===!0,this._cameras.push(o)}),this.defaultCamera||(this._cameras[0].default=!0)}_getCamera(t){var e;return(e=this._cameras)==null?void 0:e.find(i=>i.name===t)}_destroyCameras(){this._cameras.forEach(t=>{typeof t.destroy=="function"&&t.destroy()}),this._cameras=null}update({time:t,delta:e}){this._isEnabled&&this._cameras.forEach(i=>{typeof i.update=="function"&&i.update({time:t,delta:e})})}resize(t,e){this._cameras.forEach(i=>i.resize(t,e))}_createDebug(t){T&&(this._debug=T.addFolder({title:this._debugName,parent:t}))}_setupDebugTypes(){if(!this._debug)return;const t={};this._cameras.forEach(e=>{t[e.name]=e.name}),this._debug.addBlade({view:"list",label:"camera",value:null,options:t}).on("change",({value:e})=>{this.activate(e)})}_updateDebugCamera(t){if(!this._debug)return;const e=this._debug.children.find(i=>i.label==="camera");e.value=t.name}}function mn(a){var t;a.type==="gltf"&&((t=a.data)!=null&&t.scene)?a.data.scene.traverse(e=>{var i,o;e.geometry&&((i=e.geometry)==null||i.dispose(),e.geometry=null),e.material&&(Object.keys(e.material).forEach(n=>{const r=e.material[n];r&&typeof r=="object"&&r.isTexture&&(r.dispose(),e.material[n]=null)}),(o=e.material)==null||o.dispose(),e.material=null)}):a.type==="ktx2"&&a.data&&(a.data.mipmaps=null)}class dn{constructor(t){this._debugContainer=t.debugContainer,this._defaultPosition=t.position||new A(0,0,5),this._defaultRotation=t.rotation||new At(0,0,0),this._defaultFov=t.fov||50,this._name=null,this._isEnabled=!1,this._instance=this._createInstance()}get name(){return this._name}set name(t){this._name=t}get instance(){return this._instance}enable(){this._isEnabled=!0}disable(){this._isEnabled=!1}show(){this._showDebug()}hide(){this._hideDebug()}_createInstance(){const t=new Pi(100,1,.1,1e3);return t.position.copy(this._defaultPosition),t.rotation.copy(this._defaultRotation),t.fov=this._defaultFov,t}resize(t,e){this._instance.aspect=t/e,this._instance.updateProjectionMatrix()}_showDebug(){T&&(this._instance.near,this._instance.far)}_hideDebug(){var t;(t=this._debug)==null||t.dispose()}}let Ce=console.log.bind(console,"%c - [ %s ] View.%s() - ","background-color: lightblue; color: black");ne.isProduction&&(Ce=()=>{});class zr{constructor(t){l(this,"_config");l(this,"_configName");l(this,"_viewConfig");l(this,"_debugParams");l(this,"_renderToTarget");l(this,"_autoInitConfig");l(this,"_prepareOnInit");l(this,"_destroyOnHideComplete");l(this,"_viewPath");l(this,"_debug");l(this,"_resourceManager");l(this,"_components");l(this,"_camerasConfig");l(this,"_cameraManager");l(this,"_renderTarget");l(this,"_scene");l(this,"_showHideTl");l(this,"_commonUniforms");l(this,"_renderAlpha",{value:1});l(this,"_renderIndex",0);l(this,"_preCompiled",!1);l(this,"_wasVisible",!1);l(this,"_visible",!1);l(this,"_minDpr");l(this,"_maxDpr");l(this,"_showCount");var e;W(this),this._viewConfig=t.config,this._configName=t.configName,this._config=(e=t.config)==null?void 0:e.config,this._autoInitConfig=t.autoInitConfig!=null?t.autoInitConfig:!0,this._renderToTarget=t.renderToTarget!==!1,this._prepareOnInit=t.prepareOnInit!==!1,this._destroyOnHideComplete=!!t.destroyOnHideComplete,this._debugParams=t.debugParams||{},this._minDpr=t.minDpr||1,this._maxDpr=t.maxDpr,this._camerasConfig=t.camerasConfig||[{default:!0,name:"default",camera:dn}],this._createCommonUniforms(),this._createDebug(),this._createResourceManager(),this._createScenes(),this._createCameraManagers(),this._createRenderTargets(),this.visible=!1,this._showCount=0,this._bind(!0),Ce(this.viewName,"instanciate")}destroy(){this._destroyComponents(),this._bind(!1)}_bind(t=!0){z[t?"addEventListener":"removeEventListener"]("resize",this.onWindowResize)}set viewPath(t){this._viewPath=t}get viewPath(){return this._viewPath}get viewName(){var t;return(t=this._viewConfig)==null?void 0:t.name}get configName(){return this._configName}get scene(){return this._scene}get camera(){var t;return(t=this._cameraManager.active)==null?void 0:t.instance}get renderTargetTexture(){var t;return(t=this._renderTarget)==null?void 0:t.texture}get resourceManager(){return this._resourceManager}get renderAlpha(){return this._renderAlpha.value}set renderAlpha(t){this._renderAlpha.value=t}get renderIndex(){return this._renderIndex}set renderIndex(t){this._renderIndex=t}get visible(){return this._visible}set visible(t){this._visible=t}get preCompiled(){return this._preCompiled}set preCompiled(t){this._preCompiled=t}prepare(t=!1){if(!(t&&!this._prepareOnInit)){if(!this._areResourcesLoaded())return!1;if(this._components)return!0;Ce(this.viewName,"prepare"),this._createComponents(),this.compile()}}async _loadAssets(){Ce(this.viewName,"_loadAssets"),this._areResourcesLoaded()||await this._resourceManager.load()}_areResourcesLoaded(){return this._resourceManager.resources.filter(t=>!t.data).length===0}_resetComponents(){this._showCount>0&&this._destroyOnHideComplete&&this._destroyComponents(),this.prepare()}compile(){this._preCompiled||(Ce(this.viewName,"compile"),this._preCompiled=!0,this.scene&&z.renderer.instance.compile(this.scene,this.camera))}show(){Ce(this.viewName,"show"),this._resetComponents(),this._showCount++;const t=ae.timeline({onComplete:this._onShowComplete});return t.add(this._onShowStart,0),this._showHideTl=t,t}showComponents(){}_onShowStart(){Ce(this.viewName,"showStart"),this._autoInitConfig&&this._configInit(),this._cameraManager.enable(),this.visible=!0}_onShowComplete(){Ce(this.viewName,"showComplete"),this._showHideTl=null}hide(t=null){Ce(this.viewName,"hide");const e=ae.timeline({onComplete:this._onHideComplete,onCompleteParams:[t]});return e.add(this._onHideStart,0),this._showHideTl=e,e}_onHideStart(){Ce(this.viewName,"hideStart"),this._cameraManager.disable(),this._configDestroy()}_onHideComplete(t=null){Ce(this.viewName,"hideComplete"),this._destroyOnHideComplete&&this._destroyComponents(),this.visible=!1,this._showHideTl=null,t&&t()}_createResourceManager(){var t;this._resourceManager=new wa({namespace:(t=this._viewConfig)==null?void 0:t.name})}_createScenes(){var t,e,i,o;this._scene=new pe,this._scene.background=(e=(t=this._config)==null?void 0:t.renderer)!=null&&e.clearColor?new V((o=(i=this._config)==null?void 0:i.renderer)==null?void 0:o.clearColor):null}_createCameraManagers(){this._cameraManager=new Ur({debugName:"Cameras",view:this,config:this._viewConfig,renderer:z.renderer.instance,scene:this._scene,cameras:this._camerasConfig}),this._cameraManager.activate(this._cameraManager.defaultCamera.name)}_createCommonUniforms(){this._commonUniforms={uResolution:{value:new I(300,100)},uDpr:{value:1}}}_createComponents(){Ce(this.viewName,"_createComponents",this._components),this._components=this._components||{}}_updateComponents({time:t,delta:e}){for(const i in this._components)this._components[i]&&typeof this._components[i].update=="function"&&this._components[i].update({time:t,delta:e})}_destroyComponents(){var t;if(this._components){for(const e in this._components)this._components[e]&&(this._components[e].isObject3D&&((t=this._components[e].parent)==null||t.remove(this._components[e])),typeof this._components[e].destroy=="function"&&this._components[e].destroy(),this._components[e]=null,Ce(this.viewName,"_destroyComponents",e));this._components=null,Ce(this.viewName,"_destroyComponents",this._components),z.renderer.instance.renderLists.dispose()}}_disposeResources(t=[]){const e=[];for(let i=0;i<M.resources.length;i++){const o=M.resources[i];o.namespace!==void 0&&t.includes(o.namespace)&&e.push(o)}this._viewConfig.resources.items.concat(e).forEach(({name:i,type:o})=>{const n=this.resourceManager.getResourceByName(i);n&&(Ce(this.viewName,"_disposeResources",i,o),mn(n),this.resourceManager.dispose(i))})}_setupResources(t=[]){this.resourceManager._resources=[];for(let e=0;e<M.resources.length;e++){const i=M.resources[e];this.resourceManager._isResourceAdded(i)||(i.namespace!==void 0&&(i.namespace===this.resourceManager._namespace||t.includes(i.namespace))?this.resourceManager._resources.push(i):this.resourceManager._namespace===void 0&&i.preload&&this.resourceManager._resources.push(i))}}update({time:t,delta:e}){var i;if(!this.visible){this._wasVisible&&(this._wasVisible=!1,this._renderAlpha.value=0,Ce(this.viewName,"update",this.visible));return}this._updateComponents({time:t,delta:e}),(i=this._cameraManager)==null||i.update({time:t,delta:e}),this._renderTarget&&this._renderScene(this._renderTarget,this.scene,this.camera),this._wasVisible=!0}onWindowResize({renderWidth:t,renderHeight:e,renderScale:i}){var o,n;(o=this._cameraManager)==null||o.resize(t,e),(n=this._renderTarget)==null||n.setSize(t,e),this._commonUniforms.uResolution.value.set(t,e),this._commonUniforms.uDpr.value=i}_createRenderTargets(){this._renderToTarget&&(this._renderTarget=new ye)}_renderScene(t,e,i){if(!t||!e||!i)return;const o=z.renderer.instance.autoClear;z.renderer.instance.autoClear=!0,z.renderer.instance.setClearColor(16777215,0),z.renderer.instance.setRenderTarget(t),z.renderer.instance.render(e,i),z.renderer.instance.autoClear=o,z.renderer.instance.setRenderTarget(null)}_onConfigUpdated(){}_createDebug(){T&&(this._debug=T.addFolder({title:this._viewConfig.name,parent:this._viewConfig.name}),this._debug.addInput(T,"isHelpersVisible",{label:"helpers"}))}_configInit(){!T||!this._configName||(vi.init(this._configName,this._config),vi.initInterface(T.pane,this._configName))}_configDestroy(){!T||!this._configName||vi.destroy(this._configName)}}function Gr(a,t,e){return Math.min(Math.max(a,t),e)}function Ft(a,t,e){return Gr($t(a,t,e),Math.min(...e),Math.max(...e))}const pi="egg_to_griffin_transition",Qi="griffin_armor_transition",Ji="planet_reveal",eo="slow_buildup",Br="Quick_Buildup",kr="Release",_i=["egg_rollover_1","egg_rollover_2","egg_rollover_3","egg_rollover_4","egg_rollover_5"];class Hr{constructor(){l(this,"_store");l(this,"_scope");l(this,"_audioList",{});W(this),this._store=ve(),this._bind(!0)}_bind(t=!0){t?(St.add(this._update),this._scope=new ko,this._scope.run(()=>{F(()=>this._store.home.eggExplosion>.1,e=>{z._viewManager._views[0].instance._composer.passes.final.uniforms.uBlackOverlay.value>0||(e?this._triggerEventAudio(pi):this._fadeEventAudio(pi))}),F(()=>this._store.home.armour>.01,e=>{z._viewManager._views[0].instance._composer.passes.final.uniforms.uBlackOverlay.value>0||e&&this._fadeEventAudio(pi)}),F(()=>this._store.home.armour>.2,e=>{z._viewManager._views[0].instance._composer.passes.final.uniforms.uBlackOverlay.value>0||(e?this._triggerEventAudio(Qi):this._fadeEventAudio(Qi))}),F(()=>this._store.home.planetsOverlayFade>.01,e=>{z._viewManager._views[0].instance._composer.passes.final.uniforms.uBlackOverlay.value>0||(e?this._triggerEventAudio(Ji):this._fadeEventAudio(Ji))}),F(()=>this._store.home.interactionController,e=>{e&&(e.on(ct.START_HOLD,()=>{e.quickZoom?He.play(Br):this._triggerEventAudio(eo)}),e.on(ct.CANCEL_HOLD,()=>{this._fadeEventAudio(eo)}),e.on(ct.ENTER_ZOOM,()=>{He.play(kr)}))},{immediate:!0})})):(St.remove(this._update),this._scope.stop())}_getAudio(t){return this._audioList[t]||{sprite:!1,id:null,howl:null,event:!1,volume:1}}_isPlaying(t){const{id:e,howl:i,sprite:o}=this._getAudio(t);return o?!!(i&&e&&i.playing(e)):i&&i.playing()}_play(t,e=!1){const i=He.play(t),o=!("_volume"in i),n=this._audioList[t]?this._getAudio(t).volume:i.volume(),r=o?ji.Howler._counter:void 0;i.volume(n,r),this._audioList[t]={howl:i,id:r,event:e,sprite:o,volume:n}}_fadeEventAudio(t){if(!this._isPlaying(t))return;const{id:e,howl:i}=this._getAudio(t);i.fade(i.volume(e),0,1e3,e)}_triggerEventAudio(t){if(this._isPlaying(t)){const{id:e,howl:i,volume:o}=this._getAudio(t);i.fade(i.volume(e),o,1e3,e);return}this._play(t,!0)}_fadeAllEventAudios({except:t=null}={}){for(const e in this._audioList){const{id:i,howl:o,event:n}=this._audioList[e];e!==t&&this._isPlaying(e)&&n&&o.fade(o.volume(i),0,1e3,i)}}_triggerRollover(){for(let i=0;i<_i.length;i++){const o=_i[i];if(this._isPlaying(o))return}const{name:t,audio:e}=He.playRandomInSprite(_i);this._audioList[t]={howl:e,id:ji.Howler._counter,event:!1,sprite:!0}}_update(t){var n;const e=(n=this._store.home.interactionController)==null?void 0:n.lenis;if(!e)return;Math.abs(e.velocity)/t>Ft(1e3/t,[30,120],[5,8])&&this._triggerRollover()}}const to={type:"change"},xi={type:"start"},io={type:"end"},Ht=new Zn,oo=new Ho,Vr=Math.cos(70*qn.DEG2RAD);class Wr extends Kn{constructor(t,e){super(),this.object=t,this.domElement=e,this.domElement.style.touchAction="none",this.enabled=!0,this.target=new A,this.cursor=new A,this.minDistance=0,this.maxDistance=1/0,this.minZoom=0,this.maxZoom=1/0,this.minTargetRadius=0,this.maxTargetRadius=1/0,this.minPolarAngle=0,this.maxPolarAngle=Math.PI,this.minAzimuthAngle=-1/0,this.maxAzimuthAngle=1/0,this.enableDamping=!1,this.dampingFactor=.05,this.enableZoom=!0,this.zoomSpeed=1,this.enableRotate=!0,this.rotateSpeed=1,this.enablePan=!0,this.panSpeed=1,this.screenSpacePanning=!0,this.keyPanSpeed=7,this.zoomToCursor=!1,this.autoRotate=!1,this.autoRotateSpeed=2,this.keys={LEFT:"ArrowLeft",UP:"ArrowUp",RIGHT:"ArrowRight",BOTTOM:"ArrowDown"},this.mouseButtons={LEFT:gt.ROTATE,MIDDLE:gt.DOLLY,RIGHT:gt.PAN},this.touches={ONE:pt.ROTATE,TWO:pt.DOLLY_PAN},this.target0=this.target.clone(),this.position0=this.object.position.clone(),this.zoom0=this.object.zoom,this._domElementKeyEvents=null,this.getPolarAngle=function(){return s.phi},this.getAzimuthalAngle=function(){return s.theta},this.getDistance=function(){return this.object.position.distanceTo(this.target)},this.listenToKeyEvents=function(u){u.addEventListener("keydown",di),this._domElementKeyEvents=u},this.stopListenToKeyEvents=function(){this._domElementKeyEvents.removeEventListener("keydown",di),this._domElementKeyEvents=null},this.saveState=function(){i.target0.copy(i.target),i.position0.copy(i.object.position),i.zoom0=i.object.zoom},this.reset=function(){i.target.copy(i.target0),i.object.position.copy(i.position0),i.object.zoom=i.zoom0,i.object.updateProjectionMatrix(),i.dispatchEvent(to),i.update(),n=o.NONE},this.update=function(){const u=new A,P=new Zt().setFromUnitVectors(t.up,new A(0,1,0)),j=P.clone().invert(),ue=new A,Ee=new Zt,nt=new A,ze=2*Math.PI;return function(Ln=null){const Vi=i.object.position;u.copy(Vi).sub(i.target),u.applyQuaternion(P),s.setFromVector3(u),i.autoRotate&&n===o.NONE&&L(ce(Ln)),i.enableDamping?(s.theta+=c.theta*i.dampingFactor,s.phi+=c.phi*i.dampingFactor):(s.theta+=c.theta,s.phi+=c.phi);let Ze=i.minAzimuthAngle,Ke=i.maxAzimuthAngle;isFinite(Ze)&&isFinite(Ke)&&(Ze<-Math.PI?Ze+=ze:Ze>Math.PI&&(Ze-=ze),Ke<-Math.PI?Ke+=ze:Ke>Math.PI&&(Ke-=ze),Ze<=Ke?s.theta=Math.max(Ze,Math.min(Ke,s.theta)):s.theta=s.theta>(Ze+Ke)/2?Math.max(Ze,s.theta):Math.min(Ke,s.theta)),s.phi=Math.max(i.minPolarAngle,Math.min(i.maxPolarAngle,s.phi)),s.makeSafe(),i.enableDamping===!0?i.target.addScaledVector(f,i.dampingFactor):i.target.add(f),i.target.sub(i.cursor),i.target.clampLength(i.minTargetRadius,i.maxTargetRadius),i.target.add(i.cursor);let Tt=!1;if(i.zoomToCursor&&R||i.object.isOrthographicCamera)s.radius=O(s.radius);else{const qe=s.radius;s.radius=O(s.radius*m),Tt=qe!=s.radius}if(u.setFromSpherical(s),u.applyQuaternion(j),Vi.copy(i.target).add(u),i.object.lookAt(i.target),i.enableDamping===!0?(c.theta*=1-i.dampingFactor,c.phi*=1-i.dampingFactor,f.multiplyScalar(1-i.dampingFactor)):(c.set(0,0,0),f.set(0,0,0)),i.zoomToCursor&&R){let qe=null;if(i.object.isPerspectiveCamera){const wt=u.length();qe=O(wt*m);const Bt=wt-qe;i.object.position.addScaledVector(D,Bt),i.object.updateMatrixWorld(),Tt=!!Bt}else if(i.object.isOrthographicCamera){const wt=new A(E.x,E.y,0);wt.unproject(i.object);const Bt=i.object.zoom;i.object.zoom=Math.max(i.minZoom,Math.min(i.maxZoom,i.object.zoom/m)),i.object.updateProjectionMatrix(),Tt=Bt!==i.object.zoom;const Wi=new A(E.x,E.y,0);Wi.unproject(i.object),i.object.position.sub(Wi).add(wt),i.object.updateMatrixWorld(),qe=u.length()}else console.warn("WARNING: OrbitControls.js encountered an unknown camera type - zoom to cursor disabled."),i.zoomToCursor=!1;qe!==null&&(this.screenSpacePanning?i.target.set(0,0,-1).transformDirection(i.object.matrix).multiplyScalar(qe).add(i.object.position):(Ht.origin.copy(i.object.position),Ht.direction.set(0,0,-1).transformDirection(i.object.matrix),Math.abs(i.object.up.dot(Ht.direction))<Vr?t.lookAt(i.target):(oo.setFromNormalAndCoplanarPoint(i.object.up,i.target),Ht.intersectPlane(oo,i.target))))}else if(i.object.isOrthographicCamera){const qe=i.object.zoom;i.object.zoom=Math.max(i.minZoom,Math.min(i.maxZoom,i.object.zoom/m)),qe!==i.object.zoom&&(i.object.updateProjectionMatrix(),Tt=!0)}return m=1,R=!1,Tt||ue.distanceToSquared(i.object.position)>r||8*(1-Ee.dot(i.object.quaternion))>r||nt.distanceToSquared(i.target)>r?(i.dispatchEvent(to),ue.copy(i.object.position),Ee.copy(i.object.quaternion),nt.copy(i.target),!0):!1}}(),this.dispose=function(){i.domElement.removeEventListener("contextmenu",ki),i.domElement.removeEventListener("pointerdown",Ai),i.domElement.removeEventListener("pointercancel",Ct),i.domElement.removeEventListener("wheel",Ui),i.domElement.removeEventListener("pointermove",mi),i.domElement.removeEventListener("pointerup",Ct),i.domElement.getRootNode().removeEventListener("keydown",zi,{capture:!0}),i._domElementKeyEvents!==null&&(i._domElementKeyEvents.removeEventListener("keydown",di),i._domElementKeyEvents=null)};const i=this,o={NONE:-1,ROTATE:0,DOLLY:1,PAN:2,TOUCH_ROTATE:3,TOUCH_PAN:4,TOUCH_DOLLY_PAN:5,TOUCH_DOLLY_ROTATE:6};let n=o.NONE;const r=1e-6,s=new $i,c=new $i;let m=1;const f=new A,v=new I,h=new I,g=new I,b=new I,x=new I,p=new I,y=new I,_=new I,S=new I,D=new A,E=new I;let R=!1;const d=[],N={};let K=!1;function ce(u){return u!==null?2*Math.PI/60*i.autoRotateSpeed*u:2*Math.PI/60/60*i.autoRotateSpeed}function q(u){const P=Math.abs(u*.01);return Math.pow(.95,i.zoomSpeed*P)}function L(u){c.theta-=u}function H(u){c.phi-=u}const U=function(){const u=new A;return function(j,ue){u.setFromMatrixColumn(ue,0),u.multiplyScalar(-j),f.add(u)}}(),G=function(){const u=new A;return function(j,ue){i.screenSpacePanning===!0?u.setFromMatrixColumn(ue,1):(u.setFromMatrixColumn(ue,0),u.crossVectors(i.object.up,u)),u.multiplyScalar(j),f.add(u)}}(),k=function(){const u=new A;return function(j,ue){const Ee=i.domElement;if(i.object.isPerspectiveCamera){const nt=i.object.position;u.copy(nt).sub(i.target);let ze=u.length();ze*=Math.tan(i.object.fov/2*Math.PI/180),U(2*j*ze/Ee.clientHeight,i.object.matrix),G(2*ue*ze/Ee.clientHeight,i.object.matrix)}else i.object.isOrthographicCamera?(U(j*(i.object.right-i.object.left)/i.object.zoom/Ee.clientWidth,i.object.matrix),G(ue*(i.object.top-i.object.bottom)/i.object.zoom/Ee.clientHeight,i.object.matrix)):(console.warn("WARNING: OrbitControls.js encountered an unknown camera type - pan disabled."),i.enablePan=!1)}}();function X(u){i.object.isPerspectiveCamera||i.object.isOrthographicCamera?m/=u:(console.warn("WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled."),i.enableZoom=!1)}function fe(u){i.object.isPerspectiveCamera||i.object.isOrthographicCamera?m*=u:(console.warn("WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled."),i.enableZoom=!1)}function me(u,P){if(!i.zoomToCursor)return;R=!0;const j=i.domElement.getBoundingClientRect(),ue=u-j.left,Ee=P-j.top,nt=j.width,ze=j.height;E.x=ue/nt*2-1,E.y=-(Ee/ze)*2+1,D.set(E.x,E.y,1).unproject(i.object).sub(i.object.position).normalize()}function O(u){return Math.max(i.minDistance,Math.min(i.maxDistance,u))}function J(u){v.set(u.clientX,u.clientY)}function re(u){me(u.clientX,u.clientX),y.set(u.clientX,u.clientY)}function we(u){b.set(u.clientX,u.clientY)}function Re(u){h.set(u.clientX,u.clientY),g.subVectors(h,v).multiplyScalar(i.rotateSpeed);const P=i.domElement;L(2*Math.PI*g.x/P.clientHeight),H(2*Math.PI*g.y/P.clientHeight),v.copy(h),i.update()}function Ae(u){_.set(u.clientX,u.clientY),S.subVectors(_,y),S.y>0?X(q(S.y)):S.y<0&&fe(q(S.y)),y.copy(_),i.update()}function ot(u){x.set(u.clientX,u.clientY),p.subVectors(x,b).multiplyScalar(i.panSpeed),k(p.x,p.y),b.copy(x),i.update()}function je(u){me(u.clientX,u.clientY),u.deltaY<0?fe(q(u.deltaY)):u.deltaY>0&&X(q(u.deltaY)),i.update()}function Ue(u){let P=!1;switch(u.code){case i.keys.UP:u.ctrlKey||u.metaKey||u.shiftKey?H(2*Math.PI*i.rotateSpeed/i.domElement.clientHeight):k(0,i.keyPanSpeed),P=!0;break;case i.keys.BOTTOM:u.ctrlKey||u.metaKey||u.shiftKey?H(-2*Math.PI*i.rotateSpeed/i.domElement.clientHeight):k(0,-i.keyPanSpeed),P=!0;break;case i.keys.LEFT:u.ctrlKey||u.metaKey||u.shiftKey?L(2*Math.PI*i.rotateSpeed/i.domElement.clientHeight):k(i.keyPanSpeed,0),P=!0;break;case i.keys.RIGHT:u.ctrlKey||u.metaKey||u.shiftKey?L(-2*Math.PI*i.rotateSpeed/i.domElement.clientHeight):k(-i.keyPanSpeed,0),P=!0;break}P&&(u.preventDefault(),i.update())}function Q(u){if(d.length===1)v.set(u.pageX,u.pageY);else{const P=ht(u),j=.5*(u.pageX+P.x),ue=.5*(u.pageY+P.y);v.set(j,ue)}}function Oe(u){if(d.length===1)b.set(u.pageX,u.pageY);else{const P=ht(u),j=.5*(u.pageX+P.x),ue=.5*(u.pageY+P.y);b.set(j,ue)}}function he(u){const P=ht(u),j=u.pageX-P.x,ue=u.pageY-P.y,Ee=Math.sqrt(j*j+ue*ue);y.set(0,Ee)}function Pe(u){i.enableZoom&&he(u),i.enablePan&&Oe(u)}function B(u){i.enableZoom&&he(u),i.enableRotate&&Q(u)}function ge(u){if(d.length==1)h.set(u.pageX,u.pageY);else{const j=ht(u),ue=.5*(u.pageX+j.x),Ee=.5*(u.pageY+j.y);h.set(ue,Ee)}g.subVectors(h,v).multiplyScalar(i.rotateSpeed);const P=i.domElement;L(2*Math.PI*g.x/P.clientHeight),H(2*Math.PI*g.y/P.clientHeight),v.copy(h)}function $e(u){if(d.length===1)x.set(u.pageX,u.pageY);else{const P=ht(u),j=.5*(u.pageX+P.x),ue=.5*(u.pageY+P.y);x.set(j,ue)}p.subVectors(x,b).multiplyScalar(i.panSpeed),k(p.x,p.y),b.copy(x)}function We(u){const P=ht(u),j=u.pageX-P.x,ue=u.pageY-P.y,Ee=Math.sqrt(j*j+ue*ue);_.set(0,Ee),S.set(0,Math.pow(_.y/y.y,i.zoomSpeed)),X(S.y),y.copy(_);const nt=(u.pageX+P.x)*.5,ze=(u.pageY+P.y)*.5;me(nt,ze)}function Ge(u){i.enableZoom&&We(u),i.enablePan&&$e(u)}function ui(u){i.enableZoom&&We(u),i.enableRotate&&ge(u)}function Ai(u){i.enabled!==!1&&(d.length===0&&(i.domElement.setPointerCapture(u.pointerId),i.domElement.addEventListener("pointermove",mi),i.domElement.addEventListener("pointerup",Ct)),!In(u)&&(On(u),u.pointerType==="touch"?Bi(u):Mn(u)))}function mi(u){i.enabled!==!1&&(u.pointerType==="touch"?Rn(u):Nn(u))}function Ct(u){switch(Pn(u),d.length){case 0:i.domElement.releasePointerCapture(u.pointerId),i.domElement.removeEventListener("pointermove",mi),i.domElement.removeEventListener("pointerup",Ct),i.dispatchEvent(io),n=o.NONE;break;case 1:const P=d[0],j=N[P];Bi({pointerId:P,pageX:j.x,pageY:j.y});break}}function Mn(u){let P;switch(u.button){case 0:P=i.mouseButtons.LEFT;break;case 1:P=i.mouseButtons.MIDDLE;break;case 2:P=i.mouseButtons.RIGHT;break;default:P=-1}switch(P){case gt.DOLLY:if(i.enableZoom===!1)return;re(u),n=o.DOLLY;break;case gt.ROTATE:if(u.ctrlKey||u.metaKey||u.shiftKey){if(i.enablePan===!1)return;we(u),n=o.PAN}else{if(i.enableRotate===!1)return;J(u),n=o.ROTATE}break;case gt.PAN:if(u.ctrlKey||u.metaKey||u.shiftKey){if(i.enableRotate===!1)return;J(u),n=o.ROTATE}else{if(i.enablePan===!1)return;we(u),n=o.PAN}break;default:n=o.NONE}n!==o.NONE&&i.dispatchEvent(xi)}function Nn(u){switch(n){case o.ROTATE:if(i.enableRotate===!1)return;Re(u);break;case o.DOLLY:if(i.enableZoom===!1)return;Ae(u);break;case o.PAN:if(i.enablePan===!1)return;ot(u);break}}function Ui(u){i.enabled===!1||i.enableZoom===!1||n!==o.NONE||(u.preventDefault(),i.dispatchEvent(xi),je(Dn(u)),i.dispatchEvent(io))}function Dn(u){const P=u.deltaMode,j={clientX:u.clientX,clientY:u.clientY,deltaY:u.deltaY};switch(P){case 1:j.deltaY*=16;break;case 2:j.deltaY*=100;break}return u.ctrlKey&&!K&&(j.deltaY*=10),j}function zi(u){u.key==="Control"&&(K=!0,i.domElement.getRootNode().addEventListener("keyup",Gi,{passive:!0,capture:!0}))}function Gi(u){u.key==="Control"&&(K=!1,i.domElement.getRootNode().removeEventListener("keyup",Gi,{passive:!0,capture:!0}))}function di(u){i.enabled===!1||i.enablePan===!1||Ue(u)}function Bi(u){switch(Hi(u),d.length){case 1:switch(i.touches.ONE){case pt.ROTATE:if(i.enableRotate===!1)return;Q(u),n=o.TOUCH_ROTATE;break;case pt.PAN:if(i.enablePan===!1)return;Oe(u),n=o.TOUCH_PAN;break;default:n=o.NONE}break;case 2:switch(i.touches.TWO){case pt.DOLLY_PAN:if(i.enableZoom===!1&&i.enablePan===!1)return;Pe(u),n=o.TOUCH_DOLLY_PAN;break;case pt.DOLLY_ROTATE:if(i.enableZoom===!1&&i.enableRotate===!1)return;B(u),n=o.TOUCH_DOLLY_ROTATE;break;default:n=o.NONE}break;default:n=o.NONE}n!==o.NONE&&i.dispatchEvent(xi)}function Rn(u){switch(Hi(u),n){case o.TOUCH_ROTATE:if(i.enableRotate===!1)return;ge(u),i.update();break;case o.TOUCH_PAN:if(i.enablePan===!1)return;$e(u),i.update();break;case o.TOUCH_DOLLY_PAN:if(i.enableZoom===!1&&i.enablePan===!1)return;Ge(u),i.update();break;case o.TOUCH_DOLLY_ROTATE:if(i.enableZoom===!1&&i.enableRotate===!1)return;ui(u),i.update();break;default:n=o.NONE}}function ki(u){i.enabled!==!1&&u.preventDefault()}function On(u){d.push(u.pointerId)}function Pn(u){delete N[u.pointerId];for(let P=0;P<d.length;P++)if(d[P]==u.pointerId){d.splice(P,1);return}}function In(u){for(let P=0;P<d.length;P++)if(d[P]==u.pointerId)return!0;return!1}function Hi(u){let P=N[u.pointerId];P===void 0&&(P=new I,N[u.pointerId]=P),P.set(u.pageX,u.pageY)}function ht(u){const P=u.pointerId===d[0]?d[1]:d[0];return N[P]}i.domElement.addEventListener("contextmenu",ki),i.domElement.addEventListener("pointerdown",Ai),i.domElement.addEventListener("pointercancel",Ct),i.domElement.addEventListener("wheel",Ui,{passive:!1}),i.domElement.getRootNode().addEventListener("keydown",zi,{passive:!0,capture:!0}),this.update()}}const Yr=new A(0,0,-10),jr=new A(0,0,0);class $r{constructor(t){this._debugContainer=t.debugContainer,this._renderer=t.renderer,this._near=t.near||.1,this._far=t.far||8e3,this._fov=t.fov||50,this._defaultPosition=t.defaultPosition||Yr,this._defaultTarget=t.defaultTarget||jr,this._name=null,this._isEnabled=!1,this._instance=this._createInstance(),this._controls=this._createControls()}get name(){return this._name}set name(t){this._name=t}get instance(){return this._instance}enable(){this._isEnabled=!0,this._controls.enabled=!0,this._renderer.domElement.style.zIndex=100}disable(){this._isEnabled=!0,this._controls.enabled=!1,this._renderer.domElement.style.zIndex=null}show(){this._showDebug()}hide(){this._hideDebug()}_createInstance(){const t=new Pi(this._fov,1,this._near,this._far),e=JSON.parse(localStorage.getItem("camera-orbit-position"));return e?(t.position.x=e.x,t.position.y=e.y,t.position.z=e.z):t.position.copy(this._defaultPosition),t}_createControls(t){const e=new Wr(this._instance,this._renderer.domElement);e.screenSpacePanning=!0,e.enabled=!1;const i=JSON.parse(localStorage.getItem("camera-orbit-target"));return i?(e.target.x=i.x,e.target.y=i.y,e.target.z=i.z):e.target.copy(this._defaultTarget),e.update(),e}resize(t,e){this._instance.aspect=t/e,this._instance.updateProjectionMatrix()}_showDebug(){if(!T)return;const t=this;function e(){t._instance.updateProjectionMatrix()}const i={frustum:{min:this._instance.near,max:this._instance.far}};this._debug=T.addFolder({title:"Orbit Camera",parent:this._debugContainer}),this._debug.addInput(i,"frustum",{min:.01,max:5e3,step:1}).on("change",()=>{this._instance.near=i.frustum.min,this._instance.far=i.frustum.max,e()}),this._debug.addInput(this._instance,"fov",{min:1,max:180}).on("change",e),this._debug.addInput(this._instance,"zoom").on("change",e),this._debug.addButton({title:"Save position"}).on("click",()=>{localStorage.setItem("camera-orbit-position",JSON.stringify(this._instance.position)),localStorage.setItem("camera-orbit-target",JSON.stringify(this._controls.target))}),this._debug.addButton({title:"Reset position"}).on("click",()=>{localStorage.removeItem("camera-orbit-position"),localStorage.removeItem("camera-orbit-target"),this._instance.position.copy(this._defaultPosition),this._controls.target.copy(this._defaultTarget),this._controls.update()})}_hideDebug(){var t;(t=this._debug)==null||t.dispose()}}class Zr{constructor(){this.pixel=new I,this.normal=new I(.5,.5),this.normalFlip=new I(-1,-1),this.tilt=new I,this.velocity=new I,this.width=0,this.height=0,this.lastTime=0,this.lastNormalFlip=new I(-1,-1),this.down=this.down.bind(this),this.move=this.move.bind(this),this.up=this.up.bind(this),this.resize=this.resize.bind(this),this.tick=this.tick.bind(this),!(typeof window>"u")&&this.handlers()}handlers(){window.addEventListener("pointerdown",this.down),window.addEventListener("pointermove",this.move),window.addEventListener("touchmove",this.move),window.addEventListener("pointerup",this.up),window.addEventListener("resize",this.resize),window.addEventListener("orientationchange",this.resize),this.resize(),St.add(this.tick,70)}updateMouse(t){t.changedTouches&&t.changedTouches.length&&(t.x=t.changedTouches[0].pageX,t.y=t.changedTouches[0].pageY),t.x===void 0&&(t.x=t.pageX,t.y=t.pageY),this.pixel.set(t.x,t.y),this.normal.x=this.pixel.x/this.width,this.normal.y=this.pixel.y/this.height,this.normalFlip.x=this.normal.x,this.normalFlip.y=1-this.normal.y,this.tilt.x=this.normalFlip.x*2-1,this.tilt.y=this.normalFlip.y*2-1}resize(){this.width=window.innerWidth,this.height=window.innerHeight}down(t){this.updateMouse(t)}move(t){this.updateMouse(t)}up(){}tick(t,e){this.lastNormalFlip.x===-1&&this.lastNormalFlip.copy(this.normalFlip);const i=this.normalFlip.x-this.lastNormalFlip.x,o=this.normalFlip.y-this.lastNormalFlip.y;this.lastNormalFlip.copy(this.normalFlip);const n=Math.min(32,t)/16;this.velocity.x=i*n,this.velocity.y=o*n}}const wi=new Zr;class Kr{constructor({view:t,config:e,debugContainer:i,gltf:o}){W(this);const n=this._uiStore=ve();this.gltf=o,this.view=t,this.activeCamera=t._cameraManager._active._instance,this.activeCamera.position.set(0,0,0),yt.device.mobile?this.activeCamera.zoom=.5:this.activeCamera.zoom=1,this.gltfCamera=o.cameras[0],this.root=new le,this.animNode=new le,this.tilt=new le,this.offset=new le,this.root.add(this.animNode),this.animNode.add(this.tilt),this.tilt.add(this.offset),this.offset.add(this.activeCamera),this.easeMouse=new I,this.anim={fov:0,fovHold:0},this._scrollPctForced=null,F(()=>n.home.fluidStrength,r=>{this.anim.fovHold=r*5}),F(()=>n.home.isZoom,r=>{r?new Te(this.anim,1e3,{fov:5}):new Te(this.anim,1e3,{fov:0})}),F(()=>n.home.isHold,r=>{}),F(()=>n.bg.isHiding,r=>{r&&(this._scrollPctForced=Zi.scrollPct,n.menu.isOpen?new Te(this.offset.position,500,{z:-.5}):new Te(this.offset.position,500,{z:-3.17}))}),F(()=>n.bg.isShowing,r=>{r&&(this._scrollPctForced=null,n.menu.isOpen?(this.offset.position.z=-3.17,new Te(this.offset.position,1e3,{z:-3.2})):(this.offset.position.z=-.5,new Te(this.offset.position,750,{z:0})))}),F(()=>n.mainLoader.progressComplete,r=>{r&&(this.anim.fov=25)},{immediate:!0}),F(()=>n.mainLoader.hidding,r=>{const s=ne.params.skipLoader?0:1;r&&new Te(this.anim,s*3e3,{fov:0,ease:"inOutQuad"})},{immediate:ne.params.skipLoader})}update({delta:t,time:e}){const i=this.view._composer.passes.final.uniforms.uMenu.value,o=this.view._components.planets._linkProgress;if(this.activeCamera.fov=this.gltfCamera.fov+this.anim.fov+this.anim.fovHold,this.activeCamera.near=this.gltfCamera.near,this.activeCamera.far=this.gltfCamera.far,this.activeCamera.updateProjectionMatrix(),this.gltfCamera.getWorldPosition(this.animNode.position),this.gltfCamera.getWorldQuaternion(this.animNode.quaternion),this.easeMouse.lerp(wi.tilt,.02),this.tilt.position.y+=(this.easeMouse.y*.1-this.tilt.position.y)*.02*(1-o),this.tilt.rotation.x+=(this.easeMouse.y*-.03-this.tilt.rotation.x)*.02*(1-o),this.tilt.position.x+=(this.easeMouse.x*.1-this.tilt.position.x)*.02*(1-i),this.tilt.rotation.y+=(this.easeMouse.x*.04-this.tilt.rotation.y)*.02*(1-i),this.offset.position.y=i<.5?0:.13,!this._uiStore.menu.isOpenDelayed&&this._uiStore.isWhitePageDelayed){const n=this._scrollPctForced!=null?this._scrollPctForced:Zi.scrollPct,r=(n-.5)*.3,s=n*.8;this.root.rotation.x=r,this.root.position.z=s}else this.root.rotation.x=0,this.root.position.z=0;this.root.updateMatrixWorld()}}const vn=(a,t)=>({x:(a-window.innerWidth/2)/(window.innerWidth/2),y:-((t-window.innerHeight/2)/(window.innerHeight/2))});function de(a,t=4){const e=un(a,t);return Number.isInteger(e)?`${e}.`:e.toString()}function fn(a,t=4){return`vec3(${de(a.r,t)}, ${de(a.g,t)}, ${de(a.b,t)})`}function qr(a,t){return t.set(parseInt(a.substring(1,3),16)/255,parseInt(a.substring(3,5),16)/255,parseInt(a.substring(5,7),16)/255,parseInt(a.substring(7,9),16)/255)}function Qt(a,t=4){return`vec4(${de(a.x,t)}, ${de(a.y,t)}, ${de(a.z,t)}, ${de(a.w,t)})`}function Xr(a,t=4){return`vec3(${de(a.x,t)}, ${de(a.y,t)}, ${de(a.z,t)})`}function no(a,t=4){return`vec2(${de(a.x,t)}, ${de(a.y,t)})`}function Qr(a,t=4){return`vec3(${de(a.r/255,t)}, ${de(a.g/255,t)}, ${de(a.b/255,t)})`}function Jr(a,t){const e=a.map(o=>hn(o,t));let i="bool";return e[0].startsWith("vec")?i=e[0].substring(0,4):isNaN(parseFloat(e[0]))||(i="float"),`${i}[](${e.join(",")})`}const es=new Kt,ts=new I,is=new V;function hn(a,t){if(Array.isArray(a))return Jr(a,t);if(typeof a=="number")return de(a,t);if(typeof a=="string"&&a.startsWith("#"))return a.length===9?Qt(qr(a,es)):fn(is.set(a));if(typeof a=="string")return a;if(typeof a=="boolean")return a.toString();if("w"in a)return Qt(a);if("z"in a)return Xr(a);if("y"in a)return no(a);if("r"in a)return Qr(a);if("min"in a)return no(ts.set(a.min,a.max))}function os(a,t,e,i=!1){const o=a[t]!==e,n=a[t]==="";return t in a&&o&&(a[t]=e,!n&&i&&console.warn(`Define "${t}" might be updated abusively`)),o}function De(a,t,e){let i=!1;const o="isMaterial"in a?a.defines:a;for(const n in t)if(Object.prototype.hasOwnProperty.call(t,n)){const r=t[n],s=hn(r,(e==null?void 0:e.precision)||4),c=os(o,n,s,e==null?void 0:e.warn);i||(i=c)}if("isMaterial"in a)a.needsUpdate=i;else return i}const ns={TRANSMISSION_THICKNESS:"",TRANSMISSION_IOR:"",TRANSMISSION_BLUR:"",TRANSMISSION_ATTENUATION_COLOR:"",TRANSMISSION_ATTENUATION_DISTANCE:""};function as(a){const t=Math.floor(Math.log2(Math.max(a.image.width,a.image.height)/4)),e=1/a.image.width,i=1/a.image.height;return{CUBEUV_TEXEL_WIDTH:e,CUBEUV_TEXEL_HEIGHT:i,CUBEUV_MAX_MIP:de(t,2)}}function ao(a){const t={...ns};return a&&Object.assign(t,as(a)),t}function ro(a,t){a.uniforms.uTransmissionSamplerSize.value.set(t.image.width,t.image.height),a.uniforms.tTransmissionSamplerMap.value=t}function rs(a,t,e){if("transmission"in t){const i=a.addFolder({title:"Transmission",expanded:!1});C.addInputs(i,t.transmission,e,{thickness:{label:"Thickness",step:.01},ior:{label:"Ior",step:.001},blur:{label:"Blur",step:.1},attenuationColor:{label:"Attenuation Color"},attenuationDistance:{label:"Attenuation Distance",step:.001}},{className:"config"})}if("environment"in t){const i=a.addFolder({title:"Environment",expanded:!1});C.addInputs(i,t.environment,e,{intensity:{label:"Intensity",step:.01},rotation:{label:"Rotation",x:{step:.01,min:-Math.PI/2,max:Math.PI/2},y:{step:.01,min:-Math.PI/2,max:Math.PI/2},z:{step:.01,min:-Math.PI/2,max:Math.PI/2}}},{className:"config"})}}class ss extends le{constructor(e){super();l(this,"_config");l(this,"_globalConfig");l(this,"_materials");l(this,"_mesh");l(this,"_defines");l(this,"_debug");W(this),this._config=e.config,this._globalConfig=e.globalConfig,this._materials=e.materials,this._defines=this._createDefines(),this._mesh=this._createMesh({baseMesh:e.baseMesh}),this._debug=this._createDebug(e.debugContainer,e.id),this._onConfigUpdated()}get mesh(){return this._mesh}destroy(){var e;(e=this._debug)==null||e.dispose()}_createDefines(){return{DEBUG:0,DEBUG_COLOR:!1}}_createMesh({baseMesh:e}){return e.geometry.computeTangents(),e.material=this._materials.material,e.userData.renderBloom=!0,e.userData.bloomMaterial=this._materials.bloomMaterial,e.onBeforeRender=(i,o,n,r,s)=>{this._onBeforeRender(s),s.uniforms.uWorldMatrix.value.copy(e.matrixWorld).invert(),s.uniformsNeedUpdate=!0},e}setTransmission(e){ro(this._materials.material,e),ro(this._materials.bloomMaterial,e)}_onBeforeRender(e){const i=!!e.userData.bloom;e.uniforms.uYRange.value.set(this._mesh.geometry.boundingBox.min.y,this._mesh.geometry.boundingBox.max.y),e.uniforms.uRoughness.value=this._config.roughness,e.uniforms.uSpecular.value=this._config.specular,e.uniforms.uDiffuseColor.value.set(this._config.diffuseColor),e.uniforms.uRoomSize.value=this._config.interior.size,e.uniforms.uRoomBlur.value=this._config.interior.blur,e.uniforms.uAoIntensity.value=this._config.ambientOcclusion.intensity,e.uniforms.uAoSize.value=this._config.ambientOcclusion.size,e.uniforms.uGradientRange.value.set(this._config.gradient.range.min,this._config.gradient.range.max),e.uniforms.uGradientColor.value.set(this._config.gradient.color),e.uniforms.uGradientOpacity.value=this._config.gradient.opacity,e.uniforms.uTransmissionThickness.value=this._config.transmission.thickness,e.uniforms.uTransmissionIor.value=this._config.transmission.ior,e.uniforms.uTransmissionBlur.value=this._config.transmission.blur,e.uniforms.uTransmissionAttenuationColor.value.set(this._config.transmission.attenuationColor),e.uniforms.uTransmissionAttenuationDistance.value=this._config.transmission.attenuationDistance,e.uniforms.uRoomTransform.value.set(this._config.interior.repeat.x,this._config.interior.repeat.y,this._config.interior.offset.x,this._config.interior.offset.y);const o=new At(this._config.environment.rotation.x,this._config.environment.rotation.y,this._config.environment.rotation.z),n=new st().makeRotationFromEuler(o);e.uniforms.uEnvMapRotation.value.setFromMatrix4(n),e.uniforms.uEnvMapIntensity.value=this._config.environment.intensity,i?(e.uniforms.uGlobalBloomIntensity.value=this._globalConfig.globalBuilding.bloomIntensity,e.uniforms.uBloomDiffuseIntensity.value=this._config.bloom.diffuse,e.uniforms.uBloomGradientIntensity.value=this._config.bloom.gradient,e.uniforms.uBloomTransmissionLumaClamping.value.set(this._config.bloom.transmission.lumaClamping.min,this._config.bloom.transmission.lumaClamping.max),e.uniforms.uBloomTransmissionIntensity.value=this._config.bloom.transmission.intensity,e.uniforms.uBloomEnvLumaClamping.value.set(this._config.bloom.env.lumaClamping.min,this._config.bloom.env.lumaClamping.max),e.uniforms.uBloomEnvIntensity.value=this._config.bloom.env.intensity):e.uniforms.uGlobalIntensity.value=this._globalConfig.globalBuilding.intensity,e.defines.DEBUG!==this._defines.DEBUG&&(e.defines.DEBUG=this._defines.DEBUG,e.needsUpdate=!0),e.defines.DEBUG_COLOR!==this._defines.DEBUG_COLOR&&(e.defines.DEBUG_COLOR=this._defines.DEBUG_COLOR,e.needsUpdate=!0)}_onConfigUpdated(){}_createDebug(e,i){if(!T)return;const o=T.addFolder({title:"Building "+i,parent:e}),n=new V().setHSL(Math.random(),1,.5),r=()=>{o.expanded&&(this._defines.DEBUG_COLOR=fn(n),setTimeout(()=>{this._defines.DEBUG_COLOR=!1},1e3))};o.on("fold",r),o.addButton({title:"Spot Mesh"}).on("click",r),o.addButton({title:"Copy Config"}).on("click",()=>{navigator.clipboard.writeText(JSON.stringify(this._config))}),o.addButton({title:"Paste Config"}).on("click",()=>{navigator.clipboard.readText().then(g=>{Vo(this._config,JSON.parse(g)),this._onConfigUpdated()})}),o.addInput(this._defines,"DEBUG",{options:{NONE:0,ROOM_UV:1,NORMAL:2,BASE_NORMAL:3,CUBEMAP:4,ENV:5,AO:6,TRANSMISSION:7,MASK:8,TANGENT:9,UV:10,UV_ERROR:11,GRADIENT:12},label:"Debug"}).on("change",()=>{}),C.addInputs(o,this._config,this._onConfigUpdated,{roughness:{label:"Roughness",step:.01},specular:{label:"Specular",step:.01},diffuseColor:{label:"Diffuse Color"},environment:!1,interior:!1,transmission:!1,ambientOcclusion:!1,gradient:!1,bloom:!1},{className:"config"});const s=o.addFolder({title:"Ambient Occlusion",expanded:!1});C.addInputs(s,this._config.ambientOcclusion,this._onConfigUpdated,{intensity:{label:"Intensity",step:.001,min:0,max:1},size:{label:"Size",step:.01,min:0,max:1}},{className:"config"});const c=o.addFolder({title:"Gradient",expanded:!1});C.addInputs(c,this._config.gradient,this._onConfigUpdated,{color:{label:"Color"},range:{label:"Range",min:-.5,max:1.5},opacity:{label:"Opacity",min:0,max:1}},{className:"config"});const m=o.addFolder({title:"Interior",expanded:!1});C.addInputs(m,this._config.interior,this._onConfigUpdated,{objectSpace:{options:{"Object space":!0,"Tangent space":!1},label:"Mapping"},size:{label:"Size",step:.01,max:1,min:0},repeat:{label:"Repeat",x:{step:.01},y:{step:.01}},offset:{label:"Offset",x:{step:.01},y:{step:.01}},blur:{label:"Blur",min:0,max:1,step:.01}},{className:"config"}),rs(o,this._config,this._onConfigUpdated);const f=o.addFolder({title:"Bloom",expanded:!1});C.addInputs(f,this._config.bloom,this._onConfigUpdated,{diffuse:{label:"Diffuse",step:.01},gradient:{label:"Gradient",step:.01},env:!1,transmission:!1},{className:"config"});const v=f.addFolder({title:"Environment",expanded:!1});C.addInputs(v,this._config.bloom.env,this._onConfigUpdated,{intensity:{label:"Intensity",step:.01},lumaClamping:{label:"Luma Clamping",min:0,max:1,step:.01}},{className:"config"});const h=f.addFolder({title:"Transmission",expanded:!1});return C.addInputs(h,this._config.bloom.transmission,this._onConfigUpdated,{intensity:{label:"Intensity",step:.01},lumaClamping:{label:"Luma Clamping",min:0,max:1,step:.01}},{className:"config"}),o}}const ls=`#define GLSLIFY 1
uniform sampler2D tAlpha;uniform sampler2D tNoise;uniform float uTime;varying vec3 vColor;varying vec2 vUv;varying vec3 vOffset;float textureNoise3D(sampler2D noiseTexture,vec2 uv,float time){vec2 uvNoise=uv+time*0.007;vec2 uvNoise2=uv-time*0.007;vec3 noise=texture2D(noiseTexture,uvNoise).rgb;vec3 noise2=texture2D(noiseTexture,uvNoise2).rgb;vec3 colorDot=vec3(sin(vec3(time,time+1.047,time+2.094)));float colorAvg=(abs(colorDot.r)+abs(colorDot.g)+abs(colorDot.b))/3.;colorDot/=colorAvg;noise=(noise+noise2)/2.;return dot(normalize(noise-0.5),colorDot);}float cremap(float value,float start1,float stop1,float start2,float stop2){float r=start2+(stop2-start2)*((value-start1)/(stop1-start1));return clamp(r,min(start2,stop2),max(start2,stop2));}void main(){vec2 uv=vUv;vec4 texel=texture2D(tAlpha,uv);vec3 color=vColor*INTENSITY*texel.r;float noise=textureNoise3D(tNoise,uv*0.5+vOffset.xy+vec2(0.,-uTime*mix(0.02,0.04,vOffset.x)),uTime*0.6+vOffset.z);float alpha=smoothstep(0.1,1.,texel.r)*OPACITY;noise=cremap(noise,-2.,2.,0.,1.);alpha=noise*alpha;gl_FragColor=vec4(color,alpha);if(gl_FragColor.a<0.01)discard;}`,cs=w(ls,"fragmentShader"),us=`#define GLSLIFY 1
attribute vec3 color;attribute vec3 offset;varying vec3 vOffset;varying vec3 vColor;varying vec2 vUv;mat4 billboardMatrix(mat4 inMat4){mat4 outMat4=inMat4;outMat4[0][0]=1.0;outMat4[0][1]=0.0;outMat4[0][2]=0.0;outMat4[1][0]=0.0;outMat4[1][1]=1.0;outMat4[1][2]=0.0;outMat4[2][0]=0.0;outMat4[2][1]=0.0;outMat4[2][2]=1.0;return outMat4;}void main(){vUv=uv;vColor=color;vOffset=offset;vec4 mvPosition=billboardMatrix(modelViewMatrix*instanceMatrix)*vec4(position*SIZE*10.,1.);gl_Position=projectionMatrix*mvPosition;}`,ms=w(us,"vertexShader");class ds extends le{constructor(e){super();l(this,"_config");l(this,"_mesh");l(this,"_debug");W(this),this._config=e.config,this._mesh=this._createMesh(e.lights),this._debug=this._createDebug(e.debugContainer),this._onConfigUpdated()}destroy(){var e;(e=this._debug)==null||e.dispose(),this._mesh.material.dispose(),this._mesh.geometry.dispose()}setVisibility(e){this._mesh.userData.renderTransmission=e}_createMesh(e){const i=new Float32Array(e.length*3),o=new Float32Array(e.length*3);for(let h=0;h<e.length;h++){const g=e[h];i[h*3+0]=g.color.r,i[h*3+1]=g.color.g,i[h*3+2]=g.color.b,o[h*3+0]=(Math.random()-1)*2,o[h*3+1]=(Math.random()-1)*2,o[h*3+2]=(Math.random()-1)*10}const n=new Xn;n.instanceCount=e.length;const r=new Ii;n.setAttribute("position",r.attributes.position),n.setAttribute("uv",r.attributes.uv),n.index=r.index,n.setAttribute("color",new Ki(i,3)),n.setAttribute("offset",new Ki(o,3));const s=M.get("noise");s.wrapS=s.wrapT=Z;const c=M.get("glow-sprite"),m=new Y({uniforms:{tNoise:{value:s},tAlpha:{value:c},uTime:{value:0}},defines:{SIZE:"",OPACITY:"",INTENSITY:""},transparent:!0,depthWrite:!1});cs.use(m),ms.use(m);const f=new Li(n,m,e.length),v=new A(0,0,0);for(let h=0;h<e.length;h++){const g=e[h];g.lookAt(v),g.updateMatrix(),f.setMatrixAt(h,g.matrix)}return f.visible=!1,f.userData.renderTransmission=!0,this.add(f),f}update({time:e,delta:i}){this._mesh.material.uniforms.uTime.value=e}_onConfigUpdated(){De(this._mesh.material,{SIZE:this._config.size,OPACITY:this._config.opacity,INTENSITY:this._config.intensity},{precision:3,warn:ne.isProduction})}_createDebug(e){if(!T)return;const i=T.addFolder({title:"Lights",index:0,parent:e});return C.addInputs(i,this._config,this._onConfigUpdated,{intensity:{label:"Intensity",step:.01,min:0},opacity:{label:"Opacity",step:.01,min:0,max:1},size:{label:"Size",step:.1}},{className:"config"}),i}}const vs=`#define GLSLIFY 1
#ifdef ROOM_OBJECTSPACE
varying vec3 vUvw;
#else
varying vec2 vUv;varying vec3 vTangent;varying vec3 vBitangent;
#endif
varying vec3 vViewDirection;varying vec3 vNormal;varying float vRoom;uniform vec4 uRoomTransform;uniform float uSpecular;uniform float uRoughness;uniform vec3 uDiffuseColor;uniform float uRoomSize;uniform float uRoomBlur;uniform float uAoIntensity;uniform float uAoSize;uniform vec2 uGradientRange;uniform vec3 uGradientColor;uniform float uGradientOpacity;uniform vec2 uYRange;uniform float uTransmissionThickness;uniform float uTransmissionIor;uniform float uTransmissionBlur;uniform vec3 uTransmissionAttenuationColor;uniform float uTransmissionAttenuationDistance;uniform float uGlobalIntensity;uniform float uGlobalBloomIntensity;uniform float uBloomDiffuseIntensity;uniform float uBloomGradientIntensity;uniform vec2 uBloomTransmissionLumaClamping;uniform float uBloomTransmissionIntensity;uniform vec2 uBloomEnvLumaClamping;uniform float uBloomEnvIntensity;vec2 hash22(vec2 p){vec3 p3=fract(vec3(p.xyx)*vec3(0.1031,0.1030,0.0973));p3+=dot(p3,p3.yzx+33.33);return fract((p3.xx+p3.yz)*p3.zy);}float cremap(float value,float start1,float stop1,float start2,float stop2){float r=start2+(stop2-start2)*((value-start1)/(stop1-start1));return clamp(r,min(start2,stop2),max(start2,stop2));}float remap(float value,float start1,float stop1,float start2,float stop2){return start2+(stop2-start2)*((value-start1)/(stop1-start1));}vec3 packNormalToRGB(const in vec3 normal){return normalize(normal)*0.5+0.5;}float isNorm(vec2 _st){if(_st.x>1.||_st.y>1.||_st.x<0.||_st.y<0.)return 0.;return 1.;}varying vec3 vPosition;varying vec3 vWorldPosition;varying vec3 vViewPosition;uniform mat3 normalMatrix;uniform mat4 modelMatrix;uniform mat4 projectionMatrix;uniform float uEnvMapIntensity;uniform mat3 uEnvMapRotation;uniform sampler2D tEnvMap;uniform vec2 uTransmissionSamplerSize;uniform sampler2D tTransmissionSamplerMap;vec3 getVolumeTransmissionRay(vec3 n,vec3 v,float thickness,float ior,mat4 modelMatrix){vec3 refractionVector=refract(-v,normalize(n),1.0/ior);vec3 modelScale;modelScale.x=length(vec3(modelMatrix[0].xyz));modelScale.y=length(vec3(modelMatrix[1].xyz));modelScale.z=length(vec3(modelMatrix[2].xyz));return normalize(refractionVector)*thickness*modelScale;}float applyIorToRoughness(float roughness,float ior){return roughness*clamp(ior*2.0-2.0,0.0,1.0);}vec4 getTransmissionSample(vec2 fragCoord,float roughness,float ior,float blur){float framebufferLod=log2(uTransmissionSamplerSize.x)*applyIorToRoughness(roughness,ior)*blur;
#ifdef TEXTURE_LOD_EXT
return texture2DLodEXT(tTransmissionSamplerMap,fragCoord.xy,framebufferLod);
#else
return texture2D(tTransmissionSamplerMap,fragCoord.xy,framebufferLod);
#endif
}vec3 applyVolumeAttenuation(vec3 radiance,float transmissionDistance,vec3 attenuationColor,float attenuationDistance){if(attenuationDistance==0.0){return radiance;}else{vec3 attenuationCoefficient=-log(attenuationColor)/attenuationDistance;vec3 transmittance=exp(-attenuationCoefficient*transmissionDistance);return transmittance*radiance;}}vec4 getTransmission(const in vec3 n,const in vec3 v,const in float roughness,const in vec3 diffuseColor,const in vec3 position,const in mat4 modelMatrix,const in mat4 viewMatrix,const in mat4 projMatrix,const in float ior,const in float blur,const in float thickness,const in vec3 attenuationColor,const in float attenuationDistance){vec3 transmissionRay=getVolumeTransmissionRay(n,v,thickness,ior,modelMatrix);vec3 refractedRayExit=position+transmissionRay;vec4 ndcPos=projMatrix*viewMatrix*vec4(refractedRayExit,1.0);vec2 refractionCoords=ndcPos.xy/ndcPos.w;refractionCoords+=1.0;refractionCoords/=2.0;vec4 transmittedLight=getTransmissionSample(refractionCoords,roughness,ior,blur);vec3 attenuatedColor=applyVolumeAttenuation(transmittedLight.rgb,length(transmissionRay),attenuationColor,attenuationDistance);return vec4(attenuatedColor*diffuseColor,transmittedLight.a);}vec3 inverseTransformDirection(in vec3 dir,in mat4 matrix){return normalize((vec4(dir,0.0)*matrix).xyz);}
#ifndef saturate
#define saturate( a ) clamp( a, 0.0, 1.0 )
#endif
#include <cube_uv_reflection_fragment>
#define USE_ENVMAP
#define ENVMAP_TYPE_CUBE_UV
#include <cube_uv_reflection_fragment>
vec3 getEnvColor(const in vec3 viewDir,const in vec3 normal,const in float roughness){
#ifdef ENVMAP_TYPE_CUBE_UV
vec3 reflectVec=reflect(-viewDir,normal);reflectVec=normalize(mix(reflectVec,normal,roughness*roughness));reflectVec=inverseTransformDirection(reflectVec,viewMatrix);vec4 envMapColor=textureCubeUV(tEnvMap,uEnvMapRotation*reflectVec,roughness);return envMapColor.rgb*uEnvMapIntensity;
#else
return vec3(0.0);
#endif
}vec2 DFGApprox(const in vec3 normal,const in vec3 viewDir,const in float roughness){float dotNV=saturate(dot(normal,viewDir));const vec4 c0=vec4(-1,-0.0275,-0.572,0.022);const vec4 c1=vec4(1,0.0425,1.04,-0.04);vec4 r=roughness*c0+c1;float a004=min(r.x*r.x,exp2(-9.28*dotNV))*r.x+r.y;vec2 fab=vec2(-1.04,1.04)*a004+r.zw;return fab;}vec3 EnvironmentBRDF(const in vec3 normal,const in vec3 viewDir,const in vec3 specularColor,const in float specularF90,const in float roughness){vec2 fab=DFGApprox(normal,viewDir,roughness);return specularColor*fab.x+specularF90*fab.y;}vec4 blendTransmissionAndSpecular(const in vec3 normal,const in vec3 viewDir,const in vec3 specularColor,const in vec4 transmissionColor,const in float specularF90,const in float roughness){vec3 F=EnvironmentBRDF(normal,viewDir,specularColor,specularF90,roughness);return vec4(mix(transmissionColor.rgb,specularColor,saturate(length(F)/1.4)),transmissionColor.a);}const vec3 luma=vec3(0.299,0.587,0.114);float lumaClampAndDim(vec3 color,vec2 range,float dim){float v=dot(color.xyz,luma);float lumaMask=smoothstep(range.x,range.y,v);return lumaMask*dim;}void main(){vec3 modelNormal=vNormal;vec2 roomUV=fract(vUv);vec2 roomScale=1./vec2(uRoomSize);roomUV=((roomUV-0.5)*roomScale)+0.5;float sigDist=max(abs(roomUV.x-0.5),abs(roomUV.y-0.5))-0.5;float a=1.-clamp(sigDist/fwidth(sigDist)+0.5,0.0,1.0);float roomMix=a*vRoom;vec3 pos=vec3(roomUV*2.0-1.0,1.0);vec3 id=1.0/vViewDirection;vec3 k=abs(id)-pos*id;float kMin=min(min(k.x,k.y),k.z);pos+=kMin*vViewDirection;vec3 rawRoomNormal=-sign(pos.yxz)*step(0.9999,abs(pos.yxz));mat3 TBN=mat3(normalize(vTangent),normalize(vBitangent),normalize(vNormal));vec3 roomNormal=TBN*normalize(rawRoomNormal);vec3 normal=modelNormal;mat3 modelMatrixRotation=mat3(modelMatrix);vec3 roomOffset=(((TBN*pos)-modelNormal)/2.)*roomMix/uRoomTransform.xxx;vec3 position=vPosition+roomOffset;vec3 worldPosition=(modelMatrix*vec4(position,1.)).xyz;vec3 worldCameraDirection=normalize(vec3(cameraPosition-worldPosition));vec3 viewCameraDirection=normalize(vViewPosition);vec4 transmission=getTransmission(modelMatrixRotation*normal,worldCameraDirection,uRoughness,mix(vec3(0.5),uDiffuseColor,uBloomDiffuseIntensity),worldPosition,modelMatrix,viewMatrix,projectionMatrix,uTransmissionIor,uTransmissionBlur,uTransmissionThickness,uTransmissionAttenuationColor,uTransmissionAttenuationDistance);transmission.rgb*=lumaClampAndDim(transmission.rgb,uBloomTransmissionLumaClamping,uBloomTransmissionIntensity);float yRamp=remap(position.y,uYRange.x,uYRange.y,1.,0.);transmission.rgb=mix(transmission.rgb,uGradientColor,smoothstep(uGradientRange.x,uGradientRange.y,yRamp)*uGradientOpacity*uBloomGradientIntensity);vec3 aoGradient=smoothstep(1.-uAoSize,1.,abs(pos))-abs(rawRoomNormal.yxz);float ao=(aoGradient.x+aoGradient.y+aoGradient.z)*roomMix*smoothstep(1.,0.,pos.z);ao*=uAoIntensity*smoothstep(1.,6.,vWorldPosition.y);vec3 envColor=getEnvColor(viewCameraDirection,normalMatrix*modelNormal,uRoughness);envColor*=lumaClampAndDim(envColor,uBloomEnvLumaClamping,uBloomEnvIntensity);vec4 color=blendTransmissionAndSpecular(modelMatrixRotation*modelNormal,worldCameraDirection,envColor,transmission,uSpecular,uRoughness);color.rgb=mix(vec3(0.005,0.0,0.03),color.rgb,smoothstep(1.,6.,vWorldPosition.y));gl_FragColor=vec4(color.rgb-ao,1.);gl_FragColor.rgb*=uGlobalBloomIntensity;
#ifdef DEBUG
#if DEBUG == 1
gl_FragColor=vec4(pos.xyz*roomMix,1.);
#elif DEBUG == 2
gl_FragColor=vec4(packNormalToRGB(normal),1.);
#elif DEBUG == 3
gl_FragColor=vec4(packNormalToRGB(modelNormal),1.);
#elif DEBUG == 4
gl_FragColor=vec4(0.);
#elif DEBUG == 5
gl_FragColor=vec4(envColor,1.);
#elif DEBUG == 6
gl_FragColor=vec4(vec3(1.-ao),1.);
#elif DEBUG == 7
gl_FragColor=vec4(transmission.rgb,1.);
#elif DEBUG == 8
gl_FragColor=vec4(vec3(vRoom),1.);
#elif DEBUG == 9
gl_FragColor=vec4(vec3(packNormalToRGB(vTangent)),1.);
#elif DEBUG == 10
gl_FragColor=vec4(vec3(fract(vUv)*vRoom,1.),1.);
#elif DEBUG == 11
gl_FragColor=vec4(mix(vec3(0.8,0.1,0.1),vec3(0.1,0.8,0.1),length(vTangent))*vRoom,1.);
#elif DEBUG == 12
gl_FragColor=vec4(mix(vec3(1.),uGradientColor,smoothstep(uGradientRange.x,uGradientRange.y,yRamp)*uGradientOpacity),1.);
#endif
#endif
#ifdef DEBUG_COLOR
gl_FragColor=vec4(mix(gl_FragColor.rgb,DEBUG_COLOR,pow(1.-dot(viewCameraDirection,normalMatrix*modelNormal),0.4)*1.),1.);
#endif
}`,fs=w(vs,"fragmentShader"),hs=`#define GLSLIFY 1
attribute vec4 tangent;attribute float _room;
#ifdef ROOM_OBJECTSPACE
varying vec3 vUvw;
#else
varying vec2 vUv;varying vec3 vTangent;varying vec3 vBitangent;
#endif
varying vec3 vWorldPosition;varying vec3 vPosition;varying vec3 vViewPosition;varying vec3 vViewDirection;varying vec3 vNormal;varying float vRoom;uniform vec4 uRoomTransform;uniform mat4 uWorldMatrix;void main(){
#ifdef ROOM_OBJECTSPACE
vUvw=position*uRoomTransform.xyx*0.999+uRoomTransform.zwz;vec4 objCam=uWorldMatrix*vec4(cameraPosition,1.0);vViewDirection=position.xyz-objCam.xyz;vViewDirection*=uRoomTransform.xyx;
#else
vUv=uv*uRoomTransform.xy*0.999+uRoomTransform.zw;vec4 objCam=uWorldMatrix*vec4(cameraPosition,1.0);vec3 viewDirection=position.xyz-objCam.xyz;vec3 bitangent=cross(normal.xyz,tangent.xyz)*tangent.w;vBitangent=bitangent;vTangent=tangent.xyz;vViewDirection=vec3(dot(viewDirection,tangent.xyz),dot(viewDirection,bitangent),dot(viewDirection,normal));
#endif
vec4 mvPosition=modelViewMatrix*vec4(position,1.0);vRoom=_room;vViewPosition=-mvPosition.xyz;vNormal=normal;vPosition=position;vWorldPosition=(modelMatrix*vec4(position,1.)).xyz;gl_Position=projectionMatrix*mvPosition;}`,gs=w(hs,"vertexShader"),ps=`#define GLSLIFY 1
varying vec2 vUv;varying vec3 vTangent;varying vec3 vBitangent;varying vec3 vViewDirection;varying vec3 vNormal;varying float vRoom;uniform vec4 uRoomTransform;uniform float uSpecular;uniform float uRoughness;uniform vec3 uDiffuseColor;uniform float uRoomSize;uniform float uRoomBlur;uniform float uAoIntensity;uniform float uAoSize;uniform vec2 uGradientRange;uniform vec3 uGradientColor;uniform float uGradientOpacity;uniform vec2 uYRange;uniform float uTransmissionThickness;uniform float uTransmissionIor;uniform float uTransmissionBlur;uniform vec3 uTransmissionAttenuationColor;uniform float uTransmissionAttenuationDistance;uniform float uGlobalIntensity;vec2 hash22(vec2 p){vec3 p3=fract(vec3(p.xyx)*vec3(0.1031,0.1030,0.0973));p3+=dot(p3,p3.yzx+33.33);return fract((p3.xx+p3.yz)*p3.zy);}float cremap(float value,float start1,float stop1,float start2,float stop2){float r=start2+(stop2-start2)*((value-start1)/(stop1-start1));return clamp(r,min(start2,stop2),max(start2,stop2));}float remap(float value,float start1,float stop1,float start2,float stop2){return start2+(stop2-start2)*((value-start1)/(stop1-start1));}vec3 packNormalToRGB(const in vec3 normal){return normalize(normal)*0.5+0.5;}float isNorm(vec2 _st){if(_st.x>1.||_st.y>1.||_st.x<0.||_st.y<0.)return 0.;return 1.;}varying vec3 vPosition;varying vec3 vWorldPosition;varying vec3 vViewPosition;uniform mat3 normalMatrix;uniform mat4 modelMatrix;uniform mat4 projectionMatrix;uniform float uEnvMapIntensity;uniform mat3 uEnvMapRotation;uniform sampler2D tEnvMap;uniform vec2 uTransmissionSamplerSize;uniform sampler2D tTransmissionSamplerMap;vec3 getVolumeTransmissionRay(vec3 n,vec3 v,float thickness,float ior,mat4 modelMatrix){vec3 refractionVector=refract(-v,normalize(n),1.0/ior);vec3 modelScale;modelScale.x=length(vec3(modelMatrix[0].xyz));modelScale.y=length(vec3(modelMatrix[1].xyz));modelScale.z=length(vec3(modelMatrix[2].xyz));return normalize(refractionVector)*thickness*modelScale;}float applyIorToRoughness(float roughness,float ior){return roughness*clamp(ior*2.0-2.0,0.0,1.0);}vec4 getTransmissionSample(vec2 fragCoord,float roughness,float ior,float blur){float framebufferLod=log2(uTransmissionSamplerSize.x)*applyIorToRoughness(roughness,ior)*blur;
#ifdef TEXTURE_LOD_EXT
return texture2DLodEXT(tTransmissionSamplerMap,fragCoord.xy,framebufferLod);
#else
return texture2D(tTransmissionSamplerMap,fragCoord.xy,framebufferLod);
#endif
}vec3 applyVolumeAttenuation(vec3 radiance,float transmissionDistance,vec3 attenuationColor,float attenuationDistance){if(attenuationDistance==0.0){return radiance;}else{vec3 attenuationCoefficient=-log(attenuationColor)/attenuationDistance;vec3 transmittance=exp(-attenuationCoefficient*transmissionDistance);return transmittance*radiance;}}vec4 getTransmission(const in vec3 n,const in vec3 v,const in float roughness,const in vec3 diffuseColor,const in vec3 position,const in mat4 modelMatrix,const in mat4 viewMatrix,const in mat4 projMatrix,const in float ior,const in float blur,const in float thickness,const in vec3 attenuationColor,const in float attenuationDistance){vec3 transmissionRay=getVolumeTransmissionRay(n,v,thickness,ior,modelMatrix);vec3 refractedRayExit=position+transmissionRay;vec4 ndcPos=projMatrix*viewMatrix*vec4(refractedRayExit,1.0);vec2 refractionCoords=ndcPos.xy/ndcPos.w;refractionCoords+=1.0;refractionCoords/=2.0;vec4 transmittedLight=getTransmissionSample(refractionCoords,roughness,ior,blur);vec3 attenuatedColor=applyVolumeAttenuation(transmittedLight.rgb,length(transmissionRay),attenuationColor,attenuationDistance);return vec4(attenuatedColor*diffuseColor,transmittedLight.a);}vec3 inverseTransformDirection(in vec3 dir,in mat4 matrix){return normalize((vec4(dir,0.0)*matrix).xyz);}
#ifndef saturate
#define saturate( a ) clamp( a, 0.0, 1.0 )
#endif
#include <cube_uv_reflection_fragment>
#define USE_ENVMAP
#define ENVMAP_TYPE_CUBE_UV
#include <cube_uv_reflection_fragment>
vec3 getEnvColor(const in vec3 viewDir,const in vec3 normal,const in float roughness){
#ifdef ENVMAP_TYPE_CUBE_UV
vec3 reflectVec=reflect(-viewDir,normal);reflectVec=normalize(mix(reflectVec,normal,roughness*roughness));reflectVec=inverseTransformDirection(reflectVec,viewMatrix);vec4 envMapColor=textureCubeUV(tEnvMap,uEnvMapRotation*reflectVec,roughness);return envMapColor.rgb*uEnvMapIntensity;
#else
return vec3(0.0);
#endif
}vec2 DFGApprox(const in vec3 normal,const in vec3 viewDir,const in float roughness){float dotNV=saturate(dot(normal,viewDir));const vec4 c0=vec4(-1,-0.0275,-0.572,0.022);const vec4 c1=vec4(1,0.0425,1.04,-0.04);vec4 r=roughness*c0+c1;float a004=min(r.x*r.x,exp2(-9.28*dotNV))*r.x+r.y;vec2 fab=vec2(-1.04,1.04)*a004+r.zw;return fab;}vec3 EnvironmentBRDF(const in vec3 normal,const in vec3 viewDir,const in vec3 specularColor,const in float specularF90,const in float roughness){vec2 fab=DFGApprox(normal,viewDir,roughness);return specularColor*fab.x+specularF90*fab.y;}vec4 blendTransmissionAndSpecular(const in vec3 normal,const in vec3 viewDir,const in vec3 specularColor,const in vec4 transmissionColor,const in float specularF90,const in float roughness){vec3 F=EnvironmentBRDF(normal,viewDir,specularColor,specularF90,roughness);return vec4(mix(transmissionColor.rgb,specularColor,saturate(length(F)/1.4)),transmissionColor.a);}void main(){vec3 modelNormal=vNormal;vec2 r=hash22(vUv*165352.)-0.5;vec2 roomUV=fract(vUv+r*uRoomBlur);vec2 roomScale=1./vec2(uRoomSize);roomUV=((roomUV-0.5)*roomScale)+0.5;float sigDist=max(abs(roomUV.x-0.5),abs(roomUV.y-0.5))-0.5;float a=1.-clamp(sigDist/fwidth(sigDist)+0.5,0.0,1.0);float roomMix=a*vRoom;vec3 pos=vec3(roomUV*2.0-1.0,1.0);vec3 id=1.0/vViewDirection;vec3 k=abs(id)-pos*id;float kMin=min(min(k.x,k.y),k.z);pos+=kMin*vViewDirection;vec3 rawRoomNormal=-sign(pos.yxz)*step(0.9999,abs(pos.yxz));mat3 TBN=mat3(normalize(vTangent),normalize(vBitangent),normalize(vNormal));vec3 roomNormal=TBN*normalize(rawRoomNormal);vec3 normal=normalize(mix(modelNormal,roomNormal,roomMix));mat3 modelMatrixRotation=mat3(modelMatrix);vec3 roomOffset=(((TBN*pos)-modelNormal)/2.)*roomMix/uRoomTransform.xxx;vec3 position=vPosition+roomOffset;vec3 worldPosition=(modelMatrix*vec4(position,1.)).xyz;vec3 worldCameraDirection=normalize(vec3(cameraPosition-worldPosition));vec3 viewCameraDirection=normalize(vViewPosition);vec4 transmission=getTransmission(modelMatrixRotation*normal,worldCameraDirection,uRoughness,uDiffuseColor,worldPosition,modelMatrix,viewMatrix,projectionMatrix,uTransmissionIor,uTransmissionBlur,uTransmissionThickness,uTransmissionAttenuationColor,uTransmissionAttenuationDistance);float yRamp=remap(position.y,uYRange.x,uYRange.y,1.,0.);transmission.rgb=mix(transmission.rgb,uGradientColor,smoothstep(uGradientRange.x,uGradientRange.y,yRamp)*uGradientOpacity);vec3 aoGradient=smoothstep(1.-uAoSize,1.,abs(pos))-abs(rawRoomNormal.yxz);float ao=(aoGradient.x+aoGradient.y+aoGradient.z)*roomMix*smoothstep(1.,0.,pos.z);ao*=uAoIntensity*smoothstep(1.,6.,vWorldPosition.y);vec3 envColor=getEnvColor(viewCameraDirection,normalMatrix*modelNormal,uRoughness);vec4 color=blendTransmissionAndSpecular(modelMatrixRotation*modelNormal,worldCameraDirection,envColor,transmission,uSpecular,uRoughness);color.rgb=mix(vec3(0.005,0.0,0.03),color.rgb,smoothstep(1.,6.,vWorldPosition.y));gl_FragColor=vec4(color.rgb-ao,1.);gl_FragColor.rgb*=uGlobalIntensity;
#ifdef DEBUG
#if DEBUG == 1
gl_FragColor=vec4(pos.xyz*roomMix,1.);
#elif DEBUG == 2
gl_FragColor=vec4(packNormalToRGB(normal),1.);
#elif DEBUG == 3
gl_FragColor=vec4(packNormalToRGB(modelNormal),1.);
#elif DEBUG == 4
gl_FragColor=vec4(0.);
#elif DEBUG == 5
gl_FragColor=vec4(envColor,1.);
#elif DEBUG == 6
gl_FragColor=vec4(vec3(1.-ao),1.);
#elif DEBUG == 7
gl_FragColor=vec4(transmission.rgb,1.);
#elif DEBUG == 8
gl_FragColor=vec4(vec3(vRoom),1.);
#elif DEBUG == 9
gl_FragColor=vec4(vec3(packNormalToRGB(vTangent)),1.);
#elif DEBUG == 10
gl_FragColor=vec4(vec3(fract(vUv)*vRoom,1.),1.);
#elif DEBUG == 11
gl_FragColor=vec4(mix(vec3(0.8,0.1,0.1),vec3(0.1,0.8,0.1),length(vTangent))*vRoom,1.);
#elif DEBUG == 12
gl_FragColor=vec4(mix(vec3(1.),uGradientColor,smoothstep(uGradientRange.x,uGradientRange.y,yRamp)*uGradientOpacity),1.);
#endif
#endif
#ifdef DEBUG_COLOR
gl_FragColor=vec4(mix(gl_FragColor.rgb,DEBUG_COLOR,pow(1.-dot(viewCameraDirection,normalMatrix*modelNormal),0.4)*1.),1.);
#endif
}`,_s=w(ps,"fragmentShader"),xs=`#define GLSLIFY 1
attribute vec4 tangent;attribute float _room;varying vec2 vUv;varying vec3 vTangent;varying vec3 vBitangent;varying vec3 vWorldPosition;varying vec3 vPosition;varying vec3 vViewPosition;varying vec3 vViewDirection;varying vec3 vNormal;varying float vRoom;uniform vec4 uRoomTransform;uniform mat4 uWorldMatrix;void main(){vUv=uv*uRoomTransform.xy*0.999+uRoomTransform.zw;vec4 objCam=uWorldMatrix*vec4(cameraPosition,1.0);vec3 viewDirection=position.xyz-objCam.xyz;vec3 bitangent=cross(normal.xyz,tangent.xyz)*tangent.w;vBitangent=bitangent;vTangent=tangent.xyz;vViewDirection=vec3(dot(viewDirection,tangent.xyz),dot(viewDirection,bitangent),dot(viewDirection,normal));vec4 mvPosition=modelViewMatrix*vec4(position,1.0);vRoom=_room;vViewPosition=-mvPosition.xyz;vNormal=normal;vPosition=position;vWorldPosition=(modelMatrix*vec4(position,1.)).xyz;gl_Position=projectionMatrix*mvPosition;}`,bs=w(xs,"vertexShader");class ys{constructor(t){l(this,"_commonUniforms");l(this,"_material");l(this,"_bloomMaterial");l(this,"_view");this._view=t.view,this._commonUniforms=this._createCommonUniforms(),this._material=this._createMaterial(),this._bloomMaterial=this._createBloomMaterial()}get material(){return this._material}get bloomMaterial(){return this._bloomMaterial}get commonUniforms(){return this._commonUniforms}destroy(){this._material.dispose(),this._bloomMaterial.dispose()}update({time:t,delta:e}){this._commonUniforms.uTime.value=t}_createCommonUniforms(){return{uTime:{value:0},uRoomTransform:{value:new Kt},uWorldMatrix:{value:new st},uSpecular:{value:0},uRoughness:{value:0},uDiffuseColor:{value:new V},uRoomSize:{value:0},uRoomBlur:{value:0},uAoIntensity:{value:0},uAoSize:{value:0},uGradientRange:{value:new I},uGradientColor:{value:new V},uGradientOpacity:{value:0},uYRange:{value:new I},uTransmissionThickness:{value:0},uTransmissionIor:{value:0},uTransmissionBlur:{value:0},uTransmissionAttenuationColor:{value:new V},uTransmissionAttenuationDistance:{value:0},uTransmissionSamplerSize:{value:new I(0,0)},tTransmissionSamplerMap:{value:null},uEnvMapIntensity:{value:1},uEnvMapRotation:{value:new Wo},tEnvMap:{value:this._view.scene.environment}}}_createMaterial(){const t=new Y({uniforms:{uGlobalIntensity:{value:0},...this._commonUniforms},defines:{DEBUG:0,DEBUG_COLOR:!1,...ao(this._view.scene.environment)}});return _s.use(t),bs.use(t),t}_createBloomMaterial(){const t=new Y({uniforms:{...this._commonUniforms,uGlobalBloomIntensity:{value:0},uBloomDiffuseIntensity:{value:0},uBloomGradientIntensity:{value:0},uBloomTransmissionLumaClamping:{value:new I},uBloomTransmissionIntensity:{value:0},uBloomEnvLumaClamping:{value:new I},uBloomEnvIntensity:{value:0}},defines:{DEBUG:0,DEBUG_COLOR:!1,...ao(this._view.scene.environment)},userData:{bloom:!0}});return fs.use(t),gs.use(t),t}}const Ss=`#define GLSLIFY 1
varying vec2 vUv;varying vec3 vColor1;varying vec3 vColor2;varying vec2 vLcdScale;varying float vIndex;uniform sampler2D tMap;
#ifndef PI
#define PI 3.14159265358
#endif
#ifndef TAU
#define TAU 6.28318530718
#endif
highp float rand(const in vec2 uv){const highp float a=12.9898,b=78.233,c=43758.5453;highp float dt=dot(uv.xy,vec2(a,b)),sn=mod(dt,PI);return fract(sin(sn)*c);}vec2 mult(inout vec2 r){r=fract(r*vec2(12.9898,78.233));return sqrt(r.x+0.001)*vec2(sin(r.y*TAU),cos(r.y*TAU));}
#ifndef ITERATIONS
#define ITERATIONS 20
#endif
vec3 blurTexture(sampler2D tex,vec2 uv,float radius,float aspect,vec2 offset){vec2 circle=vec2(radius);circle.x*=aspect;vec2 rnd=vec2(rand(vec2(uv.xy+offset)));vec3 acc=vec3(0.0);for(int i=0;i<ITERATIONS;i++){acc+=texture2D(tex,uv+vec2(circle*mult(rnd))).xyz;}return acc/float(ITERATIONS);}void main(){vec2 uv=vUv;vec4 texel=vec4(blurTexture(tMap,vUv,0.01,1.,vec2(0.))*2.,1.);float d=texel.r*0.5;gl_FragColor=vec4(mix(vColor2,vColor1*5.,d),mix(0.2,1.,d));}`,Cs=w(Ss,"fragmentShader"),Ts=`#define GLSLIFY 1
varying vec2 vUv;varying vec3 vColor1;varying vec3 vColor2;varying vec2 vLcdScale;varying float vIndex;uniform sampler2D tMap;void main(){vec2 uv=vUv;vec4 texel=texture2D(tMap,vUv);float d=texel.r;gl_FragColor=vec4(mix(vColor2,vColor1*5.,d),mix(0.5,1.,d));vec2 sigDist=abs((fract((uv-0.125)*vLcdScale)-0.5)*2.)-0.5;vec2 f=1.-clamp(sigDist/fwidth(sigDist)+0.5,0.0,1.0);float b=f.x*f.y;gl_FragColor*=mix(mix(0.5,0.7,d),1.,b);
#if defined(SPOT_DEBUG)
if(SPOT_DEBUG==int(vIndex)){gl_FragColor=vec4(1.,0.,0.,1.);}
#endif
}`,ws=w(Ts,"fragmentShader"),Es=`#define GLSLIFY 1
attribute float _index;varying float vIndex;varying vec2 vUv;varying vec3 vColor1;varying vec3 vColor2;varying vec2 vLcdScale;void main(){int INDEX=int(round(_index));vColor1=COLOR_1[INDEX];vColor2=COLOR_2[INDEX];vLcdScale=LCD_SCALE[INDEX];vIndex=float(INDEX);vUv=uv;gl_Position=projectionMatrix*modelViewMatrix*vec4(position,1.0);}`,so=w(Es,"vertexShader");class Ms extends le{constructor(e){super();l(this,"_config");l(this,"_mesh");l(this,"_debug");W(this),this._config=e.config,this._mesh=this._createMesh(e.baseMesh),this._debug=this._createDebug(e.debugContainer),this._onConfigUpdated()}setVisibility(e){this._mesh.visible=e}_createMesh(e){const i=e,o=e.material,n=new Y({uniforms:{tMap:{value:o.map}},defines:{COLOR_1:"",COLOR_2:"",LCD_SCALE:"",SPOT_DEBUG:!1},transparent:!0});ws.use(n),so.use(n);const r=new Y({uniforms:{tMap:{value:o.map}},defines:{COLOR_1:"",COLOR_2:"",LCD_SCALE:""},transparent:!0});return Cs.use(r),so.use(r),e.userData.bloomMaterial=r,e.userData.renderBloom=!0,e.material=n,i}_onConfigUpdated(){const e=Object.keys(this._config).map(i=>Number.parseInt(i)).sort((i,o)=>i-o).map(i=>i.toString());De(this._mesh.material,{COLOR_1:e.map(i=>this._config[i].color1),COLOR_2:e.map(i=>this._config[i].color2),LCD_SCALE:e.map(i=>this._config[i].lcdScale)},{precision:3,warn:ne.isProduction}),De(this._mesh.userData.bloomMaterial,{COLOR_1:e.map(i=>this._config[i].color1),COLOR_2:e.map(i=>this._config[i].color2),LCD_SCALE:e.map(i=>this._config[i].lcdScale)},{precision:3,warn:ne.isProduction})}_createDebug(e){if(!T)return;const i=T.addFolder({title:"Billboards",parent:e});let o;for(const n in this._config){const r=this._config[n],s=m=>{c.expanded&&(clearTimeout(o),this._mesh.material.defines.SPOT_DEBUG=m,this._mesh.material.needsUpdate=!0,o=setTimeout(()=>{this._mesh.material.defines.SPOT_DEBUG=!1,this._mesh.material.needsUpdate=!0},1e3))},c=i.addFolder({title:"Billboard "+n,expanded:!1});c.on("fold",()=>s(Number.parseInt(n))),c.addButton({title:"Spot Mesh"}).on("click",()=>{s(Number.parseInt(n))}),C.addInputs(c,r,this._onConfigUpdated,{color1:{label:"Color 1"},color2:{label:"Color 2"},lcdScale:{label:"LCD scale"}})}return i}}const Ns=`#define GLSLIFY 1
varying vec2 vUv;const vec3 vColor1=vec3(0.);const vec3 vColor2=vec3(1.);uniform sampler2D tMap;
#ifndef PI
#define PI 3.14159265358
#endif
#ifndef TAU
#define TAU 6.28318530718
#endif
highp float rand(const in vec2 uv){const highp float a=12.9898,b=78.233,c=43758.5453;highp float dt=dot(uv.xy,vec2(a,b)),sn=mod(dt,PI);return fract(sin(sn)*c);}vec2 mult(inout vec2 r){r=fract(r*vec2(12.9898,78.233));return sqrt(r.x+0.001)*vec2(sin(r.y*TAU),cos(r.y*TAU));}
#ifndef ITERATIONS
#define ITERATIONS 20
#endif
vec3 blurTexture(sampler2D tex,vec2 uv,float radius,float aspect,vec2 offset){vec2 circle=vec2(radius);circle.x*=aspect;vec2 rnd=vec2(rand(vec2(uv.xy+offset)));vec3 acc=vec3(0.0);for(int i=0;i<ITERATIONS;i++){acc+=texture2D(tex,uv+vec2(circle*mult(rnd))).xyz;}return acc/float(ITERATIONS);}vec3 ContrastSaturationBrightness(vec3 color,float brt,float sat,float con){const float AvgLumR=0.5;const float AvgLumG=0.5;const float AvgLumB=0.5;const vec3 LumCoeff=vec3(0.2125,0.7154,0.0721);vec3 AvgLumin=vec3(AvgLumR,AvgLumG,AvgLumB);vec3 brtColor=color*brt;vec3 intensity=vec3(dot(brtColor,LumCoeff));vec3 satColor=mix(intensity,brtColor,sat);vec3 conColor=mix(AvgLumin,satColor,con);return conColor;}void main(){vec3 texel=blurTexture(tMap,vUv,0.03,1.,vec2(0.));vec3 color=ContrastSaturationBrightness(texel.rgb,2.5,2.,1.);vec3 bgColor=vec3(0.59,0.36,0.76);gl_FragColor=vec4(color,1.);gl_FragColor.a=mix(0.5,1.,smoothstep(0.,0.2,length(texel.rgb)))*0.5;gl_FragColor.rgb=mix(bgColor*0.5,gl_FragColor.rgb,smoothstep(0.,0.2,length(texel.rgb)));}`,Ds=w(Ns,"fragmentShader"),Rs=`#define GLSLIFY 1
varying vec2 vUv;const vec3 vColor1=vec3(0.);const vec3 vColor2=vec3(1.);const vec2 vLcdScale=vec2(15,40);uniform sampler2D tMap;vec3 ContrastSaturationBrightness(vec3 color,float brt,float sat,float con){const float AvgLumR=0.5;const float AvgLumG=0.5;const float AvgLumB=0.5;const vec3 LumCoeff=vec3(0.2125,0.7154,0.0721);vec3 AvgLumin=vec3(AvgLumR,AvgLumG,AvgLumB);vec3 brtColor=color*brt;vec3 intensity=vec3(dot(brtColor,LumCoeff));vec3 satColor=mix(intensity,brtColor,sat);vec3 conColor=mix(AvgLumin,satColor,con);return conColor;}void main(){vec2 uv=vUv;vec4 texel=texture2D(tMap,vUv);vec3 color=ContrastSaturationBrightness(texel.rgb,2.,2.,1.5);vec3 bgColor=vec3(0.61,0.37,0.78);gl_FragColor=vec4(color*1.5,1.);vec2 sigDist=abs((fract((uv-0.125)*vLcdScale)-0.5)*2.)-0.5;vec2 f=1.-clamp(sigDist/fwidth(sigDist)+0.5,0.0,1.0);float b=f.x*f.y;gl_FragColor*=mix(0.4,1.,b);gl_FragColor.rgb=mix(bgColor*0.2,gl_FragColor.rgb,smoothstep(0.,0.2,length(texel.rgb)));}`,Os=w(Rs,"fragmentShader"),Ps=`#define GLSLIFY 1
varying vec2 vUv;void main(){vUv=uv;gl_Position=projectionMatrix*modelViewMatrix*vec4(position,1.0);}`,lo=w(Ps,"vertexShader");class Is extends Qn{constructor(t,e,i,o,n,r,s,c,m){super(t,e,i,o,n,r,s,c,m),this.isVideoTexture=!0,this.minFilter=r!==void 0?r:ie,this.magFilter=n!==void 0?n:ie,this.generateMipmaps=!1;const f=this;function v(){f.needsUpdate=!0,f.requestVideoId=t.requestVideoFrameCallback(v)}function h(){t&&t.cancelVideoFrameCallback(f.requestVideoId)}"requestVideoFrameCallback"in t&&(this.requestVideoId=t.requestVideoFrameCallback(v),this.cancelVideoFrameCallback=h)}clone(){return new this.constructor(this.image).copy(this)}update(){const t=this.image;"requestVideoFrameCallback"in t===!1&&t.readyState>=t.HAVE_CURRENT_DATA&&(this.needsUpdate=!0)}dispose(){this.cancelVideoFrameCallback&&this.cancelVideoFrameCallback(),super.dispose()}}class Ls extends le{constructor(e){super();l(this,"_config");l(this,"_mesh");l(this,"_debug");W(this),this._config=e.config,this._mesh=this._createMesh(e.baseMesh),this._debug=this._createDebug(e.debugContainer),this._onConfigUpdated()}setVisibility(e){this._mesh.visible=e}_createVideoTexture(){const e=document.createElement("video");e.src="/webgl/home/mascot_3.mp4",e.muted=!0,e.autoplay=!0,e.loop=!0;const i=ve();return F(()=>i.home.section>2,n=>{n&&e.play()}),new Is(e)}_createMesh(e){const i=e,o=new Jn().load("/webgl/home/mascot.jpg"),n=new Y({uniforms:{tMap:{value:o}},defines:{COLOR_1:"",COLOR_2:"",LCD_SCALE:"",SPOT_DEBUG:!1},transparent:!0});Os.use(n),lo.use(n);const r=new Y({uniforms:{tMap:{value:o}},defines:{},transparent:!0});return Ds.use(r),lo.use(r),e.userData.bloomMaterial=r,e.userData.renderBloom=!0,e.material=n,i}update({time:e,delta:i}){}_onConfigUpdated(){Object.keys(this._config).map(e=>Number.parseInt(e)).sort((e,i)=>e-i).map(e=>e.toString())}_createDebug(e){}}function zt(a,t){const e=a.onBeforeRender.bind(a),i=typeof t=="object"?t:new I;a.onBeforeRender=(...o)=>{const n=o[0];n.getSize(i),i.multiplyScalar(n.getPixelRatio());const r=n.getRenderTarget();r&&i.set(r.width,r.height),typeof t=="function"&&t(i),e(...o)}}const Fs=`#define GLSLIFY 1
varying vec2 vUv;varying float vZ;uniform sampler2D tDepth;uniform vec2 uCameraRange;uniform vec3 uColor;uniform vec2 uRange1;uniform vec2 uRange2;uniform vec2 uResolution;
#include <packing>
float readDepth(sampler2D depthSampler,vec2 coord){float fragCoordZ=texture2D(depthSampler,coord).x;return perspectiveDepthToViewZ(fragCoordZ,0.1,1000.);}void main(){vec2 uv=vUv;vec2 depthUv=gl_FragCoord.xy/uResolution.xy;float sceneDepth=readDepth(tDepth,depthUv);float alpha=smoothstep(uRange1.x,uRange1.y,vZ-sceneDepth);alpha*=smoothstep(uRange2.x,uRange2.y,uv.y);alpha*=smoothstep(0.5,0.48,abs(uv.x-0.5));gl_FragColor=vec4(uColor,alpha);}`,As=w(Fs,"fragmentShader"),Us=`#define GLSLIFY 1
varying vec2 vUv;varying float vZ;void main(){vUv=uv;vec4 mvPosition=modelViewMatrix*vec4(position,1.0);gl_Position=projectionMatrix*mvPosition;vZ=mvPosition.z;}`,zs=w(Us,"vertexShader");class Gs extends le{constructor(e){super();l(this,"_config");l(this,"_mesh");l(this,"_debug");l(this,"_view");l(this,"_visibleOverride",!0);W(this),this._config=e.config,this._view=e.view,this._mesh=this._createMesh(e.baseMesh),this._debug=this._createDebug(e.debugContainer),this._onConfigUpdated()}setVisibility(e){this._mesh.visible=e&&this._visibleOverride}_createMesh(e){const i=new Y({uniforms:{tDepth:{value:this._view._composer.passes.render.renderTarget.depthTexture},uCameraRange:{value:new I(this._view.camera.near,this._view.camera.far)},uResolution:{value:new I},uColor:{value:new V},uRange1:{value:new I},uRange2:{value:new I}},side:ai,transparent:!0,depthWrite:!1});return As.use(i),zs.use(i),zt(e,i.uniforms.uResolution.value),e.material=i,e}_onConfigUpdated(){this._mesh.material.uniforms.uColor.value.set(this._config.color),this._mesh.material.uniforms.uRange1.value.set(this._config.range1.min,this._config.range1.max),this._mesh.material.uniforms.uRange2.value.set(this._config.range2.min,this._config.range2.max)}_createDebug(e){if(!T)return;const i=T.addFolder({title:"Fog",parent:e,index:0});return i.addInput(this,"_visibleOverride",{label:"Visible"}),C.addInputs(i,this._config,this._onConfigUpdated,{color:{label:"Color"},range1:{label:"Range 1",min:0,max:8,step:.01},range2:{label:"Range 2",min:0,max:1,step:.01}},{className:"config"}),i}}const co=new ea;class Bs extends le{constructor(e){super();l(this,"_config");l(this,"_fastEditConfig");l(this,"_view");l(this,"_debug");l(this,"_buildingsParent");l(this,"_buildings");l(this,"_lights");l(this,"_fog");l(this,"_buildingMaterials");l(this,"_billboards");l(this,"_mascotBillboards");l(this,"_buildingsDebug");W(this),this._config=e.config,this._fastEditConfig=JSON.parse(JSON.stringify(e.config.buildings["01"])),this._view=e.view,this._debug=this._createDebug(e.debugContainer),this._buildingMaterials=this._createBuildingMaterials(),this._buildingsParent=e.scene.getObjectByName("BUILDINGS"),this._buildings=this._createBuildings(e.scene),this._lights=this._createLights(e.scene),this._billboards=this._createBillboards(e.scene),this._mascotBillboards=this._createMascotBillboards(e.scene),this._fog=this._createCityFog(e.scene)}_createBuildingMaterials(){return new ys({view:this._view})}_createLights(e){const i=[];e.getObjectByName("BUILDING_LIGHTS").traverse(r=>{"isPointLight"in r&&(i.push(r),r.visible=!1)});const n=new ds({debugContainer:this._debug,config:this._config.buildingLights,lights:i});return this.add(n),n}_createBillboards(e){const i=e.getObjectByName("CITY_BILLBOARDS");return new Ms({config:this._config.billboards,debugContainer:this._debug,baseMesh:i})}_createMascotBillboards(e){const i=e.getObjectByName("MASCOT_BILLBOARDS");return new Ls({config:{},debugContainer:this._debug,baseMesh:i})}_createBuildings(e){const i=[];return e.getObjectByName("BUILDINGS").traverse(n=>{if("isMesh"in n){const r=n.userData.id,s=new ss({debugContainer:this._buildingsDebug,baseMesh:n,config:this._config.buildings[r],globalConfig:this._config,id:r,materials:this._buildingMaterials});this.add(s),i.push(s)}}),i}_createCityFog(e){const i=e.getObjectByName("CITY_FOG");return new Gs({baseMesh:i,view:this._view,config:this._config.buildingFog,debugContainer:this._debug})}destroy(){var e;(e=this._debug)==null||e.dispose();for(const i of this._buildings)i.destroy(),i.parent=null,this.remove(i);this._buildingMaterials.destroy(),this._lights.destroy(),this._lights.parent=null,this.remove(this._lights),this.parent=null,document.querySelector("#__nuxt").removeEventListener("click",this._handleSpotClick)}setTransmission(e){for(const i of this._buildings)i.setTransmission(e)}setVisibility(e){this._buildingsParent.visible=e,this._lights.setVisibility(e),this._fog.setVisibility(e),this._mascotBillboards.setVisibility(e),this._billboards.setVisibility(e)}update({time:e,delta:i}){this.setVisibility(this._buildingsParent.scale.x>.002),this._buildingMaterials.update({time:e,delta:i}),this._lights.update({time:e,delta:i}),this._mascotBillboards.update({time:e,delta:i})}_onConfigUpdated(){for(const e of this._buildings)e._onConfigUpdated()}_onFastEditConfigUpdated(e){if(!e.last)return;const i=e.presetKey.split(".");function o(n,r){const[s,...c]=n;return c.length===0?{key:s,parent:r}:o(c,r[s])}for(const n in this._config.buildings){const r=this._config.buildings[n],{key:s,parent:c}=o(i,r);typeof c[s]=="object"?Object.assign(c[s],e.value):c[s]=e.value}this._onConfigUpdated()}_handleSpotClick(e){co.setFromCamera(vn(e.clientX,e.clientY),this._view.camera);const[i]=co.intersectObjects(this._buildings.map(o=>o.mesh));if(i)for(const o of this._buildings)o._debug.expanded=o.mesh===i.object}_updateBuildingsVisibility(e){for(const i of this._buildings)i.mesh.visible=e}_updateBuildingsBloom(e){for(const i of this._buildings)i.mesh.userData.renderBloom=e}_createDebug(e){if(!T)return;const i=T.addFolder({title:"City",parent:e});function o(_,S){const D="data:text/json;charset=utf-8,"+encodeURIComponent(JSON.stringify(_,null,"	")),E=document.createElement("a");E.setAttribute("href",D),E.setAttribute("download",S+".json"),document.body.appendChild(E),E.click(),E.remove()}i.addButton({title:"Download Config"}).on("click",()=>{o(this._config,"buildings")});const n={DEBUG:0,bloom:!0,visible:!0};i.addInput(n,"DEBUG",{options:{NONE:0,ROOM_UV:1,NORMAL:2,BASE_NORMAL:3,CUBEMAP:4,ENV:5,AO:6,TRANSMISSION:7,MASK:8,TANGENT:9,UV:10,UV_ERROR:11},label:"Debug"}).on("change",()=>{for(const _ of this._buildings)_.mesh.material.defines.DEBUG=n.DEBUG,_.mesh.material.needsUpdate=!0}),i.addInput(n,"visible",{label:"Visible"}).on("change",({value:_})=>{this._updateBuildingsVisibility(_)}),i.addInput(n,"bloom",{label:"Bloom"}).on("change",({value:_})=>{this._updateBuildingsBloom(_)});const r=i.addFolder({title:"Global",expanded:!1,index:0});C.addInputs(r,this._config.globalBuilding,this._onConfigUpdated,{bloomIntensity:{label:"Bloom Intensity",min:0,max:1,step:.01},intensity:{label:"Intensity",min:0,max:1,step:.01}},{className:"config"});const s=i.addFolder({title:"Fast Edit",expanded:!1,index:0}),c=_=>S=>{S.presetKey=_?_+"."+S.presetKey:S.presetKey,this._onFastEditConfigUpdated(S)};C.addInputs(s,this._fastEditConfig,c(),{roughness:{label:"Roughness",step:.01},specular:{label:"Specular",step:.01},diffuseColor:{label:"Diffuse Color"},environment:!1,interior:!1,transmission:!1,ambientOcclusion:!1,gradient:!1,bloom:!1},{className:"config"});const m=s.addFolder({title:"Ambient Occlusion",expanded:!1});C.addInputs(m,this._fastEditConfig.ambientOcclusion,c("ambientOcclusion"),{intensity:{label:"Intensity",step:.001,min:0,max:1},size:{label:"Size",step:.01,min:0,max:1}},{className:"config"});const f=s.addFolder({title:"Gradient",expanded:!1});C.addInputs(f,this._fastEditConfig.gradient,c("gradient"),{color:{label:"Color"},range:{label:"Range",min:-.5,max:1.5},opacity:{label:"Opacity",min:0,max:1}},{className:"config"});const v=s.addFolder({title:"Interior",expanded:!1});C.addInputs(v,this._fastEditConfig.interior,c("interior"),{objectSpace:{options:{"Object space":!0,"Tangent space":!1},label:"Mapping"},size:{label:"Size",step:.01,max:1,min:0},repeat:{label:"Repeat",x:{step:.01},y:{step:.01}},offset:{label:"Offset",x:{step:.01},y:{step:.01}},blur:{label:"Blur",min:0,max:1,step:.01}},{className:"config"});const h=s.addFolder({title:"Transmission",expanded:!1});C.addInputs(h,this._fastEditConfig.transmission,c("transmission"),{thickness:{label:"Thickness",step:.01},ior:{label:"Ior",step:.001},blur:{label:"Blur",step:.1},attenuationColor:{label:"Attenuation Color"},attenuationDistance:{label:"Attenuation Distance",step:.001}},{className:"config"});const g=s.addFolder({title:"Environment",expanded:!1});C.addInputs(g,this._fastEditConfig.environment,c("environment"),{intensity:{label:"Intensity",step:.01},rotation:{label:"Rotation",x:{step:.01,min:-Math.PI/2,max:Math.PI/2},y:{step:.01,min:-Math.PI/2,max:Math.PI/2},z:{step:.01,min:-Math.PI/2,max:Math.PI/2}}},{className:"config"});const b=s.addFolder({title:"Bloom",expanded:!1});C.addInputs(b,this._fastEditConfig.bloom,c("bloom"),{diffuse:{label:"Diffuse",step:.01},gradient:{label:"Gradient",step:.01},env:!1,transmission:!1},{className:"config"});const x=b.addFolder({title:"Environment",expanded:!1});C.addInputs(x,this._fastEditConfig.bloom.env,c("bloom.env"),{intensity:{label:"Intensity",step:.01},lumaClamping:{label:"Luma Clamping",min:0,max:1,step:.01}},{className:"config"});const p=b.addFolder({title:"Transmission",expanded:!1});C.addInputs(p,this._fastEditConfig.bloom.transmission,c("bloom.transmission"),{intensity:{label:"Intensity",step:.01},lumaClamping:{label:"Luma Clamping",min:0,max:1,step:.01}},{className:"config"}),this._buildingsDebug=i.addFolder({title:"Buildings",expanded:!1});const y={value:!1};return this._buildingsDebug.addInput(y,"value",{label:"Spot Click"}).on("change",({value:_})=>{_?document.querySelector("#__nuxt").addEventListener("click",this._handleSpotClick):document.querySelector("#__nuxt").removeEventListener("click",this._handleSpotClick)}),i}}const ks=`precision highp float;
#define GLSLIFY 1
#define RECIPROCAL_PI 0.31830988618
#define RECIPROCAL_PI2 0.15915494
#define PI 3.141592653589793
#define TAU 6.28318530718
uniform float uTime;uniform vec2 uResolution;uniform float uDpr;uniform sampler2D tCrystalEnvMap;uniform mat4 viewMatrix;uniform mat4 modelMatrix;uniform vec3 cameraPosition;uniform float uRenderingReflection;varying vec2 vUv;varying vec3 vNormal;varying vec3 vNormal2;varying vec3 vPos;varying vec4 vMPos;varying mat4 vInstanceMatrix;highp float rand(const in vec2 uv){const highp float a=12.9898,b=78.233,c=43758.5453;highp float dt=dot(uv.xy,vec2(a,b)),sn=mod(dt,PI);return fract(sin(sn)*c);}vec3 inverseTformDir(in vec3 dir,in mat4 matrix){return normalize((vec4(dir,0.0)*matrix).xyz);}vec4 envmap(vec4 mPos,vec3 normal,sampler2D uEnv,float mult,float offset){vec3 cameraToVertex=normalize(mPos.xyz-cameraPosition);vec3 worldNormal=inverseTformDir(normalize(normal),viewMatrix);vec3 reflect=normalize(reflect(cameraToVertex,worldNormal));vec2 uv;uv.y=asin(clamp(reflect.y,-1.0,1.0))*mult*RECIPROCAL_PI+0.5+offset;uv.x=atan(reflect.z,reflect.x)*RECIPROCAL_PI2*mult+0.5+offset;return texture2D(uEnv,uv);}void main(){vec3 color=vec3(0);float alpha=1.0;vec3 c1=vec3(0.395,0.713,0.925);vec3 c2=vec3(0.333,0.358,0.599);vec3 c3=vec3(0.448,0.713,0.942)*0.8;float posOffset=vInstanceMatrix[3].x*100.0+vInstanceMatrix[3].z*100.0;color=mix(c1,c2,sin(posOffset)*0.5+0.5);color=mix(color,c3,vPos.y*0.1);color*=0.9;vec4 env=envmap(vMPos,vNormal,tCrystalEnvMap,1.0,0.0);env.rgb=pow(env.rgb,vec3(3.0));vec4 env2=envmap(vMPos,vNormal,tCrystalEnvMap,0.8,uTime*0.2*rand(vec2(1.0,posOffset)));env2.rgb=pow(env2.rgb,vec3(3.0));color+=env.rgb*0.6;color+=env2.rgb*0.3;alpha*=mix(0.7,1.0,vPos.y*0.1);color*=mix(0.8,1.3,0.5+0.5*sin(uTime*1.3+mix(-3.14,3.14,rand(vec2(1.0,posOffset*1.3)))));color*=mix(0.5,mix(0.7,1.1,smoothstep(0.35,0.27,vMPos.y)),uRenderingReflection);gl_FragColor.rgb=color;gl_FragColor.a=alpha;}`,Hs=w(ks,"fragmentShader"),Vs=`#define GLSLIFY 1
attribute vec2 uv;attribute vec3 position;attribute vec3 normal;attribute mat4 instanceMatrix;uniform mat3 normalMatrix;uniform mat4 modelMatrix;uniform mat4 viewMatrix;uniform mat4 modelViewMatrix;uniform mat4 projectionMatrix;varying vec2 vUv;varying vec3 vNormal;varying vec3 vNormal2;varying vec3 vPos;varying vec4 vMPos;varying mat4 vInstanceMatrix;void main(){vUv=uv;vPos=position;vInstanceMatrix=instanceMatrix;vNormal=normalize(normalMatrix*normal);vNormal2=normalize(normal);vec4 pos=vec4(position,1);pos=instanceMatrix*pos;vMPos=modelMatrix*pos;gl_Position=projectionMatrix*modelViewMatrix*pos;}`,Ws=w(Vs,"vertexShader"),Ys=`precision highp float;
#define GLSLIFY 1
#define RECIPROCAL_PI 0.31830988618
#define RECIPROCAL_PI2 0.15915494
#define PI 3.141592653589793
#define TAU 6.28318530718
uniform float uTime;uniform vec2 uResolution;uniform float uDpr;uniform sampler2D tCrystalEnvMap;uniform float uStrength;uniform mat4 viewMatrix;uniform mat4 modelMatrix;uniform vec3 cameraPosition;varying vec2 vUv;varying vec3 vNormal;varying vec3 vNormal2;varying vec3 vPos;varying vec4 vMPos;varying mat4 vInstanceMatrix;highp float rand(const in vec2 uv){const highp float a=12.9898,b=78.233,c=43758.5453;highp float dt=dot(uv.xy,vec2(a,b)),sn=mod(dt,PI);return fract(sin(sn)*c);}vec3 inverseTformDir(in vec3 dir,in mat4 matrix){return normalize((vec4(dir,0.0)*matrix).xyz);}vec4 envmap(vec4 mPos,vec3 normal,sampler2D uEnv,float mult,float offset){vec3 cameraToVertex=normalize(mPos.xyz-cameraPosition);vec3 worldNormal=inverseTformDir(normalize(normal),viewMatrix);vec3 reflect=normalize(reflect(cameraToVertex,worldNormal));vec2 uv;uv.y=asin(clamp(reflect.y,-1.0,1.0))*mult*RECIPROCAL_PI+0.5+offset;uv.x=atan(reflect.z,reflect.x)*RECIPROCAL_PI2*mult+0.5+offset;return texture2D(uEnv,uv);}void main(){vec3 color=vec3(0);float alpha=1.0;vec3 c1=vec3(0.395,0.713,0.925);vec3 c2=vec3(0.333,0.358,0.599);vec3 c3=vec3(0.448,0.713,0.942)*0.8;float posOffset=vInstanceMatrix[3].x*100.0+vInstanceMatrix[3].z*100.0;color=mix(c1,c2,sin(posOffset)*0.5+0.5);color=mix(color,c3,vPos.y*0.1);color*=0.9;vec4 env=envmap(vMPos,vNormal,tCrystalEnvMap,1.0,0.0);env.rgb=pow(env.rgb,vec3(3.0));vec4 env2=envmap(vMPos,vNormal,tCrystalEnvMap,0.8,uTime*0.2*rand(vec2(1.0,posOffset)));env2.rgb=pow(env2.rgb,vec3(3.0));color+=env.rgb*0.6;color+=env2.rgb*0.3;alpha*=mix(0.7,1.0,vPos.y*0.1);color*=mix(0.8,1.3,0.5+0.5*sin(uTime*1.3+mix(-3.14,3.14,rand(vec2(1.0,posOffset*1.3)))));color*=uStrength;gl_FragColor.rgb=color;gl_FragColor.a=alpha;}`,js=w(Ys,"fragmentShader"),$s=`#define GLSLIFY 1
attribute vec2 uv;attribute vec3 position;attribute vec3 normal;attribute mat4 instanceMatrix;uniform mat3 normalMatrix;uniform mat4 modelMatrix;uniform mat4 viewMatrix;uniform mat4 modelViewMatrix;uniform mat4 projectionMatrix;varying vec2 vUv;varying vec3 vNormal;varying vec3 vNormal2;varying vec3 vPos;varying vec4 vMPos;varying mat4 vInstanceMatrix;void main(){vUv=uv;vPos=position;vInstanceMatrix=instanceMatrix;vNormal=normalize(normalMatrix*normal);vNormal2=normalize(normal);vec4 pos=vec4(position,1);pos=instanceMatrix*pos;vMPos=modelMatrix*pos;gl_Position=projectionMatrix*modelViewMatrix*pos;}`,Zs=w($s,"vertexShader");class Ks{constructor({view:t,config:e,debugContainer:i,gltf:o}){W(this);const n={value:M.get("demoCrystalEnvMap")};n.value.wrapS=n.value.wrapT=Z;const{uTime:r,uResolution:s,uDpr:c}=z.uniforms,m=new $({uniforms:{uResolution:s,uTime:r,uDpr:c,tCrystalEnvMap:n,uRenderingReflection:{value:0}},side:dt,transparent:!0});Ws.use(m),Hs.use(m),m.onBeforeRender=function(b,x,p,y,_){m.uniforms.uRenderingReflection.value=_.userData.renderingReflection?1:0};const f=new $({uniforms:{uResolution:s,uTime:r,uStrength:{value:.5},uDpr:c,tCrystalEnvMap:n},side:dt,transparent:!0});Zs.use(f),js.use(f),this._bloomMaterial=f;const v=o.scene.getObjectByName("CRYSTALS");this._group=v;const h={crystalGroup:v.children[0],count:v.children[0].children.length,mesh:null},g={crystalGroup:v.children[1],count:v.children[1].children.length,mesh:null};[h,g].forEach(b=>{const{crystalGroup:x,count:p}=b;let y=0;x.traverse(_=>{_.isMesh&&(b.mesh||(b.mesh=new Li(_.geometry,m,p),b.mesh.userData.renderBloom=!0,_.parent.add(b.mesh)),_.visible=!1,b.mesh.setMatrixAt(y++,_.matrix))})}),this._createDebug(i)}_createDebug(t){if(!T)return;const e=T.addFolder({title:"Crystals",parent:t});return e.addInput(this._group,"visible",{label:"Visible"}),e.addInput(this._bloomMaterial.uniforms.uStrength,"value",{label:"Bloom Strength",step:.01}),e}}const qs={TRANSMISSION_THICKNESS:"",TRANSMISSION_IOR:"",TRANSMISSION_BLUR:"",TRANSMISSION_ATTENUATION_COLOR:"",TRANSMISSION_ATTENUATION_DISTANCE:""};function Xs(a){const t=Math.floor(Math.log2(Math.max(a.image.width,a.image.height)/4)),e=1/a.image.width,i=1/a.image.height;return{CUBEUV_TEXEL_WIDTH:e,CUBEUV_TEXEL_HEIGHT:i,CUBEUV_MAX_MIP:de(t,2)}}function Jt(a){const t={...qs};return a&&Object.assign(t,Xs(a)),t}function ei(a){const t={uTransmissionSamplerSize:{value:new I(0,0)},tTransmissionSamplerMap:{value:null}};return a&&Object.assign(t,{uEnvMapIntensity:{value:1},uEnvMapRotation:{value:new Wo},tEnvMap:{value:a}}),t}function ti(a,t){if("transmission"in t&&De(a,{TRANSMISSION_THICKNESS:t.transmission.thickness,TRANSMISSION_IOR:t.transmission.ior,TRANSMISSION_BLUR:t.transmission.blur,TRANSMISSION_ATTENUATION_COLOR:t.transmission.attenuationColor,TRANSMISSION_ATTENUATION_DISTANCE:t.transmission.attenuationDistance},{precision:3,warn:ne.isProduction}),"environment"in t&&"uEnvMapRotation"in a.uniforms){const e=a.uniforms.uEnvMapRotation.value,i=new At(t.environment.rotation.x,t.environment.rotation.y,t.environment.rotation.z),o=new st().makeRotationFromEuler(i);e.setFromMatrix4(o),a.uniforms.uEnvMapIntensity.value=t.environment.intensity}}function ii(a,t){a.uniforms.uTransmissionSamplerSize.value.set(t.image.width,t.image.height),a.uniforms.tTransmissionSamplerMap.value=t}function gn(a,t,e){if("transmission"in t){const i=a.addFolder({title:"Transmission",expanded:!1});C.addInputs(i,t.transmission,e,{thickness:{label:"Thickness",step:.01},ior:{label:"Ior",step:.001},blur:{label:"Blur",step:.1},attenuationColor:{label:"Attenuation Color"},attenuationDistance:{label:"Attenuation Distance",step:.001}},{className:"config"})}if("environment"in t){const i=a.addFolder({title:"Environment",expanded:!1});C.addInputs(i,t.environment,e,{intensity:{label:"Intensity",step:.01},rotation:{label:"Rotation",x:{step:.01,min:-Math.PI/2,max:Math.PI/2},y:{step:.01,min:-Math.PI/2,max:Math.PI/2},z:{step:.01,min:-Math.PI/2,max:Math.PI/2}}},{className:"config"})}}const Qs=`#define GLSLIFY 1
uniform vec3 uColor;uniform float uOpacity;uniform sampler2D tMap;varying vec2 vUv;varying vec3 vNormal;const float uFresnelPower=2.;const float uFresnelIntensity=2.;void main(){vec3 color=uColor;color*=texture2D(tMap,vUv).rgb;float fresnel=dot(normalize(vNormal),vec3(0.,0.,1.));fresnel=clamp(pow(1.-fresnel,uFresnelPower)*uFresnelIntensity,0.,1.);gl_FragColor=vec4(color,uOpacity*(1.-fresnel));}`,Js=w(Qs,"fragmentShader"),el=`#define GLSLIFY 1
varying vec2 vUv;varying vec3 vNormal;void main(){vNormal=normalMatrix*normal;vUv=uv;gl_Position=projectionMatrix*modelViewMatrix*vec4(position,1.0);}`,tl=w(el,"vertexShader");class il extends le{constructor(e){super();l(this,"_config");l(this,"_view");l(this,"_mesh");l(this,"_debug");W(this),this._config=e.config,this._view=e.view,this._mesh=this._createMesh(),this._debug=this._createDebug(e.debugContainer),this._onConfigUpdated()}setVisibility(e){this._mesh.userData.renderTransmission=e}_createMesh(){const e=M.get("embryo-albedo");e.flipY=!1;const o=M.get("proto/transmission-material/embryo").scene.children[0],n=new Y({transparent:!0,depthWrite:!1,uniforms:{uColor:{value:new V},uOpacity:{value:1},tMap:{value:e}}});Js.use(n),tl.use(n);const r=new te(o.geometry,n);return r.renderOrder=100,r.scale.setScalar(this._config.size),r.userData.renderTransmission=!0,r.visible=!1,this.add(r),r}update({delta:e,time:i}){this._view._components.egg._mesh.getWorldPosition(this.position)}updateTransitionProgress(e){this._mesh.material.uniforms.uOpacity.value=Lt(1,0,on.inSine(e))}_onConfigUpdated(){this._mesh.material.uniforms.uColor.value.set(this._config.color),this._mesh.scale.setScalar(this._config.size)}_createDebug(e){if(!T)return;const i=T.addFolder({title:"Embryo",parent:e});return i.addInput(this._mesh.userData,"renderTransmission",{label:"Render"}),C.addInputs(i,this._config,this._onConfigUpdated,{color:{label:"Color"},size:{label:"Size",step:.01}},{className:"config"}),i}}const ol=`#define GLSLIFY 1
uniform mat3 normalMatrix;uniform sampler2D tNoise;uniform float uTime;uniform float uTransitionProgress;varying vec3 vNormal;varying vec3 vPosition;void main(){float faceDirection=gl_FrontFacing ? 1.0 :-1.0;vec3 normal=vNormal*faceDirection;float fade=dot(normalMatrix*normal,vec3(0.,0.,1.));fade=smoothstep(0.6,1.3,fade);float positionMax=1.3+smoothstep(1.,0.9,fade)*0.5;positionMax*=mix(0.5,1.1,uTransitionProgress);fade*=pow(smoothstep(positionMax,0.,length(vPosition)),10.);vec2 noiseUv=(normalMatrix*vPosition).rg;noiseUv*=NOISE_SCALE;vec4 noise=texture2D(tNoise,noiseUv);fade*=noise.r;vec3 color=mix(COLOR_1,COLOR_2,smoothstep(0.,1.,noise.b));vec3 colorCenter=vec3(0.82,0.42,0.16);color=mix(color,colorCenter,smoothstep(0.4+0.4*uTransitionProgress,0.3,length(vPosition)));color*=step(0.32,length(vPosition));color+=step(length(vPosition),0.25)*pow(uTransitionProgress,4.)*0.6*colorCenter;gl_FragColor=vec4(vec3(fade*color),1.);}`,nl=w(ol,"fragmentShader"),al=`#define GLSLIFY 1
varying vec3 vNormal;varying vec3 vPosition;void main(){vNormal=normal;vPosition=position;vec4 mvPosition=modelViewMatrix*vec4(position,1.0);gl_Position=projectionMatrix*mvPosition;}`,rl=w(al,"vertexShader");class sl extends le{constructor(e){super();l(this,"_config");l(this,"_mesh");l(this,"_view");this._config=e.config,this._view=e.view,this._mesh=this._createMesh(),this._onConfigUpdated()}_createMesh(){const e=M.get("noise");e.wrapS=e.wrapT=Z;const o=M.get("egg-explosion").scene.children[0].geometry,n=new Y({uniforms:{tNoise:{value:e},uTime:{value:0},uTransitionProgress:{value:0}},defines:{COLOR_1:"",COLOR_2:"",NOISE_SCALE:""},blending:Ve,side:dt,depthWrite:!1});nl.use(n),rl.use(n);const r=new te(o,n);return r.userData.renderBloom=!0,this.add(r),r}update({delta:e,time:i}){this._view._components.egg._mesh.getWorldPosition(this.position),this._mesh.material.uniforms.uTime.value=i}updateTransitionProgress(e){this._mesh.visible=e>.01&&e<.999,this._mesh.material.uniforms.uTransitionProgress.value=on.inOutSine(e)}_onConfigUpdated(){De(this._mesh.material,{COLOR_1:this._config.flareColor1,COLOR_2:this._config.flareColor2,NOISE_SCALE:this._config.noiseScale},{precision:3,warn:ne.isDevelopment})}}const ll=`#define GLSLIFY 1
uniform vec3 diffuse;uniform float opacity;uniform float uIntensity;uniform float uTime;uniform float uMenu;uniform sampler2D tNoise;uniform float uNoiseSpeed;uniform float uNoiseScale;uniform float uNoiseIntensity;uniform vec2 uNoiseRange;uniform vec3 uColor2;uniform float uColorMix;float textureNoise3D(sampler2D noiseTexture,vec2 uv,float time){vec2 uvNoise=uv+time*0.007;vec2 uvNoise2=uv-time*0.007;vec3 noise=texture2D(noiseTexture,uvNoise).rgb;vec3 noise2=texture2D(noiseTexture,uvNoise2).rgb;vec3 colorDot=vec3(sin(vec3(time,time+1.047,time+2.094)));float colorAvg=(abs(colorDot.r)+abs(colorDot.g)+abs(colorDot.b))/3.;colorDot/=colorAvg;noise=(noise+noise2)/2.;return dot(normalize(noise-0.5),colorDot);}float cremap(float value,float start1,float stop1,float start2,float stop2){float r=start2+(stop2-start2)*((value-start1)/(stop1-start1));return clamp(r,min(start2,stop2),max(start2,stop2));}
#include <common>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <fog_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main(){vec4 diffuseColor=vec4(diffuse,opacity);
#include <clipping_planes_fragment>
vec3 outgoingLight=vec3(0.0);
#include <logdepthbuf_fragment>
vec4 sampledDiffuseColor=texture2D(map,vMapUv);vec3 luma=vec3(0.299,0.587,0.114);float v=dot(sampledDiffuseColor.xyz,luma);float noise=textureNoise3D(tNoise,vMapUv/uNoiseScale,uTime*uNoiseSpeed*(1.+uMenu*1.5));noise=cremap(noise,uNoiseRange.x,uNoiseRange.y,0.,uNoiseIntensity);float k=saturate(v-noise);diffuseColor.rgb=mix(uColor2,vec3(diffuse),pow(k,uColorMix)*(1.+uMenu*0.2));diffuseColor.rgb*=k;diffuseColor.rgb*=uIntensity;
#include <alphamap_fragment>
#include <alphatest_fragment>
#include <alphahash_fragment>
outgoingLight=diffuseColor.rgb;
#include <opaque_fragment>
#include <tonemapping_fragment>
#include <colorspace_fragment>
#include <fog_fragment>
}`,cl=w(ll,"fragmentShader");class ul extends le{constructor(e){super();l(this,"_spriteUniforms");l(this,"_config");l(this,"_view");l(this,"_debug");l(this,"_sprite");W(this),this._config=e.config,this._view=e.view,this._spriteUniforms=this._createSpriteUniforms(),this._sprite=this._createSprite(),this._debug=this._createDebug(e.debugContainer),this._onConfigUpdated()}setVisibility(e){this._sprite.userData.renderTransmission=e}_createSpriteUniforms(){const e=M.get("noise");return e.wrapS=e.wrapT=Z,{uIntensity:{value:this._config.intensity},uTime:{value:0},tNoise:{value:e},uNoiseSpeed:{value:0},uNoiseScale:{value:0},uNoiseIntensity:{value:0},uNoiseRange:{value:new I},uColor2:{value:new V},uColorMix:{value:0},uMenu:this._view._composer.passes.final.uniforms.uMenu}}_createSprite(){const e=new Di({map:M.get("glow-sprite"),color:this._config.color,sizeAttenuation:!0,depthWrite:!1,blending:Ve}),i=new Ri(e);return e.onBeforeCompile=o=>{o.fragmentShader=cl.shader,Object.assign(o.uniforms,this._spriteUniforms)},i.scale.setScalar(.6),i.userData.renderBloom=!1,i.userData.renderTransmission=!0,i.visible=!1,this.add(i),i}update({delta:e,time:i}){this._view._components.egg._mesh.getWorldPosition(this.position),this.position.y+=this._config.offset,this._spriteUniforms.uTime.value=i}updateTransitionProgress(e){this.scale.setScalar(this._config.size)}_onConfigUpdated(){this._sprite.material.color.set(this._config.color),this._spriteUniforms.uColor2.value.set(this._config.color2),this._spriteUniforms.uColorMix.value=this._config.colorMix,this._spriteUniforms.uIntensity.value=this._config.intensity,this._spriteUniforms.uNoiseSpeed.value=this._config.noise.speed,this._spriteUniforms.uNoiseScale.value=this._config.noise.scale,this._spriteUniforms.uNoiseIntensity.value=this._config.noise.intensity,this._spriteUniforms.uNoiseRange.value.set(this._config.noise.range.min,this._config.noise.range.max)}_createDebug(e){if(!T)return;const i=T.addFolder({title:"Inner Glow",parent:e});i.addInput(this._sprite.userData,"renderTransmission",{label:"Render"}),C.addInputs(i,this._config,this._onConfigUpdated,{color:{label:"Color"},color2:{label:"Color 2"},colorMix:{label:"Color mix",step:.1},offset:{label:"Offset",step:.001},intensity:{label:"Intensity",step:.01},size:{label:"Size",step:.001},noise:!1},{className:"config"});const o=i.addFolder({title:"Noise",expanded:!0});return C.addInputs(o,this._config.noise,this._onConfigUpdated,{speed:{label:"Speed",step:.01},scale:{label:"Scale",step:.01},intensity:{label:"Intensity",step:.01},range:{label:"Range",step:.1,min:-5,max:5}},{className:"config"}),i}}const ml=`#define GLSLIFY 1
varying vec2 vUv;float cremap(float value,float start1,float stop1,float start2,float stop2){float r=start2+(stop2-start2)*((value-start1)/(stop1-start1));return clamp(r,min(start2,stop2),max(start2,stop2));}float hash12(vec2 p){vec3 p3=fract(vec3(p.xyx)*0.1031);p3+=dot(p3,p3.yzx+33.33);return fract((p3.x+p3.y)*p3.z);}float sdEgg(in vec2 p,float a,in float b,in float h){p.x=abs(p.x);float r=(a-b);h+=r;float l=(h*h-r*r)/(2.*r);return((p.y<=0.)? length(p)-a :((p.y-h)*l>p.x*h)? length(p-vec2(0.,h))-((a+l)-length(vec2(h,l))):length(p+vec2(l,0.))-(a+l));}void main(){vec2 uv=vUv;float a=sdEgg((uv-0.5)*SCALE+vec2(0.,HEIGHT/2.),DIAMETER_1,DIAMETER_2,HEIGHT);a+=hash12(vUv*1000.)*0.02;vec4 color=COLOR;color.a*=pow(cremap(a-SHRINK,0.,FALLOFF,1.,0.),FALLOFF_POWER);gl_FragColor=color;}`,dl=w(ml,"fragmentShader"),vl=`#define GLSLIFY 1
varying vec2 vUv;mat4 billboardMatrix(mat4 inMat4){mat4 outMat4=inMat4;outMat4[0][0]=1.0;outMat4[0][1]=0.0;outMat4[0][2]=0.0;outMat4[1][0]=0.0;outMat4[1][1]=1.0;outMat4[1][2]=0.0;outMat4[2][0]=0.0;outMat4[2][1]=0.0;outMat4[2][2]=1.0;return outMat4;}void main(){vUv=uv;vec4 mvPosition=billboardMatrix(modelViewMatrix)*vec4(position*SCALE,1.);gl_Position=projectionMatrix*mvPosition;}`,fl=w(vl,"vertexShader");class hl extends le{constructor(e){super();l(this,"_config");l(this,"_view");l(this,"_mesh");l(this,"_debug");W(this),this._config=e.config,this._view=e.view,this._mesh=this._createMesh(),this._debug=this._createDebug(e.debugContainer),this._onConfigUpdated()}_createMesh(){const e=new Ii(1,1),i=new Y({uniforms:{},defines:{DIAMETER_1:"",DIAMETER_2:"",HEIGHT:"",FALLOFF:"",FALLOFF_POWER:"",SCALE:"",COLOR:"",SHRINK:""},transparent:!0,depthWrite:!1,blending:Ve});dl.use(i),fl.use(i);const o=new te(e,i);return o.userData.renderBloom=!0,this.add(o),o}update({delta:e,time:i}){this._view._components.egg._mesh.getWorldPosition(this.position),this.position.y+=this._config.offset}setVisibility(e){this._mesh.visible=e}_onConfigUpdated(){De(this._mesh.material,{DIAMETER_1:this._config.size.x,DIAMETER_2:this._config.size.y,HEIGHT:this._config.size.z,SCALE:this._config.scale,FALLOFF:this._config.falloff,FALLOFF_POWER:this._config.falloffPower,COLOR:this._config.color,SHRINK:this._config.shrink},{precision:3,warn:ne.isProduction})}_createDebug(e){if(!T)return;const i=T.addFolder({title:"Back Glow",parent:e});return C.addInputs(i,this._config,this._onConfigUpdated,{size:{label:"Size",x:{min:0,max:.5,step:.001},y:{min:0,max:.5,step:.001},z:{min:0,max:.5,step:.001}},offset:{label:"Offset",min:-.5,max:.5,step:.001},scale:{label:"Scale",min:0,max:2,step:.01},falloff:{label:"Falloff",step:.001,min:0,max:1},color:{label:"Color"},falloffPower:{label:"Falloff Power",step:.01},shrink:{label:"Shrink",step:.01}},{className:"config"}),i}}const gl=`#define GLSLIFY 1
varying vec2 vUv;varying vec3 vNormal;
#ifdef USE_NORMALMAP
varying vec3 vBitangent;varying vec3 vTangent;
#endif
varying vec3 vModelPosition;varying vec3 vWorldPosition;uniform mat4 modelMatrix;uniform mat4 projectionMatrix;uniform sampler2D tNormalMap;uniform sampler2D tAoMap;uniform vec2 uTransmissionSamplerSize;uniform sampler2D tTransmissionSamplerMap;uniform float uTime;uniform float uTransitionProgress;uniform sampler2D tNoise;vec3 packNormalToRGB(const in vec3 normal){return normalize(normal)*0.5+0.5;}float remap(float value,float start1,float stop1,float start2,float stop2){return start2+(stop2-start2)*((value-start1)/(stop1-start1));}
#ifndef HALF_PI
#define HALF_PI 1.5707963267948966
#endif
float sineIn(float t){return sin((t-1.0)*HALF_PI)+1.0;}vec3 getVolumeTransmissionRay(vec3 n,vec3 v,float thickness,float ior,mat4 modelMatrix){vec3 refractionVector=refract(-v,normalize(n),1.0/ior);vec3 modelScale;modelScale.x=length(vec3(modelMatrix[0].xyz));modelScale.y=length(vec3(modelMatrix[1].xyz));modelScale.z=length(vec3(modelMatrix[2].xyz));return normalize(refractionVector)*thickness*modelScale;}float applyIorToRoughness(float roughness,float ior){return roughness*clamp(ior*2.0-2.0,0.0,1.0);}vec4 getTransmissionSample(vec2 fragCoord,float roughness,float ior,float blur){float framebufferLod=log2(uTransmissionSamplerSize.x)*applyIorToRoughness(roughness,ior)*blur;
#ifdef TEXTURE_LOD_EXT
return texture2DLodEXT(tTransmissionSamplerMap,fragCoord.xy,framebufferLod);
#else
return texture2D(tTransmissionSamplerMap,fragCoord.xy,framebufferLod);
#endif
}vec3 applyVolumeAttenuation(vec3 radiance,float transmissionDistance,vec3 attenuationColor,float attenuationDistance){if(attenuationDistance==0.0){return radiance;}else{vec3 attenuationCoefficient=-log(attenuationColor)/attenuationDistance;vec3 transmittance=exp(-attenuationCoefficient*transmissionDistance);return transmittance*radiance;}}vec4 getTransmission(const in vec3 n,const in vec3 v,const in float roughness,const in vec3 diffuseColor,const in vec3 position,const in mat4 modelMatrix,const in mat4 viewMatrix,const in mat4 projMatrix,const in float ior,const in float blur,const in float thickness,const in vec3 attenuationColor,const in float attenuationDistance){vec3 transmissionRay=getVolumeTransmissionRay(n,v,thickness,ior,modelMatrix);vec3 refractedRayExit=position+transmissionRay;vec4 ndcPos=projMatrix*viewMatrix*vec4(refractedRayExit,1.0);vec2 refractionCoords=ndcPos.xy/ndcPos.w;refractionCoords+=1.0;refractionCoords/=2.0;vec4 transmittedLight=getTransmissionSample(refractionCoords,roughness,ior,blur);vec3 attenuatedColor=applyVolumeAttenuation(transmittedLight.rgb,length(transmissionRay),attenuationColor,attenuationDistance);return vec4(attenuatedColor*diffuseColor,transmittedLight.a);}vec4 biplanarMapping_0(sampler2D sam,in vec3 p,in vec3 n,in float k){vec3 dpdx=dFdx(p);vec3 dpdy=dFdy(p);n=abs(n);ivec3 ma=(n.x>n.y&&n.x>n.z)? ivec3(0,1,2):(n.y>n.z)? ivec3(1,2,0):ivec3(2,0,1);ivec3 mi_0=(n.x<n.y&&n.x<n.z)? ivec3(0,1,2):(n.y<n.z)? ivec3(1,2,0):ivec3(2,0,1);ivec3 me_0=ivec3(3)-mi_0-ma;vec4 x=textureGrad(sam,vec2(p[ma.y],p[ma.z]),vec2(dpdx[ma.y],dpdx[ma.z]),vec2(dpdy[ma.y],dpdy[ma.z]));vec4 y=textureGrad(sam,vec2(p[me_0.y],p[me_0.z]),vec2(dpdx[me_0.y],dpdx[me_0.z]),vec2(dpdy[me_0.y],dpdy[me_0.z]));vec2 w=vec2(n[ma.x],n[me_0.x]);w=clamp((w-0.5773)/(1.0-0.5773),0.0,1.0);w=pow(w,vec2(k/8.0));return(x*w.x+y*w.y)/(w.x+w.y);}float exponentialInOut(float t){return t==0.0||t==1.0? t: t<0.5?+0.5*pow(2.0,(20.0*t)-10.0):-0.5*pow(2.0,10.0-(t*20.0))+1.0;}float getEggFresnel(float fresnelPower,float fresnelIntensity,sampler2D noiseTexture,float noiseTime,float noiseSize,vec3 modelPosition,vec3 modelNormal,vec3 worldNormal,vec3 worldCameraDirection){vec3 noiseOffset=vec3(sin(noiseTime*0.3),cos(noiseTime*0.235),sin(-noiseTime*0.424))*0.1;vec3 noise=biplanarMapping_0(noiseTexture,(modelPosition+noiseOffset)/noiseSize,modelNormal,8.).rgb;float fresnel=dot(worldCameraDirection,worldNormal);fresnel=pow(1.-fresnel,fresnelPower)*fresnelIntensity;return fresnel*exponentialInOut(noise.r);}vec4 biplanarMapping_1(sampler2D sam,in vec3 p,in vec3 n,in float k){vec3 dpdx=dFdx(p);vec3 dpdy=dFdy(p);n=abs(n);ivec3 ma=(n.x>n.y&&n.x>n.z)? ivec3(0,1,2):(n.y>n.z)? ivec3(1,2,0):ivec3(2,0,1);ivec3 mi_1=(n.x<n.y&&n.x<n.z)? ivec3(0,1,2):(n.y<n.z)? ivec3(1,2,0):ivec3(2,0,1);ivec3 me_1=ivec3(3)-mi_1-ma;vec4 x=textureGrad(sam,vec2(p[ma.y],p[ma.z]),vec2(dpdx[ma.y],dpdx[ma.z]),vec2(dpdy[ma.y],dpdy[ma.z]));vec4 y=textureGrad(sam,vec2(p[me_1.y],p[me_1.z]),vec2(dpdx[me_1.y],dpdx[me_1.z]),vec2(dpdy[me_1.y],dpdy[me_1.z]));vec2 w=vec2(n[ma.x],n[me_1.x]);w=clamp((w-0.5773)/(1.0-0.5773),0.0,1.0);w=pow(w,vec2(k/8.0));return(x*w.x+y*w.y)/(w.x+w.y);}vec3 hsv2rgb(vec3 c){vec4 K=vec4(1.0,2.0/3.0,1.0/3.0,3.0);vec3 p=abs(fract(c.xxx+K.xyz)*6.0-K.www);return c.z*mix(K.xxx,clamp(p-K.xxx,0.0,1.0),c.y);}vec3 rgb2hsv(vec3 c){vec4 K=vec4(0.0,-1.0/3.0,2.0/3.0,-1.0);vec4 p=mix(vec4(c.bg,K.wz),vec4(c.gb,K.xy),step(c.b,c.g));vec4 q=mix(vec4(p.xyw,c.r),vec4(c.r,p.yzx),step(p.x,c.r));float d=q.x-min(q.w,q.y);float e=1.0e-10;return vec3(abs(q.z+(q.w-q.y)/(6.0*d+e)),d/(q.x+e),q.x);}void main(){mat3 modelMatrixRotation=mat3(modelMatrix);vec2 uv=vUv;vec2 wrapUv=(uv+NORMAL_OFFSET)*NORMAL_SCALE;
#ifdef USE_NORMALMAP
mat3 tbn=mat3(normalize(vTangent),normalize(vBitangent),vNormal);vec3 biplanarNormal=biplanarMapping_1(tNormalMap,(vModelPosition*0.5*NORMAL_OFFSET.x)*NORMAL_SCALE.x,vNormal,8.).xyz*2.0-1.0;vec3 normalColor=biplanarNormal;normalColor.xy*=NORMAL_STRENGTH;vec3 modelNormal=normalize(tbn*normalColor);
#else
vec3 modelNormal=vNormal;
#endif
vec3 worldNormal=modelMatrixRotation*modelNormal;vec3 worldCameraDirection=normalize(vec3(cameraPosition-vWorldPosition));float ao=mix(2.,0.,texture2D(tAoMap,wrapUv).r);vec3 worldDefaultNormal=modelMatrixRotation*vNormal;float fresnel=getEggFresnel(FRESNEL_POWER,FRESNEL_INTENSITY,tNoise,uTime*FRESNEL_NOISE_SPEED,FRESNEL_NOISE_SIZE,vModelPosition,vNormal,worldDefaultNormal,worldCameraDirection)*ao;vec3 fresnelColor=fresnel*FRESNEL_COLOR*BLOOM_FRESNEL_INTENSITY;vec4 transmission=getTransmission(worldNormal,worldCameraDirection,ROUGHNESS,DIFFUSE_COLOR,vWorldPosition,modelMatrix,viewMatrix,projectionMatrix,TRANSMISSION_IOR,TRANSMISSION_BLUR,TRANSMISSION_THICKNESS,TRANSMISSION_ATTENUATION_COLOR,TRANSMISSION_ATTENUATION_DISTANCE);vec4 color=transmission;vec3 luma=vec3(0.299,0.587,0.114);float v=dot(color.xyz,luma);float lumaMask=smoothstep(BLOOM_LUMA_CLAMPING.x,BLOOM_LUMA_CLAMPING.y,v);color.rgb*=lumaMask*BLOOM_TRANSMISSION_INTENSITY;vec3 transitionColor=color.rgb;transitionColor.rgb=rgb2hsv(transitionColor.rgb);transitionColor.g-=0.9;transitionColor.b*=0.8;transitionColor.rgb=hsv2rgb(transitionColor.rgb);color.rgb=mix(color.rgb,transitionColor,uTransitionProgress);color.rgb+=fresnelColor;vec3 centerToPos=normalize(vec3(0.,0.,0.)-vModelPosition);float light=clamp(dot(centerToPos,modelNormal),0.,1.);color.rgb+=EXPLOSION_COLOR*((1.-pow(uTransitionProgress,3.))*1.)*light;gl_FragColor=vec4(color.rgb,1.);
#ifdef DEBUG
#if DEBUG == 1
gl_FragColor=vec4(packNormalToRGB(worldNormal),1.);
#elif DEBUG == 2
gl_FragColor=vec4(fresnel*FRESNEL_COLOR,1.);
#elif DEBUG == 3
gl_FragColor=vec4(transmission.rgb,1.);
#elif DEBUG == 4
gl_FragColor=vec4(vec3(ao),1.);
#elif DEBUG == 5
gl_FragColor=vec4(vec3(lumaMask),1.);
#endif
#endif
}`,pl=w(gl,"fragmentShader"),_l=`#define GLSLIFY 1
varying vec2 vUv;varying vec3 vNormal;
#ifdef USE_NORMALMAP
varying vec3 vBitangent;varying vec3 vTangent;
#endif
varying vec3 vWorldPosition;varying vec3 vModelPosition;varying vec3 vViewPosition;uniform mat3 normalMatrix;uniform mat4 modelMatrix;uniform mat4 projectionMatrix;uniform sampler2D tNormalMap;uniform sampler2D tAoMap;uniform float uEnvMapIntensity;uniform mat3 uEnvMapRotation;uniform sampler2D tEnvMap;uniform vec2 uTransmissionSamplerSize;uniform sampler2D tTransmissionSamplerMap;uniform float uTime;uniform sampler2D tNoise;uniform float uMenu;vec3 packNormalToRGB(const in vec3 normal){return normalize(normal)*0.5+0.5;}vec3 inverseTransformDirection(in vec3 dir,in mat4 matrix){return normalize((vec4(dir,0.0)*matrix).xyz);}
#ifndef saturate
#define saturate( a ) clamp( a, 0.0, 1.0 )
#endif
#include <cube_uv_reflection_fragment>
#define USE_ENVMAP
#define ENVMAP_TYPE_CUBE_UV
#include <cube_uv_reflection_fragment>
vec3 getEnvColor(const in vec3 viewDir,const in vec3 normal,const in float roughness){
#ifdef ENVMAP_TYPE_CUBE_UV
vec3 reflectVec=reflect(-viewDir,normal);reflectVec=normalize(mix(reflectVec,normal,roughness*roughness));reflectVec=inverseTransformDirection(reflectVec,viewMatrix);vec4 envMapColor=textureCubeUV(tEnvMap,uEnvMapRotation*reflectVec,roughness);return envMapColor.rgb*uEnvMapIntensity;
#else
return vec3(0.0);
#endif
}vec3 getVolumeTransmissionRay(vec3 n,vec3 v,float thickness,float ior,mat4 modelMatrix){vec3 refractionVector=refract(-v,normalize(n),1.0/ior);vec3 modelScale;modelScale.x=length(vec3(modelMatrix[0].xyz));modelScale.y=length(vec3(modelMatrix[1].xyz));modelScale.z=length(vec3(modelMatrix[2].xyz));return normalize(refractionVector)*thickness*modelScale;}float applyIorToRoughness(float roughness,float ior){return roughness*clamp(ior*2.0-2.0,0.0,1.0);}vec4 getTransmissionSample(vec2 fragCoord,float roughness,float ior,float blur){float framebufferLod=log2(uTransmissionSamplerSize.x)*applyIorToRoughness(roughness,ior)*blur;
#ifdef TEXTURE_LOD_EXT
return texture2DLodEXT(tTransmissionSamplerMap,fragCoord.xy,framebufferLod);
#else
return texture2D(tTransmissionSamplerMap,fragCoord.xy,framebufferLod);
#endif
}vec3 applyVolumeAttenuation(vec3 radiance,float transmissionDistance,vec3 attenuationColor,float attenuationDistance){if(attenuationDistance==0.0){return radiance;}else{vec3 attenuationCoefficient=-log(attenuationColor)/attenuationDistance;vec3 transmittance=exp(-attenuationCoefficient*transmissionDistance);return transmittance*radiance;}}vec4 getTransmission(const in vec3 n,const in vec3 v,const in float roughness,const in vec3 diffuseColor,const in vec3 position,const in mat4 modelMatrix,const in mat4 viewMatrix,const in mat4 projMatrix,const in float ior,const in float blur,const in float thickness,const in vec3 attenuationColor,const in float attenuationDistance){vec3 transmissionRay=getVolumeTransmissionRay(n,v,thickness,ior,modelMatrix);vec3 refractedRayExit=position+transmissionRay;vec4 ndcPos=projMatrix*viewMatrix*vec4(refractedRayExit,1.0);vec2 refractionCoords=ndcPos.xy/ndcPos.w;refractionCoords+=1.0;refractionCoords/=2.0;vec4 transmittedLight=getTransmissionSample(refractionCoords,roughness,ior,blur);vec3 attenuatedColor=applyVolumeAttenuation(transmittedLight.rgb,length(transmissionRay),attenuationColor,attenuationDistance);return vec4(attenuatedColor*diffuseColor,transmittedLight.a);}vec2 DFGApprox(const in vec3 normal,const in vec3 viewDir,const in float roughness){float dotNV=saturate(dot(normal,viewDir));const vec4 c0=vec4(-1,-0.0275,-0.572,0.022);const vec4 c1=vec4(1,0.0425,1.04,-0.04);vec4 r=roughness*c0+c1;float a004=min(r.x*r.x,exp2(-9.28*dotNV))*r.x+r.y;vec2 fab=vec2(-1.04,1.04)*a004+r.zw;return fab;}vec3 EnvironmentBRDF(const in vec3 normal,const in vec3 viewDir,const in vec3 specularColor,const in float specularF90,const in float roughness){vec2 fab=DFGApprox(normal,viewDir,roughness);return specularColor*fab.x+specularF90*fab.y;}vec4 blendTransmissionAndSpecular(const in vec3 normal,const in vec3 viewDir,const in vec3 specularColor,const in vec4 transmissionColor,const in float specularF90,const in float roughness){vec3 F=EnvironmentBRDF(normal,viewDir,specularColor,specularF90,roughness);return vec4(mix(transmissionColor.rgb,specularColor,saturate(length(F)/1.4)),transmissionColor.a);}vec4 biplanarMapping_0(sampler2D sam,in vec3 p,in vec3 n,in float k){vec3 dpdx=dFdx(p);vec3 dpdy=dFdy(p);n=abs(n);ivec3 ma=(n.x>n.y&&n.x>n.z)? ivec3(0,1,2):(n.y>n.z)? ivec3(1,2,0):ivec3(2,0,1);ivec3 mi_0=(n.x<n.y&&n.x<n.z)? ivec3(0,1,2):(n.y<n.z)? ivec3(1,2,0):ivec3(2,0,1);ivec3 me_0=ivec3(3)-mi_0-ma;vec4 x=textureGrad(sam,vec2(p[ma.y],p[ma.z]),vec2(dpdx[ma.y],dpdx[ma.z]),vec2(dpdy[ma.y],dpdy[ma.z]));vec4 y=textureGrad(sam,vec2(p[me_0.y],p[me_0.z]),vec2(dpdx[me_0.y],dpdx[me_0.z]),vec2(dpdy[me_0.y],dpdy[me_0.z]));vec2 w=vec2(n[ma.x],n[me_0.x]);w=clamp((w-0.5773)/(1.0-0.5773),0.0,1.0);w=pow(w,vec2(k/8.0));return(x*w.x+y*w.y)/(w.x+w.y);}float exponentialInOut(float t){return t==0.0||t==1.0? t: t<0.5?+0.5*pow(2.0,(20.0*t)-10.0):-0.5*pow(2.0,10.0-(t*20.0))+1.0;}float getEggFresnel(float fresnelPower,float fresnelIntensity,sampler2D noiseTexture,float noiseTime,float noiseSize,vec3 modelPosition,vec3 modelNormal,vec3 worldNormal,vec3 worldCameraDirection){vec3 noiseOffset=vec3(sin(noiseTime*0.3),cos(noiseTime*0.235),sin(-noiseTime*0.424))*0.1;vec3 noise=biplanarMapping_0(noiseTexture,(modelPosition+noiseOffset)/noiseSize,modelNormal,8.).rgb;float fresnel=dot(worldCameraDirection,worldNormal);fresnel=pow(1.-fresnel,fresnelPower)*fresnelIntensity;return fresnel*exponentialInOut(noise.r);}vec4 biplanarMapping_1(sampler2D sam,in vec3 p,in vec3 n,in float k){vec3 dpdx=dFdx(p);vec3 dpdy=dFdy(p);n=abs(n);ivec3 ma=(n.x>n.y&&n.x>n.z)? ivec3(0,1,2):(n.y>n.z)? ivec3(1,2,0):ivec3(2,0,1);ivec3 mi_1=(n.x<n.y&&n.x<n.z)? ivec3(0,1,2):(n.y<n.z)? ivec3(1,2,0):ivec3(2,0,1);ivec3 me_1=ivec3(3)-mi_1-ma;vec4 x=textureGrad(sam,vec2(p[ma.y],p[ma.z]),vec2(dpdx[ma.y],dpdx[ma.z]),vec2(dpdy[ma.y],dpdy[ma.z]));vec4 y=textureGrad(sam,vec2(p[me_1.y],p[me_1.z]),vec2(dpdx[me_1.y],dpdx[me_1.z]),vec2(dpdy[me_1.y],dpdy[me_1.z]));vec2 w=vec2(n[ma.x],n[me_1.x]);w=clamp((w-0.5773)/(1.0-0.5773),0.0,1.0);w=pow(w,vec2(k/8.0));return(x*w.x+y*w.y)/(w.x+w.y);}float cremap(float value,float start1,float stop1,float start2,float stop2){float r=start2+(stop2-start2)*((value-start1)/(stop1-start1));return clamp(r,min(start2,stop2),max(start2,stop2));}void main(){mat3 modelMatrixRotation=mat3(modelMatrix);vec2 normalScale=NORMAL_SCALE+mix(1.,8.,uMenu);vec2 uv=vUv;vec2 wrapUv=(uv+NORMAL_OFFSET)*normalScale;
#ifdef USE_NORMALMAP
mat3 tbn=mat3(normalize(vTangent),normalize(vBitangent),vNormal);vec3 biplanarNormal=biplanarMapping_1(tNormalMap,(vModelPosition*0.5*NORMAL_OFFSET.x)*normalScale.x,vNormal,8.).xyz*2.0-1.0;vec3 normalColor=biplanarNormal;normalColor.xy*=NORMAL_STRENGTH;vec3 modelNormal=normalize(tbn*normalColor);
#else
vec3 modelNormal=vNormal;
#endif
vec3 viewNormal=normalMatrix*modelNormal;vec3 worldNormal=modelMatrixRotation*modelNormal;vec3 worldCameraDirection=normalize(vec3(cameraPosition-vWorldPosition));vec3 viewCameraDirection=normalize(vViewPosition);float ao=mix(2.,0.,texture2D(tAoMap,wrapUv).r);vec3 worldDefaultNormal=modelMatrixRotation*vNormal;float fresnel=getEggFresnel(FRESNEL_POWER,FRESNEL_INTENSITY,tNoise,uTime*FRESNEL_NOISE_SPEED,FRESNEL_NOISE_SIZE,vModelPosition,vNormal,worldDefaultNormal,worldCameraDirection)*ao;vec3 fresnelColor=fresnel*FRESNEL_COLOR;vec3 envColor=getEnvColor(viewCameraDirection,viewNormal,ROUGHNESS);vec4 transmission=getTransmission(worldNormal,worldCameraDirection,ROUGHNESS,vec3(1.),vWorldPosition,modelMatrix,viewMatrix,projectionMatrix,TRANSMISSION_IOR,TRANSMISSION_BLUR,TRANSMISSION_THICKNESS,TRANSMISSION_ATTENUATION_COLOR,TRANSMISSION_ATTENUATION_DISTANCE);vec4 color=blendTransmissionAndSpecular(worldNormal,worldCameraDirection,envColor,transmission,SPECULAR,ROUGHNESS);color.rgb+=FRESNEL_COLOR*fresnelColor;vec3 centerToPos=normalize(vec3(0.,0.,0.)-vModelPosition);float light=clamp(dot(centerToPos,modelNormal),0.,1.);color.rgb=mix(color.rgb,vec3(0.),light);gl_FragColor=vec4(color.rgb,1.);
#ifdef DEBUG
#if DEBUG == 1
gl_FragColor=vec4(packNormalToRGB(viewNormal),1.);
#elif DEBUG == 2
gl_FragColor=vec4(envColor,1.);
#elif DEBUG == 3
gl_FragColor=vec4(fresnelColor,1.);
#elif DEBUG == 4
gl_FragColor=vec4(transmission.rgb,1.);
#elif DEBUG == 5
gl_FragColor=vec4(vec3(ao),1.);
#elif DEBUG == 6
gl_FragColor=vec4(vec3(uv,1.),1.);
#endif
#endif
}`,xl=w(_l,"fragmentShader"),bl=`#define GLSLIFY 1
attribute float _outside;attribute vec3 _center;varying vec2 vUv;varying vec3 vNormal;
#ifdef USE_NORMALMAP
varying vec3 vBitangent;varying vec3 vTangent;
#endif
varying vec3 vModelPosition;varying vec3 vWorldPosition;varying vec3 vViewPosition;uniform float uTime;uniform vec2 uCursor;uniform float uTransitionProgress;uniform sampler2D tNoise;uniform float uMenu;vec3 blendNormal(vec3 normal,float k){vec3 blend;blend.x=pow(abs(normal.x),k);blend.y=pow(abs(normal.y),k);blend.z=pow(abs(normal.z),k);blend/=dot(blend,vec3(1,1,1));return blend;}vec3 triplanarMapping(sampler2D tex,vec3 position_0,vec3 normal_0,float k_0){vec3 normalBlend=blendNormal(normal_0,k_0);vec3 xColor=texture2D(tex,position_0.yz).rgb;vec3 yColor=texture2D(tex,position_0.xz).rgb;vec3 zColor=texture2D(tex,position_0.xy).rgb;return(xColor*normalBlend.x+yColor*normalBlend.y+zColor*normalBlend.z);}
#ifndef PI
#define PI 3.141592653589793
#endif
float sineInOut(float t){return-0.5*(cos(PI*t)-1.0);}
#ifndef HALF_PI
#define HALF_PI 1.5707963267948966
#endif
float sineIn(float t){return sin((t-1.0)*HALF_PI)+1.0;}float hash13(vec3 p3){p3=fract(p3*0.1031);p3+=dot(p3,p3.zyx+31.32);return fract((p3.x+p3.y)*p3.z);}float remap(float value,float start1,float stop1,float start2,float stop2){return start2+(stop2-start2)*((value-start1)/(stop1-start1));}float cremap(float value,float start1,float stop1,float start2,float stop2){float r=start2+(stop2-start2)*((value-start1)/(stop1-start1));return clamp(r,min(start2,stop2),max(start2,stop2));}mat3 rotate3d(in vec3 axis,in float radians){axis=normalize(axis);float s=sin(radians);float c=cos(radians);float oc=1.0-c;return mat3(oc*axis.x*axis.x+c,oc*axis.x*axis.y-axis.z*s,oc*axis.z*axis.x+axis.y*s,oc*axis.x*axis.y+axis.z*s,oc*axis.y*axis.y+c,oc*axis.y*axis.z-axis.x*s,oc*axis.z*axis.x-axis.y*s,oc*axis.y*axis.z+axis.x*s,oc*axis.z*axis.z+c);}vec3 randomOrthogonalVector(vec3 n,float seed){vec3 u=vec3(n.y,-n.x,0.);vec3 v=cross(n,u);float theta=seed*3.1416*2.;vec3 w=cos(theta)*normalize(u)+sin(theta)*normalize(v);return w;}void main(){vec3 pieceCenter=_center*2.523884879381228;vec3 pieceNormal=normalize(_center);float seed1=hash13(_center-SEED);float seed2=hash13(_center+SEED);float seed3=hash13(_center+SEED*2.);float displacementNoiseSpeed=mix(DISPLACEMENT_NOISE_SPEED,1.,uMenu);float displacementIntensity=mix(DISPLACEMENT_INTENSITY,0.1,uMenu)*0.2857;float displacementNoiseSize=mix(DISPLACEMENT_NOISE_SIZE,4.5*0.,uMenu)*0.03;float noiseTime=uTime*displacementNoiseSpeed;vec3 noiseOffset=vec3(sin(noiseTime*0.3),cos(noiseTime*0.235),sin(-noiseTime*0.424))*0.1;vec3 noise=triplanarMapping(tNoise,(position+noiseOffset)/(displacementNoiseSize*10.),normal,8.).rgb;vec3 displacement=sineInOut(noise.g)*normal*step(0.9,dot(normalize(position),normal));displacementIntensity*=smoothstep(0.01,0.,uTransitionProgress);displacement*=displacementIntensity;float yDamp=cremap(dot(pieceNormal,vec3(0.,-1.,0.)),-0.5,1.,1.,0.3);float offsetStrength=remap(seed1,0.,1.,0.1,0.7)*yDamp;float explodeProgressOffset=remap(sineInOut(seed2),0.,1.,0.,1.5);float explodeProgress=sineIn(cremap(uTransitionProgress,explodeProgressOffset,explodeProgressOffset+1.,0.,1.));vec3 offset=pieceNormal*offsetStrength*explodeProgress;vec3 rotAxis=randomOrthogonalVector(pieceNormal,seed3);vec4 centerNDC=projectionMatrix*modelViewMatrix*vec4(_center+displacement+offset,1.);centerNDC/=centerNDC.w;float cursorDist=length(centerNDC.xy-uCursor);float angle=explodeProgress*(1.+smoothstep(0.,0.5,cursorDist)*0.3);angle+=uTransitionProgress*0.1;mat3 rotationMatrix=rotate3d(rotAxis,angle);vec3 pos=position;pos-=pieceCenter;pos=rotationMatrix*pos;pos+=pieceCenter;pos*=(1.-displacementIntensity*1.4)*mix(1.,1.5,uMenu);pos+=displacement;pos+=offset;vec4 worldPosition=modelMatrix*vec4(pos,1.0);vec4 mvPosition=viewMatrix*worldPosition;vNormal=normalize(rotationMatrix*normal.xyz);
#ifdef USE_NORMALMAP
vTangent=normalize(rotationMatrix*tangent.xyz);vBitangent=normalize(cross(vNormal,vTangent)*tangent.w);
#endif
vUv=uv;vModelPosition=position;vWorldPosition=worldPosition.xyz;vViewPosition=-mvPosition.xyz;gl_Position=projectionMatrix*mvPosition;}`,uo=w(bl,"vertexShader"),Et=new A;class yl extends le{constructor(e){super();l(this,"_config");l(this,"_material");l(this,"_bloomMaterial");l(this,"_mesh");l(this,"_transitionProgressObject");l(this,"_debug");l(this,"_view");l(this,"_name");l(this,"_gltf");l(this,"_backGlow");l(this,"_glow");l(this,"_embryo");l(this,"_explosion");l(this,"_basePositionY");l(this,"_projectedPoint",new A);W(this),this._config=e.config,this._view=e.view,this._name=e.name,this._gltf=e.gltf,this._transitionProgressObject=this._gltf.scene.getObjectByName("TRANSITION_EGG_EXPLOSION"),this._material=this._createMaterial(),this._bloomMaterial=this._createBloomMaterial(),this._mesh=this._createMesh({meshName:e.meshName}),this._debug=this._createDebug(e.debugContainer),this._glow=this._createGlow(),this._backGlow=this._createBackGlow(),this._explosion=this._createExplosion(),this._embryo=this._createEmbryo(),this._onConfigUpdated()}get projectedPoint(){return this._projectedPoint}setVisibility(e){this._mesh.visible=e&&this.visible,this._backGlow.setVisibility(e&&this.visible),this._embryo.setVisibility(e&&this.visible),this._glow.setVisibility(e&&this.visible)}setTransmission(e){ii(this._material,e),ii(this._bloomMaterial,e)}_createMaterial(){const e=M.get("egg/normal");e.colorSpace=ke,e.wrapS=e.wrapT=Z;const i=M.get("egg/ao");i.wrapS=i.wrapT=Z;const o=M.get("noise");o.wrapS=o.wrapT=Z;const n=new Y({uniforms:{tNormalMap:{value:e},tAoMap:{value:i},tNoise:{value:o},uTime:{value:0},uMenu:this._view._composer.passes.final.uniforms.uMenu,uTransitionProgress:{value:0},uCursor:{value:new I},...ei(this._view.scene.environment)},defines:{ROUGHNESS:"",SPECULAR:"",DIFFUSE_COLOR:"",NORMAL_SCALE:"",NORMAL_OFFSET:"",NORMAL_STRENGTH:"",FRESNEL_COLOR:"",FRESNEL_POWER:"",FRESNEL_INTENSITY:"",FRESNEL_NOISE_SIZE:"",FRESNEL_NOISE_SPEED:"",DISPLACEMENT_NOISE_SPEED:"",DISPLACEMENT_NOISE_SIZE:"",DISPLACEMENT_INTENSITY:"",SEED:"",USE_NORMALMAP:!!e,USE_TANGENT:!!e,TEXTURE_LOD_EXT:!0,DEBUG:0,...Jt(this._view.scene.environment)}});return xl.use(n),uo.use(n),n}_createBloomMaterial(){const e=M.get("egg/normal");e.colorSpace=ke,e.wrapS=e.wrapT=Z;const i=M.get("noise");i.wrapS=i.wrapT=Z;const o=M.get("egg/ao");o.wrapS=o.wrapT=Z;const n=new Y({uniforms:{tNormalMap:{value:e},tAoMap:{value:o},tNoise:{value:i},uTime:{value:0},uMenu:this._view._composer.passes.final.uniforms.uMenu,uTransitionProgress:{value:0},uCursor:{value:new I},...ei()},defines:{ROUGHNESS:"",SPECULAR:"",DIFFUSE_COLOR:"",NORMAL_SCALE:"",NORMAL_OFFSET:"",NORMAL_STRENGTH:"",FRESNEL_COLOR:"",FRESNEL_POWER:"",FRESNEL_INTENSITY:"",FRESNEL_NOISE_SIZE:"",FRESNEL_NOISE_SPEED:"",BLOOM_LUMA_CLAMPING:"",BLOOM_TRANSMISSION_INTENSITY:"",BLOOM_FRESNEL_INTENSITY:"",DISPLACEMENT_NOISE_SPEED:"",DISPLACEMENT_NOISE_SIZE:"",DISPLACEMENT_INTENSITY:"",USE_NORMALMAP:!!e,USE_TANGENT:!!e,TEXTURE_LOD_EXT:!0,DEBUG:0,EXPLOSION_COLOR:"",SEED:"",...Jt()}});return pl.use(n),uo.use(n),n}_createEmbryo(){const e=new il({config:this._config.embryo,debugContainer:this._debug,view:this._view});return this.add(e),e}_createGlow(){const e=new ul({config:this._config.glow,debugContainer:this._debug,view:this._view});return this.add(e),e}_createBackGlow(){const e=new hl({config:this._config.backGlow,debugContainer:this._debug,view:this._view});return this.add(e),e}_createExplosion(){const e=new sl({config:this._config.explosion,debugContainer:this._debug,view:this._view});return this.add(e),e}_createMesh({meshName:e}){const i=this._gltf.scene.getObjectByName(e);return i.geometry.computeTangents(),i.material=this._material,i.userData.renderBloom=!0,i.userData.bloomMaterial=this._bloomMaterial,this._basePositionY=i.position.y,i}update({delta:e,time:i}){const o=this._view._composer.passes.final.uniforms.uMenu.value;this._backGlow.update({delta:e,time:i}),this._glow.update({delta:e,time:i}),this._embryo.update({delta:e,time:i}),this._explosion.update({delta:e,time:i}),this._material.uniforms.uTime.value=i,this._bloomMaterial.uniforms.uTime.value=i,this.setVisibility(this._mesh.scale.x>.002);const n=this._transitionProgressObject.scale.x;this._material.uniforms.uTransitionProgress.value=n,this._bloomMaterial.uniforms.uTransitionProgress.value=n;const r=(Math.sin(i*.4)+1)*.05*(1-o);this._mesh.position.y=this._basePositionY+r*Ft(n,[0,.9],[1,0]);const s=i*.035*.3,c=i*.01*.3;this._mesh.rotation.z=o>.5?s:0,this._mesh.rotation.y=o>.5?c:0,this._embryo._mesh.rotation.z=o>.5?s:0,this._embryo._mesh.rotation.y=o>.5?c:0;const m=this._view.camera;this._projectedPoint.copy(this._mesh.position),this._projectedPoint.project(m),this._projectedPoint.z=0,Et.copy(this._mesh.position),Et.x+=.1,Et.project(m),Et.z=0,this._projectedPoint.z=this._projectedPoint.distanceTo(Et),n>.99&&(this._projectedPoint.x=1e3,this._projectedPoint.y=1e3);const f=rt.lerpedPosition;if(f){const v=vn(f.x,f.y);this._material.uniforms.uCursor.value.copy(v),this._bloomMaterial.uniforms.uCursor.value.copy(v)}this._glow.updateTransitionProgress(n),this._embryo.updateTransitionProgress(n),this._explosion.updateTransitionProgress(n)}_onConfigUpdated(){const e={ROUGHNESS:this._config.roughness,SPECULAR:this._config.specular,DIFFUSE_COLOR:this._config.diffuseColor,NORMAL_SCALE:this._config.normal.scale,NORMAL_OFFSET:this._config.normal.offset,NORMAL_STRENGTH:this._config.normal.strength,FRESNEL_COLOR:this._config.fresnel.color,FRESNEL_POWER:this._config.fresnel.power,FRESNEL_INTENSITY:this._config.fresnel.intensity,FRESNEL_NOISE_SIZE:this._config.fresnel.noise.size,FRESNEL_NOISE_SPEED:this._config.fresnel.noise.speed,DISPLACEMENT_NOISE_SPEED:this._config.displacement.noise.speed,DISPLACEMENT_NOISE_SIZE:this._config.displacement.noise.size,DISPLACEMENT_INTENSITY:this._config.displacement.intensity,SEED:this._config.seed};De(this._material,{...e},{precision:3,warn:ne.isProduction}),ti(this._material,this._config),De(this._bloomMaterial,{...e,BLOOM_LUMA_CLAMPING:this._config.bloom.lumaClamping,BLOOM_TRANSMISSION_INTENSITY:this._config.bloom.transmissionIntensity,BLOOM_FRESNEL_INTENSITY:this._config.bloom.fresnelIntensity,EXPLOSION_COLOR:this._config.explosion.insideColor},{precision:3,warn:ne.isProduction}),ti(this._bloomMaterial,this._config),this._embryo._onConfigUpdated(),this._explosion._onConfigUpdated()}_createDebug(e){if(!T)return;const i=T.addFolder({title:this._name,parent:e});i.addInput(this,"visible",{label:"Visible"}),i.addInput(this._material.defines,"DEBUG",{options:{NONE:0,NORMAL:1,ENV:2,FRESNEL:3,TRANSMISSION:4,AO:5,UV:6},label:"Debug"}).on("change",()=>{this._material.needsUpdate=!0}),i.addInput(this._material,"wireframe",{label:"Wireframe"}),i.addInput(this._bloomMaterial.defines,"DEBUG",{options:{NONE:0,NORMAL:1,FRESNEL:2,TRANSMISSION:3,AO:4,LUMA_MASK:5},label:"Bloom Debug"}).on("change",()=>{this._bloomMaterial.needsUpdate=!0}),C.addInputs(i,this._config,this._onConfigUpdated,{roughness:{label:"Roughness",step:.01},specular:{label:"Specular",step:.01},diffuseColor:{label:"Diffuse Color"},seed:{label:"Seed",step:1},backGlow:!1,explosion:!1,fresnel:!1,normal:!1,transmission:!1,environment:!1,glow:!1,embryo:!1,bloom:!1,displacement:!1},{className:"config"});const o=i.addFolder({title:"Normal",expanded:!1});C.addInputs(o,this._config.normal,this._onConfigUpdated,{offset:{label:"Offset",x:{step:.01},y:{step:.01}},scale:{label:"Scale",x:{step:.01},y:{step:.01}},strength:{label:"Strength",step:.01}},{className:"config"}),gn(i,this._config,this._onConfigUpdated);const n=i.addFolder({title:"Displacement",expanded:!1});C.addInputs(n,this._config.displacement,this._onConfigUpdated,{intensity:{label:"Intensity",step:.001},noise:!1},{className:"config"});const r=n.addFolder({title:"Noise",expanded:!0});C.addInputs(r,this._config.displacement.noise,this._onConfigUpdated,{size:{label:"Size",step:.1},speed:{label:"Speed",step:.01}},{className:"config"});const s=i.addFolder({title:"Fresnel",expanded:!1});C.addInputs(s,this._config.fresnel,this._onConfigUpdated,{power:{label:"Power",step:.01},intensity:{label:"Intensity",step:.01},color:{label:"Color"},noise:!1},{className:"config"});const c=s.addFolder({title:"Noise",expanded:!0});C.addInputs(c,this._config.fresnel.noise,this._onConfigUpdated,{size:{label:"Size",step:.01},speed:{label:"Speed",step:.01}},{className:"config"});const m=i.addFolder({title:"Explosion",expanded:!1});C.addInputs(m,this._config.explosion,this._onConfigUpdated,{insideColor:{label:"Inside Color"},noiseScale:{label:"Noise Scale",step:.01},flareColor1:{label:"Flare Color 1"},flareColor2:{label:"Flare Color 2"}},{className:"config"});const f=i.addFolder({title:"Bloom",expanded:!1});return C.addInputs(f,this._config.bloom,this._onConfigUpdated,{transmissionIntensity:{label:"Transmission Intensity",step:.01},fresnelIntensity:{label:"Fresnel Intensity",step:.01},lumaClamping:{label:"Luma Clamping",min:0,max:1,step:.01}},{className:"config"}),i}}function Sl(a){const t=[];for(const e in a){const i=a[e];i!==!1&&t.push("#define "+e+" "+i)}return`
`+t.join(`
`)+`
`}const Cl={NoBlending:Yo,NormalBlending:jo,AdditiveBlending:Ve,SubtractiveBlending:$o,MultiplyBlending:ta},ft=(a,t,e={})=>a.addInput(t,"blending",{label:"Blending",options:Cl,...e}),Tl=`#define GLSLIFY 1
#define USE_UV
uniform vec3 diffuse;uniform float opacity;uniform float uIntensity;uniform float uTime;uniform float uMaskDepth;uniform vec2 uResolution;uniform sampler2D tNoise;uniform sampler2D tCaustics;uniform sampler2D tDepth;varying float vZ;
#ifndef PI
#define PI 3.141592653589793
#endif
float sineInOut(float t){return-0.5*(cos(PI*t)-1.0);}float blendDarken(float base,float blend){return min(blend,base);}vec3 blendDarken(vec3 base,vec3 blend){return vec3(blendDarken(base.r,blend.r),blendDarken(base.g,blend.g),blendDarken(base.b,blend.b));}vec3 blendDarken(vec3 base,vec3 blend,float opacity){return(blendDarken(base,blend)*opacity+base*(1.0-opacity));}float textureNoise3D(sampler2D noiseTexture,vec2 uv,float time){vec2 uvNoise=uv+time*0.007;vec2 uvNoise2=uv-time*0.007;vec3 noise=texture2D(noiseTexture,uvNoise).rgb;vec3 noise2=texture2D(noiseTexture,uvNoise2).rgb;vec3 colorDot=vec3(sin(vec3(time,time+1.047,time+2.094)));float colorAvg=(abs(colorDot.r)+abs(colorDot.g)+abs(colorDot.b))/3.;colorDot/=colorAvg;noise=(noise+noise2)/2.;return dot(normalize(noise-0.5),colorDot);}float cremap(float value,float start1,float stop1,float start2,float stop2){float r=start2+(stop2-start2)*((value-start1)/(stop1-start1));return clamp(r,min(start2,stop2),max(start2,stop2));}vec3 ContrastSaturationBrightness(vec3 color,float brt,float sat,float con){const float AvgLumR=0.5;const float AvgLumG=0.5;const float AvgLumB=0.5;const vec3 LumCoeff=vec3(0.2125,0.7154,0.0721);vec3 AvgLumin=vec3(AvgLumR,AvgLumG,AvgLumB);vec3 brtColor=color*brt;vec3 intensity=vec3(dot(brtColor,LumCoeff));vec3 satColor=mix(intensity,brtColor,sat);vec3 conColor=mix(AvgLumin,satColor,con);return conColor;}
#include <packing>
float readDepth(sampler2D depthSampler,vec2 coord){float fragCoordZ=texture2D(depthSampler,coord).x;return perspectiveDepthToViewZ(fragCoordZ,0.1,1000.);}
#include <common>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <fog_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main(){vec4 diffuseColor=vec4(diffuse,opacity);
#include <clipping_planes_fragment>
vec3 outgoingLight=vec3(0.0);
#include <logdepthbuf_fragment>
#include <map_fragment>
vec2 st=((vUv-0.5)*vec2(1.4,1.))+0.5;vec2 centeredCoords=st-0.5;vec2 radialCoords=vec2(atan(centeredCoords.y,centeredCoords.x),length(centeredCoords));radialCoords.x=(radialCoords.x/6.283)+0.5;radialCoords.y=pow(radialCoords.y,0.5)-uTime*DISPLACEMENT_NOISE_SPEED;radialCoords/=DISPLACEMENT_NOISE_SIZE;vec3 rNoise=texture2D(tNoise,radialCoords).rgb;float noise=textureNoise3D(tNoise,st/FADE_NOISE_SIZE,uTime*FADE_NOISE_SPEED);noise=cremap(noise,-3.,3.,0.,1.);vec2 causticsUv=(st+(rNoise.xy-0.5)*DISPLACEMENT_STRENGTH)/CAUSTICS_SIZE;float causticsTime=uTime*CAUSTICS_SPEED;vec3 caustics1=texture2D(tCaustics,causticsUv+vec2(causticsTime*0.122,causticsTime*0.075)).rgb;vec3 caustics2=texture2D(tCaustics,causticsUv-vec2(causticsTime*0.082,causticsTime*0.138)).rgb;float fade=smoothstep(FADE_RANGE.y-noise*FADE_NOISE_STRENGTH,FADE_RANGE.x-noise*FADE_NOISE_STRENGTH,length(centeredCoords));float light=sineInOut(cremap(length(centeredCoords),0.3,0.,0.,1.));vec3 caustics=blendDarken(caustics1,caustics2);diffuseColor.rgb*=clamp(ContrastSaturationBrightness(caustics,BRIGHTNESS+light*LIGHT_BOOST,SATURATION,CONTRAST),vec3(0.),vec3(1.))*fade;vec2 depthUv=gl_FragCoord.xy/uResolution.xy;float sceneDepth=readDepth(tDepth,depthUv);float alpha=smoothstep(0.,0.3,vZ-sceneDepth);diffuseColor.rgb*=mix(1.,alpha,uMaskDepth);diffuseColor.rgb*=uIntensity;
#include <alphamap_fragment>
#include <alphatest_fragment>
#include <alphahash_fragment>
outgoingLight=diffuseColor.rgb;
#include <opaque_fragment>
#include <tonemapping_fragment>
#include <colorspace_fragment>
#include <fog_fragment>
if(length(gl_FragColor.rgb)<0.01)discard;}`,mo=w(Tl,"fragmentShader"),wl=`#define GLSLIFY 1
#define USE_UV
uniform float rotation;uniform vec2 center;varying float vZ;
#include <common>
#include <uv_pars_vertex>
#include <fog_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main(){
#include <uv_vertex>
vec4 mvPosition=modelViewMatrix*vec4(0.0,0.0,0.0,1.0);vec2 scale;scale.x=length(vec3(modelMatrix[0].x,modelMatrix[0].y,modelMatrix[0].z));scale.y=length(vec3(modelMatrix[1].x,modelMatrix[1].y,modelMatrix[1].z));
#ifndef USE_SIZEATTENUATION
bool isPerspective=isPerspectiveMatrix(projectionMatrix);if(isPerspective)scale*=-mvPosition.z;
#endif
vec2 alignedPosition=(position.xy-(center-vec2(0.5)))*scale;vec2 rotatedPosition;rotatedPosition.x=cos(rotation)*alignedPosition.x-sin(rotation)*alignedPosition.y;rotatedPosition.y=sin(rotation)*alignedPosition.x+cos(rotation)*alignedPosition.y;mvPosition.xy+=rotatedPosition;vZ=mvPosition.z;gl_Position=projectionMatrix*mvPosition;
#include <logdepthbuf_vertex>
#include <clipping_planes_vertex>
#include <fog_vertex>
}`,vo=w(wl,"vertexShader");class El extends le{constructor(e){super();l(this,"_spriteUniforms");l(this,"_spriteDefines");l(this,"_config");l(this,"_view");l(this,"_gltf");l(this,"_debug");l(this,"_sprite");l(this,"_renderTransmissionOverride",!0);l(this,"_visibleOverride",!0);W(this),this._config=e.config,this._view=e.view,this._gltf=e.gltf,this._spriteDefines=this._createSpriteDefines(),this._spriteUniforms=this._createSpriteUniforms(),this._sprite=this._createSprite(),this._debug=this._createDebug(e.debugContainer),this._onConfigUpdated()}setVisibility(e){this._sprite.visible=e&&this._visibleOverride,this._sprite.userData.renderTransmission=e&&this._renderTransmissionOverride}_createSpriteDefines(){return{DISPLACEMENT_NOISE_SPEED:"",DISPLACEMENT_NOISE_SIZE:"",DISPLACEMENT_STRENGTH:"",FADE_NOISE_SIZE:"",FADE_NOISE_SPEED:"",FADE_NOISE_STRENGTH:"",FADE_RANGE:"",LIGHT_BOOST:"",CONTRAST:"",BRIGHTNESS:"",SATURATION:"",CAUSTICS_SPEED:"",CAUSTICS_SIZE:""}}_createSpriteUniforms(){const e=M.get("noise");e.wrapS=e.wrapT=Z,e.magFilter=e.minFilter=ie;const i=M.get("caustics");return i.wrapS=i.wrapT=Z,{tNoise:{value:e},tCaustics:{value:i},uIntensity:{value:this._config.intensity},uTime:{value:0},uResolution:{value:new I},tDepth:{value:this._view._composer.passes.render.renderTarget.depthTexture},uCameraRange:{value:new I(this._view.camera.near,this._view.camera.far)},uMaskDepth:{value:1}}}_createSprite(){const e=new Di({color:this._config.color,sizeAttenuation:!0,depthTest:!0,blending:Ve,depthWrite:!1});e.userData.cacheKey={value:""};const i=new Ri(e);return i.userData.renderBloom=!1,i.renderOrder=1,i.onBeforeRender=()=>{this._spriteUniforms.uMaskDepth.value=i.userData.renderingTransmission?0:1,this._spriteUniforms.tDepth.value=i.userData.renderingTransmission?null:this._view._composer.passes.render.renderTarget.depthTexture},zt(i,this._spriteUniforms.uResolution.value),Xt(vo,e,e.userData.cacheKey),Xt(mo,e,e.userData.cacheKey),e.onBeforeCompile=n=>{const r=Sl(this._spriteDefines);n.vertexShader=r+vo.shader,n.fragmentShader=r+mo.shader,Object.assign(n.uniforms,this._spriteUniforms)},this._gltf.scene.getObjectByName("GRIFFON_GLOW").add(i),i}update({delta:e,time:i}){this._spriteUniforms.uTime.value=i}_onConfigUpdated(){this._sprite.scale.setScalar(this._config.size),this._sprite.material.color.set(this._config.color),this._spriteUniforms.uIntensity.value=this._config.intensity;const e=De(this._spriteDefines,{DISPLACEMENT_NOISE_SPEED:this._config.displacement.noise.speed,DISPLACEMENT_NOISE_SIZE:this._config.displacement.noise.size,DISPLACEMENT_STRENGTH:this._config.displacement.strength,FADE_NOISE_SIZE:this._config.fade.noise.size,FADE_NOISE_SPEED:this._config.fade.noise.speed,FADE_NOISE_STRENGTH:this._config.fade.noise.strength,FADE_RANGE:this._config.fade.range,LIGHT_BOOST:this._config.grading.lightBoost,CONTRAST:this._config.grading.contrast,BRIGHTNESS:this._config.grading.brightness,SATURATION:this._config.grading.saturation,CAUSTICS_SPEED:this._config.caustics.speed,CAUSTICS_SIZE:this._config.caustics.size},{precision:3,warn:ne.isProduction});this._sprite.material.needsUpdate=e,e&&(this._sprite.material.userData.cacheKey.value=Math.random().toFixed(5))}_createDebug(e){if(!T)return;const i=T.addFolder({title:"Griffin Glow",parent:e});i.addInput(this,"_renderTransmissionOverride",{label:"Transmission"}),i.addInput(this,"_visibleOverride",{label:"Visible"}),ft(i,this._sprite.material),C.addInputs(i,this._config,this._onConfigUpdated,{color:{label:"Color"},position:{label:"Offset",x:{step:.001},y:{step:.001},z:{step:.001}},intensity:{label:"Intensity",step:.01},size:{label:"Size",step:.001},caustics:!1,displacement:!1,fade:!1,grading:!1},{className:"config"});const o=i.addFolder({title:"Color Grading",expanded:!1});C.addInputs(o,this._config.grading,this._onConfigUpdated,{brightness:{step:.01,label:"Brightness"},contrast:{step:.01,label:"Contrast"},lightBoost:{step:.01,label:"LightBoost"},saturation:{step:.01,label:"Saturation"}},{className:"config"});const n=i.addFolder({title:"Displacement",expanded:!1});C.addInputs(n,this._config.displacement,this._onConfigUpdated,{strength:{label:"Strength",min:0,max:1,step:.01},noise:!1},{className:"config"});const r=n.addFolder({title:"Noise",expanded:!0});C.addInputs(r,this._config.displacement.noise,this._onConfigUpdated,{size:{label:"Size",step:.01},speed:{label:"Speed",step:.01}},{className:"config"});const s=i.addFolder({title:"Fade",expanded:!1});C.addInputs(s,this._config.fade,this._onConfigUpdated,{range:{label:"Range",min:0,max:1,step:.01},noise:!1},{className:"config"});const c=s.addFolder({title:"Noise",expanded:!0});C.addInputs(c,this._config.fade.noise,this._onConfigUpdated,{size:{label:"Size",step:.01},speed:{label:"Speed",step:.01}},{className:"config"});const m=i.addFolder({title:"Caustic",expanded:!1});return C.addInputs(m,this._config.caustics,this._onConfigUpdated,{size:{label:"Size",step:.01},speed:{label:"Speed",step:.01}},{className:"config"}),i}}const Ml=`#define GLSLIFY 1
varying vec2 vUv;varying vec3 vNormal;varying float vDistToCam;varying vec3 vWorldPosition;varying float vZ;uniform sampler2D tDepth;uniform float uPlanets;uniform vec2 uCameraRange;uniform vec2 uResolution;uniform float[5]uHighlight;uniform sampler2D tCaustics;uniform float uTime;uniform float uRenderingReflection;float blendDarken(float base,float blend){return min(blend,base);}vec3 blendDarken(vec3 base,vec3 blend){return vec3(blendDarken(base.r,blend.r),blendDarken(base.g,blend.g),blendDarken(base.b,blend.b));}vec3 blendDarken(vec3 base,vec3 blend,float opacity){return(blendDarken(base,blend)*opacity+base*(1.0-opacity));}vec2 hash22(vec2 p){vec3 p3=fract(vec3(p.xyx)*vec3(0.1031,0.1030,0.0973));p3+=dot(p3,p3.yzx+33.33);return fract((p3.xx+p3.yz)*p3.zy);}float hash12(vec2 p){vec3 p3=fract(vec3(p.xyx)*0.1031);p3+=dot(p3,p3.yzx+33.33);return fract((p3.x+p3.y)*p3.z);}
#include <packing>
float readDepth(sampler2D depthSampler,vec2 coord){float fragCoordZ=texture2D(depthSampler,coord).x;return perspectiveDepthToViewZ(fragCoordZ,uCameraRange.x,uCameraRange.y);}void main(){float planetBlend=step(0.01,uPlanets);float ditheringStrength=mix(DITHERING_STRENGTH,PLANETS_DITHERING_STRENGTH,planetBlend);float baseFresnelPower=mix(FRESNEL_POWER,PLANETS_FRESNEL_POWER,planetBlend);float opacity=mix(OPACITY,PLANETS_OPACITY,planetBlend);vec2 dithering=(hash22(gl_FragCoord.xy)-0.5)*ditheringStrength;vec2 uv=vUv+dithering*0.2;vec3 normal=normalize(vNormal);float proximityFade=smoothstep(0.,mix(4.,7.,planetBlend),vDistToCam);float fresnelPower=clamp(baseFresnelPower-(1.-proximityFade),0.,1.);float incidence=dot(normalize(normal.xz+dithering),vec2(1.,0.));float fade=1.-pow(1.-incidence,fresnelPower);fade=smoothstep(0.1,0.9,fade);fade*=smoothstep(HORIZONTAL_FADE_RANGE.x,HORIZONTAL_FADE_RANGE.y,pow(uv.y,HORIZONTAL_FADE_POWER));fade*=smoothstep(1.,0.4,pow(uv.y,1.));vec2 causticsUv;causticsUv.x=((atan(vWorldPosition.z,vWorldPosition.x)/3.1415927)+1.)/2.;causticsUv.x*=2.;causticsUv.y=vUv.y;causticsUv.y*=1.;float causticsTime=uTime*0.1;vec3 caustics1=texture2D(tCaustics,causticsUv+vec2(causticsTime*0.122,causticsTime*0.075)).rgb;vec3 caustics2=texture2D(tCaustics,causticsUv-vec2(causticsTime*0.082,causticsTime*0.138)).rgb;vec3 caustics=blendDarken(caustics1,caustics2);caustics*=smoothstep(0.1,0.9,1.-pow(1.-incidence,0.2))*2.;caustics*=smoothstep(1.,0.2,vUv.y);caustics*=smoothstep(2.,4.,vDistToCam);caustics*=0.5;vec2 depthUv=gl_FragCoord.xy/uResolution.xy;float sceneDepth=readDepth(tDepth,depthUv);float depthAlpha=smoothstep(0.,5.,vZ-sceneDepth);vec3 planetColor1=PLANETS_COLOR_1;planetColor1=mix(planetColor1,HIGHLIGHT_0_COLOR_1,uHighlight[0]);planetColor1=mix(planetColor1,HIGHLIGHT_1_COLOR_1,uHighlight[1]);planetColor1=mix(planetColor1,HIGHLIGHT_2_COLOR_1,uHighlight[2]);planetColor1=mix(planetColor1,HIGHLIGHT_3_COLOR_1,uHighlight[3]);planetColor1=mix(planetColor1,HIGHLIGHT_4_COLOR_1,uHighlight[4]);vec3 planetColor2=PLANETS_COLOR_2;planetColor2=mix(planetColor2,HIGHLIGHT_0_COLOR_2,uHighlight[0]);planetColor2=mix(planetColor2,HIGHLIGHT_1_COLOR_2,uHighlight[1]);planetColor2=mix(planetColor2,HIGHLIGHT_2_COLOR_2,uHighlight[2]);planetColor2=mix(planetColor2,HIGHLIGHT_3_COLOR_2,uHighlight[3]);planetColor2=mix(planetColor2,HIGHLIGHT_4_COLOR_2,uHighlight[4]);vec3 color1=mix(COLOR_1,planetColor1,planetBlend);vec3 color2=mix(COLOR_2,planetColor2,planetBlend);vec3 color=mix(color1,color2,fade);color*=fade;color+=caustics;color*=opacity;color*=mix(depthAlpha,1.,uRenderingReflection);gl_FragColor=vec4(color,1.);}`,Nl=w(Ml,"fragmentShader"),Dl=`#define GLSLIFY 1
varying vec2 vUv;varying float vZ;varying vec3 vNormal;varying float vDistToCam;varying vec3 vWorldPosition;void main(){vUv=uv;vNormal=normal;vec4 worldPosition=modelMatrix*vec4(position,1.0);vWorldPosition=worldPosition.xyz;vec4 mvPosition=viewMatrix*worldPosition;vZ=mvPosition.z;vWorldPosition-=(modelMatrix*vec4(vec3(0.),1.0)).xyz;vDistToCam=length(cameraPosition-(modelMatrix*vec4(vec3(0.),1.0)).xyz);gl_Position=projectionMatrix*mvPosition;}`,Rl=w(Dl,"vertexShader"),Ol=new A,Pl=new I;class Il extends le{constructor(e){super();l(this,"_config");l(this,"_globalConfig");l(this,"_mesh");l(this,"_debug");l(this,"_geometry");l(this,"_material");l(this,"_lastGeometryConfig");l(this,"_gltf");l(this,"_view");l(this,"_visibleOverride",!0);W(this),this._config=e.config,this._globalConfig=e.globalConfig,this._gltf=e.gltf,this._view=e.view,this._geometry=this._createGeometry(),this._material=this._createMaterial(),this._mesh=this._createMesh(),this._debug=this._createDebug(e.debugContainer),this._lastGeometryConfig=JSON.stringify(this._config.geometry),this._bind(),this._onConfigUpdated()}_bind(){const e=ve();F(()=>e.home.highlightedPlanet,i=>{if(this._mesh.material)for(let o=0;o<5;o++)ae.to(this._mesh.material.uniforms.uHighlight.value,{[o]:o===i?1:0,duration:1.5,ease:"power2.out"})})}setVisibility(e){this._mesh.visible=e&&this._visibleOverride}updateForPlanetScene(e){e?(this._mesh.position.set(1.2,0,1.2),this._mesh.scale.set(1,1,1)):(this._mesh.position.setScalar(0),this._mesh.scale.setScalar(1)),this._material.uniforms.uPlanets.value=e?1:0}_createGeometry(){const e=new Zo(this._config.geometry.radius.x,this._config.geometry.radius.y,this._config.geometry.height,this._config.geometry.segments,1,!0);return e.translate(0,this._config.geometry.height/2+this._config.geometry.offset,0),e.computeVertexNormals(),e}_createMaterial(){const e=M.get("caustics");e.wrapS=e.wrapT=Z,e.magFilter=e.minFilter=ie;const i=new Y({uniforms:{uTime:{value:0},tCaustics:{value:e},tDepth:{value:this._view._composer.passes.render.renderTarget.depthTexture},uPlanets:{value:0},uCameraRange:{value:new I(this._view.camera.near,this._view.camera.far)},uResolution:{value:new I},uHighlight:{value:new Array(5).fill(0)},uRenderingReflection:{value:0}},defines:{DITHERING_STRENGTH:"",OPACITY:"",COLOR_1:"",COLOR_2:"",PLANETS_DITHERING_STRENGTH:"",PLANETS_OPACITY:"",PLANETS_COLOR_1:"",PLANETS_COLOR_2:"",PLANETS_FRESNEL_POWER:"",HIGHLIGHT_0_COLOR_1:"",HIGHLIGHT_0_COLOR_2:"",HIGHLIGHT_1_COLOR_1:"",HIGHLIGHT_1_COLOR_2:"",HIGHLIGHT_2_COLOR_1:"",HIGHLIGHT_2_COLOR_2:"",HIGHLIGHT_3_COLOR_1:"",HIGHLIGHT_3_COLOR_2:"",HIGHLIGHT_4_COLOR_1:"",HIGHLIGHT_4_COLOR_2:"",FRESNEL_POWER:"",HORIZONTAL_FADE_RANGE:"",HORIZONTAL_FADE_POWER:""},transparent:!0,blending:Ve,depthWrite:!1});return Nl.use(i),Rl.use(i),i}_createMesh(){const e=new te(this._geometry,this._material);e.renderOrder=10,e.userData.renderBloom=!1,zt(e,this._material.uniforms.uResolution.value);const i=e.onBeforeRender||(()=>{});return e.onBeforeRender=function(...o){e.material.uniforms.uRenderingReflection.value=e.userData.renderingReflection?1:0,i(...o)},this.add(e),e}update({delta:e,time:i}){this._material.uniforms.uTime.value=i;const o=this._view.camera.getWorldPosition(Ol);this._mesh.rotation.y=-Pl.set(o.x,o.z).angle()}_updateGeometry(){this._geometry.dispose(),this._geometry=this._createGeometry(),this._mesh.geometry=this._geometry}_onConfigUpdated(){De(this._material,{DITHERING_STRENGTH:this._config.dithering,OPACITY:this._config.opacity,COLOR_1:this._config.color1,COLOR_2:this._config.color2,FRESNEL_POWER:this._config.fresnel,PLANETS_DITHERING_STRENGTH:this._config.planets.dithering,PLANETS_OPACITY:this._config.planets.opacity,PLANETS_COLOR_1:this._config.planets.color1,PLANETS_COLOR_2:this._config.planets.color2,PLANETS_FRESNEL_POWER:this._config.planets.fresnel,HORIZONTAL_FADE_RANGE:this._config.horizontalFade.range,HORIZONTAL_FADE_POWER:this._config.horizontalFade.power,HIGHLIGHT_0_COLOR_1:this._config.planets.highlights[0].color1,HIGHLIGHT_0_COLOR_2:this._config.planets.highlights[0].color2,HIGHLIGHT_1_COLOR_1:this._config.planets.highlights[1].color1,HIGHLIGHT_1_COLOR_2:this._config.planets.highlights[1].color2,HIGHLIGHT_2_COLOR_1:this._config.planets.highlights[2].color1,HIGHLIGHT_2_COLOR_2:this._config.planets.highlights[2].color2,HIGHLIGHT_3_COLOR_1:this._config.planets.highlights[3].color1,HIGHLIGHT_3_COLOR_2:this._config.planets.highlights[3].color2,HIGHLIGHT_4_COLOR_1:this._config.planets.highlights[4].color1,HIGHLIGHT_4_COLOR_2:this._config.planets.highlights[4].color2},{precision:3,warn:ne.isProduction});const e=JSON.stringify(this._config.geometry);this._lastGeometryConfig!==e&&(this._updateGeometry(),this._lastGeometryConfig=e)}_createDebug(e){if(!T)return;const i=T.addFolder({title:"Spotlight",parent:e});i.addInput(this,"_visibleOverride",{label:"Visible"}),ft(i,this._mesh.material);const o=i.addFolder({title:"Transform",expanded:!1});o.addInput(this._mesh,"position",{label:"Position",x:{step:.01},y:{step:.01},z:{step:.01}}),o.addInput(this._mesh,"scale",{label:"Scale",x:{step:.01},y:{step:.01},z:{step:.01}}),o.addInput(this._mesh,"rotation",{label:"Rotation",view:"rotation",rotationMode:"euler",step:.001,order:"XYZ",unit:"rad"}),C.addInputs(i,this._config,this._onConfigUpdated,{geometry:!1,horizontalFade:!1,planets:!1,color1:{label:"Color 1"},color2:{label:"Color 2"},opacity:{label:"Opacity",step:.001,min:0,max:1},dithering:{label:"Dithering",step:.01},fresnel:{label:"Fresnel",step:.01}},{className:"config"});const n=i.addFolder({title:"HorizontalFade",expanded:!1});C.addInputs(n,this._config.horizontalFade,this._onConfigUpdated,{range:{label:"Range",min:0,max:1,step:.01},power:{label:"Power",step:.01}},{className:"config"});const r=i.addFolder({title:"Planets",expanded:!1});C.addInputs(r,this._config.planets,this._onConfigUpdated,{color1:{label:"Color 1"},color2:{label:"Color 2"},highlights:!1},{className:"config"});const s=T.addFolder({title:"Highlights",parent:r});for(let m=0;m<this._config.planets.highlights.length;m++){const f=this._config.planets.highlights[m],v=T.addFolder({title:"Highlight "+m,parent:s});C.addInputs(v,f,this._onConfigUpdated,{color1:{label:"Color 1"},color2:{label:"Color 2"}},{className:"config"})}const c=i.addFolder({title:"Geometry",expanded:!1});return C.addInputs(c,this._config.geometry,this._onConfigUpdated,{height:{label:"Height",step:.01},offset:{label:"Offset",step:.01},radius:{label:"Radius",x:{step:.01},y:{step:.01}},segments:{label:"Segments",step:1,min:0}},{className:"config"}),i}}const Ll=`#define GLSLIFY 1
varying vec2 vUv;varying vec3 vNormal;
#ifdef USE_NORMALMAP
varying vec3 vBitangent;varying vec3 vTangent;
#endif
varying vec3 vWorldPosition;varying vec3 vModelPosition;varying vec3 vViewPosition;uniform mat3 normalMatrix;uniform mat4 modelMatrix;uniform mat4 projectionMatrix;uniform sampler2D tNormalMap;uniform float uEnvMapIntensity;uniform mat3 uEnvMapRotation;uniform sampler2D tEnvMap;uniform vec2 uTransmissionSamplerSize;uniform sampler2D tTransmissionSamplerMap;uniform sampler2D tNoise;uniform float uTime;vec3 packNormalToRGB(const in vec3 normal){return normalize(normal)*0.5+0.5;}vec3 inverseTransformDirection(in vec3 dir,in mat4 matrix){return normalize((vec4(dir,0.0)*matrix).xyz);}
#ifndef saturate
#define saturate( a ) clamp( a, 0.0, 1.0 )
#endif
#include <cube_uv_reflection_fragment>
#define USE_ENVMAP
#define ENVMAP_TYPE_CUBE_UV
#include <cube_uv_reflection_fragment>
vec3 getEnvColor(const in vec3 viewDir,const in vec3 normal,const in float roughness){
#ifdef ENVMAP_TYPE_CUBE_UV
vec3 reflectVec=reflect(-viewDir,normal);reflectVec=normalize(mix(reflectVec,normal,roughness*roughness));reflectVec=inverseTransformDirection(reflectVec,viewMatrix);vec4 envMapColor=textureCubeUV(tEnvMap,uEnvMapRotation*reflectVec,roughness);return envMapColor.rgb*uEnvMapIntensity;
#else
return vec3(0.0);
#endif
}vec3 getVolumeTransmissionRay(vec3 n,vec3 v,float thickness,float ior,mat4 modelMatrix){vec3 refractionVector=refract(-v,normalize(n),1.0/ior);vec3 modelScale;modelScale.x=length(vec3(modelMatrix[0].xyz));modelScale.y=length(vec3(modelMatrix[1].xyz));modelScale.z=length(vec3(modelMatrix[2].xyz));return normalize(refractionVector)*thickness*modelScale;}float applyIorToRoughness(float roughness,float ior){return roughness*clamp(ior*2.0-2.0,0.0,1.0);}vec4 getTransmissionSample(vec2 fragCoord,float roughness,float ior,float blur){float framebufferLod=log2(uTransmissionSamplerSize.x)*applyIorToRoughness(roughness,ior)*blur;
#ifdef TEXTURE_LOD_EXT
return texture2DLodEXT(tTransmissionSamplerMap,fragCoord.xy,framebufferLod);
#else
return texture2D(tTransmissionSamplerMap,fragCoord.xy,framebufferLod);
#endif
}vec3 applyVolumeAttenuation(vec3 radiance,float transmissionDistance,vec3 attenuationColor,float attenuationDistance){if(attenuationDistance==0.0){return radiance;}else{vec3 attenuationCoefficient=-log(attenuationColor)/attenuationDistance;vec3 transmittance=exp(-attenuationCoefficient*transmissionDistance);return transmittance*radiance;}}vec4 getTransmission(const in vec3 n,const in vec3 v,const in float roughness,const in vec3 diffuseColor,const in vec3 position,const in mat4 modelMatrix,const in mat4 viewMatrix,const in mat4 projMatrix,const in float ior,const in float blur,const in float thickness,const in vec3 attenuationColor,const in float attenuationDistance){vec3 transmissionRay=getVolumeTransmissionRay(n,v,thickness,ior,modelMatrix);vec3 refractedRayExit=position+transmissionRay;vec4 ndcPos=projMatrix*viewMatrix*vec4(refractedRayExit,1.0);vec2 refractionCoords=ndcPos.xy/ndcPos.w;refractionCoords+=1.0;refractionCoords/=2.0;vec4 transmittedLight=getTransmissionSample(refractionCoords,roughness,ior,blur);vec3 attenuatedColor=applyVolumeAttenuation(transmittedLight.rgb,length(transmissionRay),attenuationColor,attenuationDistance);return vec4(attenuatedColor*diffuseColor,transmittedLight.a);}vec2 DFGApprox(const in vec3 normal,const in vec3 viewDir,const in float roughness){float dotNV=saturate(dot(normal,viewDir));const vec4 c0=vec4(-1,-0.0275,-0.572,0.022);const vec4 c1=vec4(1,0.0425,1.04,-0.04);vec4 r=roughness*c0+c1;float a004=min(r.x*r.x,exp2(-9.28*dotNV))*r.x+r.y;vec2 fab=vec2(-1.04,1.04)*a004+r.zw;return fab;}vec3 EnvironmentBRDF(const in vec3 normal,const in vec3 viewDir,const in vec3 specularColor,const in float specularF90,const in float roughness){vec2 fab=DFGApprox(normal,viewDir,roughness);return specularColor*fab.x+specularF90*fab.y;}vec4 blendTransmissionAndSpecular(const in vec3 normal,const in vec3 viewDir,const in vec3 specularColor,const in vec4 transmissionColor,const in float specularF90,const in float roughness){vec3 F=EnvironmentBRDF(normal,viewDir,specularColor,specularF90,roughness);return vec4(mix(transmissionColor.rgb,specularColor,saturate(length(F)/1.4)),transmissionColor.a);}vec4 biplanarMapping(sampler2D sam,in vec3 p,in vec3 n,in float k){vec3 dpdx=dFdx(p);vec3 dpdy=dFdy(p);n=abs(n);ivec3 ma=(n.x>n.y&&n.x>n.z)? ivec3(0,1,2):(n.y>n.z)? ivec3(1,2,0):ivec3(2,0,1);ivec3 mi=(n.x<n.y&&n.x<n.z)? ivec3(0,1,2):(n.y<n.z)? ivec3(1,2,0):ivec3(2,0,1);ivec3 me=ivec3(3)-mi-ma;vec4 x=textureGrad(sam,vec2(p[ma.y],p[ma.z]),vec2(dpdx[ma.y],dpdx[ma.z]),vec2(dpdy[ma.y],dpdy[ma.z]));vec4 y=textureGrad(sam,vec2(p[me.y],p[me.z]),vec2(dpdx[me.y],dpdx[me.z]),vec2(dpdy[me.y],dpdy[me.z]));vec2 w=vec2(n[ma.x],n[me.x]);w=clamp((w-0.5773)/(1.0-0.5773),0.0,1.0);w=pow(w,vec2(k/8.0));return(x*w.x+y*w.y)/(w.x+w.y);}float exponentialInOut(float t){return t==0.0||t==1.0? t: t<0.5?+0.5*pow(2.0,(20.0*t)-10.0):-0.5*pow(2.0,10.0-(t*20.0))+1.0;}float getEggFresnel(float fresnelPower,float fresnelIntensity,sampler2D noiseTexture,float noiseTime,float noiseSize,vec3 modelPosition,vec3 modelNormal,vec3 worldNormal,vec3 worldCameraDirection){vec3 noiseOffset=vec3(sin(noiseTime*0.3),cos(noiseTime*0.235),sin(-noiseTime*0.424))*0.1;vec3 noise=biplanarMapping(noiseTexture,(modelPosition+noiseOffset)/noiseSize,modelNormal,8.).rgb;float fresnel=dot(worldCameraDirection,worldNormal);fresnel=pow(1.-fresnel,fresnelPower)*fresnelIntensity;return fresnel*exponentialInOut(noise.r);}void main(){vec3 luma=vec3(0.299,0.587,0.114);mat3 modelMatrixRotation=mat3(modelMatrix);vec2 uv=vUv;vec2 wrapUv=uv*NORMAL_SCALE;
#ifdef USE_NORMALMAP
mat3 tbn=mat3(normalize(vTangent),normalize(vBitangent),vNormal);vec3 normalColor=texture2D(tNormalMap,wrapUv).xyz*2.0-1.0;normalColor.xy*=NORMAL_STRENGTH;vec3 modelNormal=normalize(tbn*normalColor);
#else
vec3 modelNormal=vNormal;
#endif
vec3 viewNormal=normalMatrix*modelNormal;vec3 worldNormal=modelMatrixRotation*modelNormal;vec3 worldCameraDirection=normalize(vec3(cameraPosition-vWorldPosition));vec3 viewCameraDirection=normalize(vViewPosition);vec3 worldDefaultNormal=modelMatrixRotation*vNormal;float fresnel=getEggFresnel(FRESNEL_POWER,FRESNEL_INTENSITY,tNoise,uTime*1.,1.,vModelPosition,vNormal,worldDefaultNormal,worldCameraDirection);vec3 fresnelColor=fresnel*FRESNEL_COLOR*BLOOM_FRESNEL_INTENSITY;vec3 envColor=getEnvColor(viewCameraDirection,viewNormal,ROUGHNESS);float envLumaMask=smoothstep(BLOOM_ENV_LUMA_CLAMPING.x,BLOOM_ENV_LUMA_CLAMPING.y,dot(envColor.xyz,luma));envColor*=envLumaMask*BLOOM_ENV_INTENSITY;vec4 transmission=getTransmission(worldNormal,worldCameraDirection,ROUGHNESS,DIFFUSE_COLOR,vWorldPosition,modelMatrix,viewMatrix,projectionMatrix,TRANSMISSION_IOR,TRANSMISSION_BLUR,TRANSMISSION_THICKNESS,TRANSMISSION_ATTENUATION_COLOR,TRANSMISSION_ATTENUATION_DISTANCE);float transmissionLumaMask=smoothstep(BLOOM_TRANSMISSION_LUMA_CLAMPING.x,BLOOM_TRANSMISSION_LUMA_CLAMPING.y,dot(transmission.xyz,luma));transmission.xyz*=transmissionLumaMask*BLOOM_TRANSMISSION_INTENSITY;vec4 color=blendTransmissionAndSpecular(worldNormal,worldCameraDirection,envColor,transmission,SPECULAR,ROUGHNESS);gl_FragColor=vec4(color.rgb+fresnelColor,1.);
#ifdef DEBUG
#if DEBUG == 1
gl_FragColor=vec4(packNormalToRGB(viewNormal),1.);
#elif DEBUG == 2
gl_FragColor=vec4(envColor,1.);
#elif DEBUG == 3
gl_FragColor=vec4(fresnel*FRESNEL_COLOR,1.);
#elif DEBUG == 4
gl_FragColor=vec4(transmission.rgb,1.);
#elif DEBUG == 5
gl_FragColor=vec4(vec3(ao),1.);
#endif
#endif
}`,Fl=w(Ll,"fragmentShader"),Al=`#define GLSLIFY 1
varying vec2 vUv;varying vec3 vNormal;
#ifdef USE_NORMALMAP
varying vec3 vBitangent;varying vec3 vTangent;
#endif
varying vec3 vModelPosition;varying vec3 vWorldPosition;varying vec3 vViewPosition;void main(){vNormal=normalize(normal.xyz);
#ifdef USE_NORMALMAP
vTangent=normalize(tangent.xyz);vBitangent=normalize(cross(vNormal,vTangent)*tangent.w);
#endif
vUv=uv;vec4 worldPosition=modelMatrix*vec4(position,1.0);vec4 mvPosition=viewMatrix*worldPosition;vModelPosition=position;vWorldPosition=worldPosition.xyz;vViewPosition=-mvPosition.xyz;gl_Position=projectionMatrix*mvPosition;}`,Ul=w(Al,"vertexShader"),zl=`#define GLSLIFY 1
varying vec2 vUv;varying vec3 vNormal;
#ifdef USE_NORMALMAP
varying vec3 vBitangent;varying vec3 vTangent;
#endif
varying vec3 vWorldPosition;varying vec3 vModelPosition;varying vec3 vViewPosition;uniform mat3 normalMatrix;uniform mat4 modelMatrix;uniform mat4 projectionMatrix;uniform sampler2D tNormalMap;uniform float uEnvMapIntensity;uniform mat3 uEnvMapRotation;uniform sampler2D tEnvMap;uniform vec2 uTransmissionSamplerSize;uniform sampler2D tTransmissionSamplerMap;uniform sampler2D tNoise;uniform float uTime;vec3 packNormalToRGB(const in vec3 normal){return normalize(normal)*0.5+0.5;}vec3 inverseTransformDirection(in vec3 dir,in mat4 matrix){return normalize((vec4(dir,0.0)*matrix).xyz);}
#ifndef saturate
#define saturate( a ) clamp( a, 0.0, 1.0 )
#endif
#include <cube_uv_reflection_fragment>
#define USE_ENVMAP
#define ENVMAP_TYPE_CUBE_UV
#include <cube_uv_reflection_fragment>
vec3 getEnvColor(const in vec3 viewDir,const in vec3 normal,const in float roughness){
#ifdef ENVMAP_TYPE_CUBE_UV
vec3 reflectVec=reflect(-viewDir,normal);reflectVec=normalize(mix(reflectVec,normal,roughness*roughness));reflectVec=inverseTransformDirection(reflectVec,viewMatrix);vec4 envMapColor=textureCubeUV(tEnvMap,uEnvMapRotation*reflectVec,roughness);return envMapColor.rgb*uEnvMapIntensity;
#else
return vec3(0.0);
#endif
}vec3 getVolumeTransmissionRay(vec3 n,vec3 v,float thickness,float ior,mat4 modelMatrix){vec3 refractionVector=refract(-v,normalize(n),1.0/ior);vec3 modelScale;modelScale.x=length(vec3(modelMatrix[0].xyz));modelScale.y=length(vec3(modelMatrix[1].xyz));modelScale.z=length(vec3(modelMatrix[2].xyz));return normalize(refractionVector)*thickness*modelScale;}float applyIorToRoughness(float roughness,float ior){return roughness*clamp(ior*2.0-2.0,0.0,1.0);}vec4 getTransmissionSample(vec2 fragCoord,float roughness,float ior,float blur){float framebufferLod=log2(uTransmissionSamplerSize.x)*applyIorToRoughness(roughness,ior)*blur;
#ifdef TEXTURE_LOD_EXT
return texture2DLodEXT(tTransmissionSamplerMap,fragCoord.xy,framebufferLod);
#else
return texture2D(tTransmissionSamplerMap,fragCoord.xy,framebufferLod);
#endif
}vec3 applyVolumeAttenuation(vec3 radiance,float transmissionDistance,vec3 attenuationColor,float attenuationDistance){if(attenuationDistance==0.0){return radiance;}else{vec3 attenuationCoefficient=-log(attenuationColor)/attenuationDistance;vec3 transmittance=exp(-attenuationCoefficient*transmissionDistance);return transmittance*radiance;}}vec4 getTransmission(const in vec3 n,const in vec3 v,const in float roughness,const in vec3 diffuseColor,const in vec3 position,const in mat4 modelMatrix,const in mat4 viewMatrix,const in mat4 projMatrix,const in float ior,const in float blur,const in float thickness,const in vec3 attenuationColor,const in float attenuationDistance){vec3 transmissionRay=getVolumeTransmissionRay(n,v,thickness,ior,modelMatrix);vec3 refractedRayExit=position+transmissionRay;vec4 ndcPos=projMatrix*viewMatrix*vec4(refractedRayExit,1.0);vec2 refractionCoords=ndcPos.xy/ndcPos.w;refractionCoords+=1.0;refractionCoords/=2.0;vec4 transmittedLight=getTransmissionSample(refractionCoords,roughness,ior,blur);vec3 attenuatedColor=applyVolumeAttenuation(transmittedLight.rgb,length(transmissionRay),attenuationColor,attenuationDistance);return vec4(attenuatedColor*diffuseColor,transmittedLight.a);}vec2 DFGApprox(const in vec3 normal,const in vec3 viewDir,const in float roughness){float dotNV=saturate(dot(normal,viewDir));const vec4 c0=vec4(-1,-0.0275,-0.572,0.022);const vec4 c1=vec4(1,0.0425,1.04,-0.04);vec4 r=roughness*c0+c1;float a004=min(r.x*r.x,exp2(-9.28*dotNV))*r.x+r.y;vec2 fab=vec2(-1.04,1.04)*a004+r.zw;return fab;}vec3 EnvironmentBRDF(const in vec3 normal,const in vec3 viewDir,const in vec3 specularColor,const in float specularF90,const in float roughness){vec2 fab=DFGApprox(normal,viewDir,roughness);return specularColor*fab.x+specularF90*fab.y;}vec4 blendTransmissionAndSpecular(const in vec3 normal,const in vec3 viewDir,const in vec3 specularColor,const in vec4 transmissionColor,const in float specularF90,const in float roughness){vec3 F=EnvironmentBRDF(normal,viewDir,specularColor,specularF90,roughness);return vec4(mix(transmissionColor.rgb,specularColor,saturate(length(F)/1.4)),transmissionColor.a);}vec4 biplanarMapping(sampler2D sam,in vec3 p,in vec3 n,in float k){vec3 dpdx=dFdx(p);vec3 dpdy=dFdy(p);n=abs(n);ivec3 ma=(n.x>n.y&&n.x>n.z)? ivec3(0,1,2):(n.y>n.z)? ivec3(1,2,0):ivec3(2,0,1);ivec3 mi=(n.x<n.y&&n.x<n.z)? ivec3(0,1,2):(n.y<n.z)? ivec3(1,2,0):ivec3(2,0,1);ivec3 me=ivec3(3)-mi-ma;vec4 x=textureGrad(sam,vec2(p[ma.y],p[ma.z]),vec2(dpdx[ma.y],dpdx[ma.z]),vec2(dpdy[ma.y],dpdy[ma.z]));vec4 y=textureGrad(sam,vec2(p[me.y],p[me.z]),vec2(dpdx[me.y],dpdx[me.z]),vec2(dpdy[me.y],dpdy[me.z]));vec2 w=vec2(n[ma.x],n[me.x]);w=clamp((w-0.5773)/(1.0-0.5773),0.0,1.0);w=pow(w,vec2(k/8.0));return(x*w.x+y*w.y)/(w.x+w.y);}float exponentialInOut(float t){return t==0.0||t==1.0? t: t<0.5?+0.5*pow(2.0,(20.0*t)-10.0):-0.5*pow(2.0,10.0-(t*20.0))+1.0;}float getEggFresnel(float fresnelPower,float fresnelIntensity,sampler2D noiseTexture,float noiseTime,float noiseSize,vec3 modelPosition,vec3 modelNormal,vec3 worldNormal,vec3 worldCameraDirection){vec3 noiseOffset=vec3(sin(noiseTime*0.3),cos(noiseTime*0.235),sin(-noiseTime*0.424))*0.1;vec3 noise=biplanarMapping(noiseTexture,(modelPosition+noiseOffset)/noiseSize,modelNormal,8.).rgb;float fresnel=dot(worldCameraDirection,worldNormal);fresnel=pow(1.-fresnel,fresnelPower)*fresnelIntensity;return fresnel*exponentialInOut(noise.r);}void main(){mat3 modelMatrixRotation=mat3(modelMatrix);vec2 uv=vUv;vec2 wrapUv=uv*NORMAL_SCALE;
#ifdef USE_NORMALMAP
mat3 tbn=mat3(normalize(vTangent),normalize(vBitangent),vNormal);vec3 normalColor=texture2D(tNormalMap,wrapUv).xyz*2.0-1.0;normalColor.xy*=NORMAL_STRENGTH;vec3 modelNormal=normalize(tbn*normalColor);
#else
vec3 modelNormal=normalize(vNormal);
#endif
vec3 viewNormal=normalMatrix*modelNormal;vec3 worldNormal=normalize(modelMatrixRotation*modelNormal);vec3 worldCameraDirection=normalize(vec3(cameraPosition-vWorldPosition));vec3 viewCameraDirection=normalize(vViewPosition);vec3 viewDefaultNormal=normalize(normalMatrix*vNormal);float fresnel=getEggFresnel(FRESNEL_POWER,FRESNEL_INTENSITY,tNoise,uTime*1.,1.,vModelPosition,vNormal,viewDefaultNormal,viewCameraDirection);vec3 fresnelColor=fresnel*FRESNEL_COLOR;vec3 envColor=getEnvColor(viewCameraDirection,viewNormal,ROUGHNESS);vec4 transmission=getTransmission(worldNormal,worldCameraDirection,ROUGHNESS,DIFFUSE_COLOR,vWorldPosition,modelMatrix,viewMatrix,projectionMatrix,TRANSMISSION_IOR,TRANSMISSION_BLUR,TRANSMISSION_THICKNESS,TRANSMISSION_ATTENUATION_COLOR,TRANSMISSION_ATTENUATION_DISTANCE);vec4 color=blendTransmissionAndSpecular(worldNormal,worldCameraDirection,envColor,transmission,SPECULAR,ROUGHNESS);gl_FragColor=vec4(color.rgb+fresnelColor,1.);
#ifdef DEBUG
#if DEBUG == 1
gl_FragColor=vec4(packNormalToRGB(viewNormal),1.);
#elif DEBUG == 2
gl_FragColor=vec4(envColor,1.);
#elif DEBUG == 3
gl_FragColor=vec4(fresnel*FRESNEL_COLOR,1.);
#elif DEBUG == 4
gl_FragColor=vec4(transmission.rgb,1.);
#elif DEBUG == 5
gl_FragColor=vec4(vec3(ao),1.);
#endif
#endif
}`,Gl=w(zl,"fragmentShader"),Bl=`#define GLSLIFY 1
varying vec2 vUv;varying vec3 vNormal;
#ifdef USE_NORMALMAP
varying vec3 vBitangent;varying vec3 vTangent;
#endif
varying vec3 vWorldPosition;varying vec3 vModelPosition;varying vec3 vViewPosition;void main(){vNormal=normalize(normal.xyz);
#ifdef USE_NORMALMAP
vTangent=normalize(tangent.xyz);vBitangent=normalize(cross(vNormal,vTangent)*tangent.w);
#endif
vUv=uv;vec4 worldPosition=modelMatrix*vec4(position,1.0);vec4 mvPosition=viewMatrix*worldPosition;vModelPosition=position;vWorldPosition=worldPosition.xyz;vViewPosition=-mvPosition.xyz;gl_Position=projectionMatrix*mvPosition;}`,kl=w(Bl,"vertexShader");class Hl extends le{constructor(e){super();l(this,"_config");l(this,"_globalConfig");l(this,"_glow");l(this,"_spotlight");l(this,"_material");l(this,"_bloomMaterial");l(this,"_mesh");l(this,"_debug");l(this,"_view");l(this,"_name");l(this,"_gltf");l(this,"_uiStore");l(this,"_visibleOverride",!0);W(this),this._globalConfig=e.globalConfig,this._config=e.config,this._view=e.view,this._name=e.name,this._gltf=e.gltf,this._uiStore=ve(),this._material=this._createMaterial(),this._bloomMaterial=this._createBloomMaterial(),this._mesh=this._createMesh({meshName:e.meshName}),this._debug=this._createDebug(e.debugContainer),this._glow=this._createGlow(),this._spotlight=this._createSpotlight(),this._bind(),this._onConfigUpdated()}_bind(){F(()=>this._uiStore.home.planets>0,e=>{this._spotlight.updateForPlanetScene(e)})}setTransmission(e){ii(this._material,e),ii(this._bloomMaterial,e)}setVisibility(e){this._mesh.visible=e&&this._visibleOverride,this._glow.setVisibility(e)}_createMaterial(){const e=M.get("egg/normal");e.colorSpace=ke,e.wrapS=e.wrapT=Z;const i=M.get("noise");i.wrapS=i.wrapT=Z;const o=new Y({uniforms:{tNormalMap:{value:e},tNoise:{value:i},uTime:{value:0},...ei(this._view.scene.environment)},defines:{ROUGHNESS:"",SPECULAR:"",DIFFUSE_COLOR:"",NORMAL_SCALE:"",NORMAL_STRENGTH:"",FRESNEL_COLOR:"",FRESNEL_POWER:"",FRESNEL_INTENSITY:"",USE_NORMALMAP:!!e,USE_TANGENT:!!e,TEXTURE_LOD_EXT:!0,DEBUG:0,...Jt(this._view.scene.environment)}});return Gl.use(o),kl.use(o),o}_createMesh({meshName:e}){const i=this._gltf.scene.getObjectByName(e);return i.geometry.computeTangents(),i.material=this._material,i.userData.renderBloom=!0,i.userData.bloomMaterial=this._bloomMaterial,i}_createBloomMaterial(){const e=M.get("egg/normal");e.colorSpace=ke,e.wrapS=e.wrapT=Z;const i=new Y({uniforms:{tNormalMap:{value:e},...ei(this._view.scene.environment)},defines:{ROUGHNESS:"",SPECULAR:"",DIFFUSE_COLOR:"",FRESNEL_COLOR:"",FRESNEL_POWER:"",FRESNEL_INTENSITY:"",NORMAL_SCALE:"",NORMAL_STRENGTH:"",BLOOM_TRANSMISSION_LUMA_CLAMPING:"",BLOOM_TRANSMISSION_INTENSITY:"",BLOOM_ENV_LUMA_CLAMPING:"",BLOOM_ENV_INTENSITY:"",BLOOM_FRESNEL_INTENSITY:"",USE_NORMALMAP:!!e,USE_TANGENT:!!e,TEXTURE_LOD_EXT:!0,DEBUG:0,...Jt(this._view.scene.environment)}});return Fl.use(i),Ul.use(i),i}_createGlow(){const e=new El({config:this._config.glow,debugContainer:this._debug,view:this._view,gltf:this._gltf});return e.renderOrder=this._globalConfig.renderOrders.griffin,e}_createSpotlight(){const e=new Il({config:this._config.spotlight,debugContainer:this._debug,globalConfig:this._globalConfig,gltf:this._gltf,view:this._view});return this._view.scene.add(e),e}_onConfigUpdated(){var i,o;const e={ROUGHNESS:this._config.roughness,SPECULAR:this._config.specular,DIFFUSE_COLOR:this._config.diffuseColor,NORMAL_SCALE:this._config.normal.scale,NORMAL_STRENGTH:this._config.normal.strength,FRESNEL_COLOR:this._config.fresnel.color,FRESNEL_POWER:this._config.fresnel.power,FRESNEL_INTENSITY:this._config.fresnel.intensity};De(this._material,{...e},{precision:3,warn:ne.isProduction}),De(this._bloomMaterial,{...e,BLOOM_TRANSMISSION_LUMA_CLAMPING:this._config.bloom.transmission.lumaClamping,BLOOM_TRANSMISSION_INTENSITY:this._config.bloom.transmission.intensity,BLOOM_ENV_LUMA_CLAMPING:this._config.bloom.environment.lumaClamping,BLOOM_ENV_INTENSITY:this._config.bloom.environment.intensity,BLOOM_FRESNEL_INTENSITY:this._config.bloom.fresnel.intensity},{precision:3,warn:ne.isProduction}),ti(this._material,this._config),ti(this._bloomMaterial,this._config),this._view._components&&((i=this._view._components.transmissionRenderer)==null||i._onConfigUpdated()),(o=this._glow)==null||o._onConfigUpdated()}update({delta:e,time:i}){var r,s;(r=this._glow)==null||r.update({time:i,delta:e}),(s=this._spotlight)==null||s.update({time:i,delta:e}),this._material.uniforms.uTime.value=i;const o=this._uiStore.home.planets>0,n=this._mesh.scale.x>.002;this.setVisibility(n),this._spotlight.setVisibility(n||o)}_createDebug(e){if(!T)return;const i=T.addFolder({title:this._name,parent:e});i.addInput(this,"_visibleOverride",{label:"Visible"}),i.addInput(this._material.defines,"DEBUG",{options:{NONE:0,NORMAL:1,ENV:2,FRESNEL:3,TRANSMISSION:4,AO:5},label:"Debug"}).on("change",()=>{this._material.needsUpdate=!0}),i.addInput(this._bloomMaterial.defines,"DEBUG",{options:{NONE:0,NORMAL:1,ENV:2,FRESNEL:3,TRANSMISSION:4,AO:5},label:"Bloom Debug"}).on("change",()=>{this._bloomMaterial.needsUpdate=!0}),C.addInputs(i,this._config,this._onConfigUpdated,{roughness:{label:"Roughness",step:.01},specular:{label:"Specular",step:.01},diffuseColor:{label:"Diffuse Color"},fresnel:!1,normal:!1,transmission:!1,environment:!1,glow:!1,bloom:!1,spotlight:!1},{className:"config"});const o=i.addFolder({title:"Normal",expanded:!1});C.addInputs(o,this._config.normal,this._onConfigUpdated,{scale:{label:"Scale",step:.01},strength:{label:"Strength",step:.01}},{className:"config"}),gn(i,this._config,this._onConfigUpdated);const n=i.addFolder({title:"Fresnel",expanded:!1});C.addInputs(n,this._config.fresnel,this._onConfigUpdated,{power:{label:"Power",step:.01},intensity:{label:"Intensity",step:.01},color:{label:"Color"}},{className:"config"});const r=i.addFolder({title:"Bloom",expanded:!1}),s=r.addFolder({title:"Transmission",expanded:!1});C.addInputs(s,this._config.bloom.transmission,this._onConfigUpdated,{intensity:{label:"Intensity",step:.01},lumaClamping:{label:"Luma Clamping",min:0,max:1,step:.01}},{className:"config"});const c=r.addFolder({title:"Environment",expanded:!1});C.addInputs(c,this._config.bloom.environment,this._onConfigUpdated,{intensity:{label:"Intensity",step:.01},lumaClamping:{label:"Luma Clamping",min:0,max:1,step:.01}},{className:"config"});const m=r.addFolder({title:"Fresnel",expanded:!1});return C.addInputs(m,this._config.bloom.fresnel,this._onConfigUpdated,{intensity:{label:"Intensity",step:.01}},{className:"config"}),i}}const Vl=`#define GLSLIFY 1
varying vec2 vUv;varying vec3 vPosition;uniform float uTransition;uniform vec2 uSize;uniform sampler2D tEmissive;void main(){vec2 uv=vUv;vec4 texel=texture2D(tEmissive,uv);vec3 bloomColor=vec3(1.0,0.53,0.2);bloomColor.rgb*=3.;vec4 emissive=vec4(mix(vec3(0.),bloomColor,texel.g),1.);gl_FragColor=emissive;
#include <dithering_fragment>
const float FALLOFF_POS=0.15;const float FALLOFF_NEG=-0.35;float transition=uTransition;float height=uSize.y-uSize.x;float y=vPosition.y-uSize.x;float posAlpha=(y+sin(vPosition.x*5.0)*0.05+FALLOFF_POS)-transition*(height+FALLOFF_POS-FALLOFF_NEG);float alphaTrans=smoothstep(0.05,-0.05,posAlpha);gl_FragColor.a*=alphaTrans;if(gl_FragColor.a<0.01)discard;}`,Wl=w(Vl,"fragmentShader"),Yl=`#define GLSLIFY 1
varying vec2 vUv;varying vec3 vPosition;void main(){vUv=uv;vPosition=position;gl_Position=projectionMatrix*modelViewMatrix*vec4(position,1.0);}`,jl=w(Yl,"vertexShader"),$l=`precision highp float;
#define GLSLIFY 1
uniform float uTime;uniform vec2 uResolution;uniform float uDpr;uniform sampler2D tNoise;varying vec4 vPos;varying float vPosAlpha;varying float vRnd;const float HEIGHT=1.1;const float FALLOFF_POS=0.1;const float FALLOFF_NEG=-0.4;void main(){vec3 color=vec3(0);float alpha=1.0;vec3 color1=vec3(0.93,0.4,0.28);vec3 color2=vec3(0.93,0.62,0.28);color+=color1;float darkTrans=smoothstep(FALLOFF_NEG*0.1,FALLOFF_NEG*0.8,vPosAlpha);float colorTrans=smoothstep(FALLOFF_NEG,0.0,vPosAlpha);float whiteTrans=smoothstep(FALLOFF_NEG*0.5,0.05,vPosAlpha);color=mix(color,color1,colorTrans);color=mix(color,vec3(1.,1.,0.716),whiteTrans*0.8);color=mix(color,color2,darkTrans);color*=mix(1.0,1.2,vRnd);color*=(0.5+smoothstep(0.75,0.85,whiteTrans)*smoothstep(1.,0.85,whiteTrans)*0.5);gl_FragColor.rgb=color;gl_FragColor.a=alpha;}`,Zl=w($l,"fragmentShader"),Kl=`#define GLSLIFY 1
#define PI 3.141592653589793
attribute vec2 uv;attribute vec3 position;attribute vec3 normal;attribute mat4 instanceMatrix;uniform mat3 normalMatrix;uniform mat4 modelMatrix;uniform mat4 viewMatrix;uniform mat4 modelViewMatrix;uniform mat4 projectionMatrix;uniform float uTime;uniform float uTransition;uniform vec2 uSize;varying vec4 vPos;varying vec4 vInstancedPos;varying float vPosAlpha;varying float vRnd;const float FALLOFF_POS=0.1;const float FALLOFF_NEG=-0.4;highp float rand(const in vec2 uv){const highp float a=12.9898,b=78.233,c=43758.5453;highp float dt=dot(uv.xy,vec2(a,b)),sn=mod(dt,PI);return fract(sin(sn)*c);}vec2 rotate2d(vec2 v,float a){float c=cos(a);float s=sin(a);return mat2(c,-s,s,c)*v;}void main(){vPos=vec4(position,1);vPos.x*=0.5;vPos.y*=0.4;vPos.z*=1.0;vec3 instPos=instanceMatrix[3].xyz;vInstancedPos=instanceMatrix*vPos;float rnd=rand(vec2(instPos.x,instPos.y+instPos.z)*150.0);vRnd=rnd;float transition=uTransition;float height=uSize.y-uSize.x;float y=instPos.y-uSize.x;float posAlpha=(y+sin(instPos.x*5.0)*0.05+FALLOFF_POS)-transition*(height+FALLOFF_POS-FALLOFF_NEG);vPosAlpha=posAlpha;float posTrans=smoothstep(FALLOFF_POS,0.0,posAlpha);float negTrans=smoothstep(FALLOFF_NEG,0.0,posAlpha);float rotTransition=smoothstep(FALLOFF_NEG,FALLOFF_POS,posAlpha);vPos.xyz*=mix(0.7,1.3,rnd);vPos.xyz*=negTrans*posTrans;float rotAmount=mix(0.1,3.0,rnd);vPos.yz=rotate2d(vPos.yz,mix(-rotAmount,rotAmount,rotTransition));vInstancedPos=instanceMatrix*vPos;vec4 mPos=modelMatrix*vInstancedPos;vec4 mvPos=viewMatrix*mPos;gl_Position=projectionMatrix*mvPos;}`,ql=w(Kl,"vertexShader"),Xl=`#define GLSLIFY 1
#include <dithering_fragment>
const float FALLOFF_POS=0.15;const float FALLOFF_NEG=-0.35;float transition=uTransition;float height=uSize.y-uSize.x;float y=vPosition.y-uSize.x;float posAlpha=(y+sin(vPosition.x*5.0)*0.05+FALLOFF_POS)-transition*(height+FALLOFF_POS-FALLOFF_NEG);float posTrans=smoothstep(FALLOFF_POS,0.0,posAlpha);float negTrans=smoothstep(FALLOFF_NEG,0.0,posAlpha);float alphaTrans=smoothstep(0.05,-0.05,posAlpha);float colorTrans=smoothstep(FALLOFF_NEG,0.0,posAlpha);float whiteTrans=smoothstep(FALLOFF_NEG*0.5,0.05,posAlpha);vec3 bloomColor=vec3(1.0,0.44,0.2);gl_FragColor.rgb=mix(gl_FragColor.rgb,bloomColor,colorTrans);gl_FragColor.rgb=mix(gl_FragColor.rgb,vec3(1),whiteTrans);gl_FragColor.rgb=mix(gl_FragColor.rgb,bloomColor,sampledDiffuseColor.g);gl_FragColor.a*=alphaTrans;if(gl_FragColor.a<0.01)discard;`,fo=w(Xl,"fragmentShader"),Ql=`#define GLSLIFY 1
uniform float opacity;uniform float uTransition;uniform vec2 uSize;`,ho=w(Ql,"fragmentShader");class Jl{constructor({view:t,config:e,debugContainer:i,gltf:o}){W(this);const n={value:M.get("demoNoise")};n.value.wrapS=n.value.wrapT=Z;const{uTime:r,uResolution:s,uDpr:c}=z.uniforms,m=this.uTransition={value:0},f={value:new I};this.griffonScaleNode=o.scene.getObjectByName("TRANSITION_GRIFFON_ARMOUR");const v=o.scene.getObjectByName("GRIFFON_ARMOUR");this.griffon=v,f.value.set(v.geometry.boundingBox.min.y,v.geometry.boundingBox.max.y);const h={uTransition:m,uSize:f},g=[{match:"uniform float opacity;",replacement:ho},{match:"#include <map_fragment>",replacement:{shader:`
					#ifdef USE_MAP
						vec4 sampledDiffuseColor = texture2D( map, vMapUv );
						#ifdef DECODE_VIDEO_TEXTURE
							sampledDiffuseColor = vec4( mix( pow( sampledDiffuseColor.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), sampledDiffuseColor.rgb * 0.0773993808, vec3( lessThanEqual( sampledDiffuseColor.rgb, vec3( 0.04045 ) ) ) ), sampledDiffuseColor.w );

						#endif
						diffuseColor *= vec4(vec3(sampledDiffuseColor.r), 1.);
					#endif
					`}},{match:"#include <dithering_fragment>",replacement:fo}];v.material.blending=ia,v.material.transparent=!0,Xt(ho,v.material),Xt(fo,v.material),v.material.emissiveMap=null,v.material.emissive=new V(0,0,0),v.material.onBeforeCompile=E=>{E.defines.USE_ALPHAHASH="",Object.assign(E.uniforms,h),g.forEach(({match:R,replacement:d})=>{E.fragmentShader=E.fragmentShader.replace(R,d.shader)})};const b=new Y({uniforms:{...h,tEmissive:{value:v.material.map}}});Wl.use(b),jl.use(b),v.userData.bloomMaterial=b,v.userData.renderBloom=!0;const x=12e3,p=new Li(new oa(1,0),new $({uniforms:{uTime:r,tNoise:n,uTransition:m,uSize:f}}),x);ql.use(p.material),Zl.use(p.material),p.userData.renderBloom=!0,v.add(p),this._instancedMesh=p;const y=v.geometry.attributes,_=new le,S=new A,D=new A;for(let E=0;E<x;E++){const R=Math.floor(Math.random()*y.position.count);_.position.set(0,0,0),S.fromArray(y.normal.array,R*3),_.lookAt(S),_.position.fromArray(y.position.array,R*3),D.random().subScalar(.5).multiplyScalar(.005),_.position.add(D),_.scale.setScalar(.015),_.updateMatrix(),p.setMatrixAt(E,_.matrix)}this._debug=this._createDebug(i)}_createDebug(t){if(!T)return;const e=T.addFolder({title:"Griffon Armour",parent:t});e.addInput(this.griffon.material,"visible",{label:"Visible"}),e.addInput(this.griffon.userData,"renderBloom",{label:"Bloom"});const i=e.addFolder({title:"Particles",parent:t});i.addInput(this._instancedMesh,"visible",{label:"Visible"}),i.addInput(this._instancedMesh.userData,"renderBloom",{label:"Bloom"})}update({delta:t,time:e}){this.griffonScaleNode&&(this.uTransition.value=this.griffonScaleNode.scale.y,this.griffon.visible&&this.griffon.scale.x<=.01&&(this.griffon.visible=!1),!this.griffon.visible&&this.griffon.scale.x>.01&&(this.griffon.visible=!0),this._instancedMesh.visible=this.griffonScaleNode.scale.y>.001&&this.griffonScaleNode.scale.y<.999)}}const xt={name:"CopyShader",uniforms:{tDiffuse:{value:null},opacity:{value:1}},vertexShader:`

		varying vec2 vUv;

		void main() {

			vUv = uv;
			gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );

		}`,fragmentShader:`

		uniform float opacity;

		uniform sampler2D tDiffuse;

		varying vec2 vUv;

		void main() {

			vec4 texel = texture2D( tDiffuse, vUv );
			gl_FragColor = opacity * texel;


		}`};class Gt{constructor(){this.isPass=!0,this.enabled=!0,this.needsSwap=!0,this.clear=!1,this.renderToScreen=!1}setSize(){}render(){console.error("THREE.Pass: .render() must be implemented in derived pass.")}dispose(){}}const ec=new Oi(-1,1,1,-1,0,1);class tc extends ri{constructor(){super(),this.setAttribute("position",new Pt([-1,3,0,-1,-1,0,3,-1,0],3)),this.setAttribute("uv",new Pt([0,2,0,0,2,0],2))}}const ic=new tc;class Fi{constructor(t){this._mesh=new te(ic,t)}dispose(){this._mesh.geometry.dispose()}render(t){t.render(this._mesh,ec)}get material(){return this._mesh.material}set material(t){this._mesh.material=t}}class pn extends Gt{constructor(t,e){super(),this.textureID=e!==void 0?e:"tDiffuse",t instanceof Y?(this.uniforms=t.uniforms,this.material=t):t&&(this.uniforms=bt.clone(t.uniforms),this.material=new Y({name:t.name!==void 0?t.name:"unspecified",defines:Object.assign({},t.defines),uniforms:this.uniforms,vertexShader:t.vertexShader,fragmentShader:t.fragmentShader})),this.fsQuad=new Fi(this.material)}render(t,e,i){this.uniforms[this.textureID]&&(this.uniforms[this.textureID].value=i.texture),this.fsQuad.material=this.material,this.renderToScreen?(t.setRenderTarget(null),this.fsQuad.render(t)):(t.setRenderTarget(e),this.clear&&t.clear(t.autoClearColor,t.autoClearDepth,t.autoClearStencil),this.fsQuad.render(t))}dispose(){this.material.dispose(),this.fsQuad.dispose()}}class go extends Gt{constructor(t,e){super(),this.scene=t,this.camera=e,this.clear=!0,this.needsSwap=!1,this.inverse=!1}render(t,e,i){const o=t.getContext(),n=t.state;n.buffers.color.setMask(!1),n.buffers.depth.setMask(!1),n.buffers.color.setLocked(!0),n.buffers.depth.setLocked(!0);let r,s;this.inverse?(r=0,s=1):(r=1,s=0),n.buffers.stencil.setTest(!0),n.buffers.stencil.setOp(o.REPLACE,o.REPLACE,o.REPLACE),n.buffers.stencil.setFunc(o.ALWAYS,r,4294967295),n.buffers.stencil.setClear(s),n.buffers.stencil.setLocked(!0),t.setRenderTarget(i),this.clear&&t.clear(),t.render(this.scene,this.camera),t.setRenderTarget(e),this.clear&&t.clear(),t.render(this.scene,this.camera),n.buffers.color.setLocked(!1),n.buffers.depth.setLocked(!1),n.buffers.color.setMask(!0),n.buffers.depth.setMask(!0),n.buffers.stencil.setLocked(!1),n.buffers.stencil.setFunc(o.EQUAL,1,4294967295),n.buffers.stencil.setOp(o.KEEP,o.KEEP,o.KEEP),n.buffers.stencil.setLocked(!0)}}class oc extends Gt{constructor(){super(),this.needsSwap=!1}render(t){t.state.buffers.stencil.setLocked(!1),t.state.buffers.stencil.setTest(!1)}}class nc{constructor(t,e){if(this.renderer=t,this._pixelRatio=t.getPixelRatio(),e===void 0){const i=t.getSize(new I);this._width=i.width,this._height=i.height,e=new ye(this._width*this._pixelRatio,this._height*this._pixelRatio,{type:Le}),e.texture.name="EffectComposer.rt1"}else this._width=e.width,this._height=e.height;this.renderTarget1=e,this.renderTarget2=e.clone(),this.renderTarget2.texture.name="EffectComposer.rt2",this.writeBuffer=this.renderTarget1,this.readBuffer=this.renderTarget2,this.renderToScreen=!0,this.passes=[],this.copyPass=new pn(xt),this.copyPass.material.blending=Yo,this.clock=new Mi}swapBuffers(){const t=this.readBuffer;this.readBuffer=this.writeBuffer,this.writeBuffer=t}addPass(t){this.passes.push(t),t.setSize(this._width*this._pixelRatio,this._height*this._pixelRatio)}insertPass(t,e){this.passes.splice(e,0,t),t.setSize(this._width*this._pixelRatio,this._height*this._pixelRatio)}removePass(t){const e=this.passes.indexOf(t);e!==-1&&this.passes.splice(e,1)}isLastEnabledPass(t){for(let e=t+1;e<this.passes.length;e++)if(this.passes[e].enabled)return!1;return!0}render(t){t===void 0&&(t=this.clock.getDelta());const e=this.renderer.getRenderTarget();let i=!1;for(let o=0,n=this.passes.length;o<n;o++){const r=this.passes[o];if(r.enabled!==!1){if(r.renderToScreen=this.renderToScreen&&this.isLastEnabledPass(o),r.render(this.renderer,this.writeBuffer,this.readBuffer,t,i),r.needsSwap){if(i){const s=this.renderer.getContext(),c=this.renderer.state.buffers.stencil;c.setFunc(s.NOTEQUAL,1,4294967295),this.copyPass.render(this.renderer,this.writeBuffer,this.readBuffer,t),c.setFunc(s.EQUAL,1,4294967295)}this.swapBuffers()}go!==void 0&&(r instanceof go?i=!0:r instanceof oc&&(i=!1))}}this.renderer.setRenderTarget(e)}reset(t){if(t===void 0){const e=this.renderer.getSize(new I);this._pixelRatio=this.renderer.getPixelRatio(),this._width=e.width,this._height=e.height,t=this.renderTarget1.clone(),t.setSize(this._width*this._pixelRatio,this._height*this._pixelRatio)}this.renderTarget1.dispose(),this.renderTarget2.dispose(),this.renderTarget1=t,this.renderTarget2=t.clone(),this.writeBuffer=this.renderTarget1,this.readBuffer=this.renderTarget2}setSize(t,e){this._width=t,this._height=e;const i=this._width*this._pixelRatio,o=this._height*this._pixelRatio;this.renderTarget1.setSize(i,o),this.renderTarget2.setSize(i,o);for(let n=0;n<this.passes.length;n++)this.passes[n].setSize(i,o)}setPixelRatio(t){this._pixelRatio=t,this.setSize(this._width,this._height)}dispose(){this.renderTarget1.dispose(),this.renderTarget2.dispose(),this.copyPass.dispose()}}class ac extends Gt{constructor(t,e,i,o,n){super(),this._scene=t,this._camera=e,this._overrideMaterial=i,this._clearColor=o,this._clearAlpha=n!==void 0?n:0,this._secondaryScene=null,this._secondaryCamera=null,this._thirdScene=null,this._thirdCamera=null,this._oldClearColor=new V,this._renderTarget=this._createRenderTarget(),this._material=this._createMaterial(),this._fsQuad=new Fi(this._material),this.clear=!0,this.clearDepth=!1,this.needsSwap=!1}get renderTarget(){return this._renderTarget}get camera(){return this._camera}set camera(t){this._camera=t}get scene(){return this._scene}set scene(t){this._scene=t}get secondaryCamera(){return this._secondaryCamera}set secondaryCamera(t){this._secondaryCamera=t}get secondaryScene(){return this._secondaryScene}set secondaryScene(t){this._secondaryScene=t}get thirdCamera(){return this._thirdCamera}set thirdCamera(t){this._thirdCamera=t}get thirdScene(){return this._thirdScene}set thirdScene(t){this._thirdScene=t}_createRenderTarget(){const t=new ye(0,0);return t.samples=Ko.composer.samples,t.texture.format=Fe,t.texture.colorSpace=qo,t.texture.minFilter=ie,t.texture.magFilter=ie,t.texture.generateMipmaps=!1,t.texture.depthBuffer=!0,t.depthTexture=new Xo,t}_createMaterial(){const t=xt,e=bt.clone(t.uniforms);return e.tDiffuse.value=this._renderTarget.texture,new Y({uniforms:e,vertexShader:t.vertexShader,fragmentShader:t.fragmentShader})}render(t,e,i){const o=t.autoClear;t.autoClear=!1;let n,r;this._overrideMaterial!==void 0&&this._scene&&(r=this._scene.overrideMaterial,this._scene.overrideMaterial=this._overrideMaterial),this._clearColor&&(t.getClearColor(this._oldClearColor),n=t.getClearAlpha(),t.setClearColor(this._clearColor,this._clearAlpha)),this.clearDepth&&t.clearDepth(),t.setRenderTarget(this._renderTarget),this.clear&&t.clear(t.autoClearColor,t.autoClearDepth,t.autoClearStencil),this._scene&&this._camera&&t.render(this._scene,this._camera),this._secondaryScene&&this._secondaryCamera&&(t.clearDepth(),t.render(this._secondaryScene,this._secondaryCamera)),this._thirdScene&&this._thirdCamera&&(t.clearDepth(),t.render(this._thirdScene,this._thirdCamera)),t.setRenderTarget(this.renderToScreen?null:i),this._fsQuad.render(t),this._clearColor&&t.setClearColor(this._oldClearColor,n),this._overrideMaterial!==void 0&&this._scene&&(this._scene.overrideMaterial=r),t.autoClear=o}setSize(t,e){this._renderTarget.setSize(t,e)}}const Vt={shaderID:"luminosityHighPass",uniforms:{tDiffuse:{value:null},luminosityThreshold:{value:1},smoothWidth:{value:1},defaultColor:{value:new V(0)},defaultOpacity:{value:0}},vertexShader:`

        varying vec2 vUv;

        void main() {

            vUv = uv;

            gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );

        }`,fragmentShader:`

        uniform sampler2D tDiffuse;
        uniform vec3 defaultColor;
        uniform float defaultOpacity;
        uniform float luminosityThreshold;
        uniform float smoothWidth;

        varying vec2 vUv;

        void main() {

            vec4 texel = texture2D( tDiffuse, vUv );

            vec3 luma = vec3( 0.299, 0.587, 0.114 );

            float v = dot( texel.xyz, luma );

            vec4 outputColor = vec4( defaultColor.rgb, defaultOpacity );

            float alpha = smoothstep( luminosityThreshold, luminosityThreshold + smoothWidth, v );

            gl_FragColor = mix( outputColor, texel, alpha );
        }`},bi={shaderID:"colorFilter",uniforms:{tDiffuse:{value:null},colorThreshold:{value:1},smoothWidth:{value:1},defaultColor:{value:new V(0)},colorFilter:{value:new V(16777215)},defaultOpacity:{value:0}},vertexShader:`

        varying vec2 vUv;

        void main() {

            vUv = uv;

            gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );

        }`,fragmentShader:`

        uniform sampler2D tDiffuse;
        uniform vec3 defaultColor;
        uniform float defaultOpacity;
		uniform vec3 colorFilter;
        uniform float colorThreshold;
        uniform float smoothWidth;

        varying vec2 vUv;

        void main() {

            vec4 texel = texture2D( tDiffuse, vUv );

            float v = dot( normalize( texel.xyz ), normalize( colorFilter ) );

            vec4 outputColor = vec4( defaultColor.rgb, defaultOpacity );

            float alpha = smoothstep( colorThreshold, colorThreshold + smoothWidth, v );

            gl_FragColor = mix( outputColor, texel, alpha );
        }`},rc=`#define GLSLIFY 1
#include <common>
varying vec2 vUv;uniform sampler2D colorTexture;uniform vec2 texSize;uniform vec2 direction;float gaussianPdf(in float x,in float sigma){return 0.39894*exp(-0.5*x*x/(sigma*sigma))/sigma;}void main(){vec2 invSize=1.0/texSize;float fSigma=float(SIGMA);float weightSum=gaussianPdf(0.0,fSigma);vec3 diffuseSum=texture2D(colorTexture,vUv).rgb*weightSum;float alphaSum=0.0;for(int i=1;i<KERNEL_RADIUS;i++){float x=float(i);float w=gaussianPdf(x,fSigma);vec2 uvOffset=direction*invSize*x;vec4 sample1=texture2D(colorTexture,vUv+uvOffset);vec4 sample2=texture2D(colorTexture,vUv-uvOffset);diffuseSum+=(sample1.rgb+sample2.rgb)*w;alphaSum+=(sample1.a+sample2.a)*w;weightSum+=2.0*w;}gl_FragColor=vec4(diffuseSum/weightSum,1.0);}`,sc=`#define GLSLIFY 1
varying vec2 vUv;void main(){vUv=uv;gl_Position=projectionMatrix*modelViewMatrix*vec4(position,1.0);}`,lc=`#define GLSLIFY 1
varying vec2 vUv;uniform sampler2D blurTexture1;uniform sampler2D blurTexture2;uniform sampler2D blurTexture3;uniform sampler2D blurTexture4;uniform sampler2D blurTexture5;uniform float bloomStrength;uniform float bloomRadius;uniform float bloomFactors[NUM_MIPS];uniform vec3 bloomTintColors[NUM_MIPS];float lerpBloomFactor(const in float factor){float mirrorFactor=1.2-factor;return mix(factor,mirrorFactor,bloomRadius);}void main(){gl_FragColor=bloomStrength*(lerpBloomFactor(bloomFactors[0])*vec4(bloomTintColors[0],1.0)*texture2D(blurTexture1,vUv)+lerpBloomFactor(bloomFactors[1])*vec4(bloomTintColors[1],1.0)*texture2D(blurTexture2,vUv)+lerpBloomFactor(bloomFactors[2])*vec4(bloomTintColors[2],1.0)*texture2D(blurTexture3,vUv)+lerpBloomFactor(bloomFactors[3])*vec4(bloomTintColors[3],1.0)*texture2D(blurTexture4,vUv)+lerpBloomFactor(bloomFactors[4])*vec4(bloomTintColors[4],1.0)*texture2D(blurTexture5,vUv));}`,cc=`#define GLSLIFY 1
varying vec2 vUv;void main(){vUv=uv;gl_Position=projectionMatrix*modelViewMatrix*vec4(position,1.0);}`,po=`#define GLSLIFY 1
void main(){gl_FragColor=vec4(0.0,0.0,0.0,1.0);}`,_o=`#define GLSLIFY 1
attribute vec3 position;
#ifdef USE_INSTANCING
attribute mat4 instanceMatrix;
#endif
uniform mat4 modelViewMatrix;uniform mat4 projectionMatrix;void main(){
#if defined(USE_INSTANCING)
gl_Position=projectionMatrix*modelViewMatrix*instanceMatrix*vec4(position,1.0);
#else
gl_Position=projectionMatrix*modelViewMatrix*vec4(position,1.0);
#endif
}`,uc=`#define GLSLIFY 1
varying vec2 vUv;uniform sampler2D uTexture;void main(){vec4 color=texture2D(uTexture,vUv);gl_FragColor=color;}`,mc=`#define GLSLIFY 1
varying vec2 vUv;void main(){gl_Position=projectionMatrix*modelViewMatrix*vec4(position,1.0);vUv=uv;}`,Mt=5,dc=new I(1,0),vc=new I(0,1),Ei="SELECTIVE",yi="LUMINOSITY",xo="TEXTURE",bo="COLOR";class fc extends Gt{constructor(t={}){super(),this._type=t.type||yi,this._visibility=1,this._strength=t.strength!==void 0?t.strength:1,this._radius=t.radius||.1,this._threshold=t.threshold||0,this._colorFilter=t.colorFilter||new V(16777215),this._smoothWidth=t.smoothWidth||1,this._texture=t.texture,this._camera=t.camera,this._scene=t.scene,this._resolutionScale=t.resolutionScale||.5,this._lastFragmentShader=t.lastFragmentShader||xt.fragmentShader,this._burn=0,this._clearColor=new V(0,0,0),this._oldClearColor=new V,this._oldClearAlpha=1,this._renderTargetBright=this._createRenderTargetBright(),this._renderTargetsBlur=this._createRenderTargetsBlur(),this._separableBlurMaterials=this._createSeparableBlurMaterials(),this._compositeMaterial=this._createCompositeMaterial(),this._materialCopy=this._createMaterialCopy(),this._basicMaterial=this._createBasicMaterial(),this._fullscreenQuad=this._createFullscreenQuad(),this._type===yi&&(this._materialHighPassFilter=this._createMaterialHighPassFilter()),this._type===bo&&(this._materialColorFilter=this._createMaterialColorFilter()),this._type===Ei&&(this._materialOverride=this._createMaterialOverride(),this._materialInstanceOverride=this._createMaterialIntanceOverride()),this._type===xo&&(this._materialTexture=this._createMaterialTexture()),this.enabled=!0,this.secondaryEnabled=!1,this.needsSwap=!1}dispose(){for(let t=0;t<this.horizontal.length;t++)this._renderTargetsBlur.horizontal[t].dispose();for(let t=0;t<this.vertical.length;t++)this._renderTargetsBlur.vertical[t].dispose();this._renderTargetBright.dispose()}get visibility(){return this._visibility}set visibility(t){this._visibility=Math.max(0,Math.min(1,t))}get burn(){return this._burn}set burn(t){this._burn=t}get strength(){return this._strength}set strength(t){this._strength=t}get radius(){return this._radius}set radius(t){this._radius=t}get threshold(){return this._threshold}set threshold(t){this._threshold=t}get colorFilter(){return"#"+this._colorFilter.getHexString()}set colorFilter(t){this._colorFilter.set(t)}get smoothWidth(){return this._smoothWidth}set smoothWidth(t){this._smoothWidth=t}get renderTargetBright(){return this._renderTargetBright}get renderTargetsBlur(){return this._renderTargetsBlur}get camera(){return this._camera}set camera(t){this._camera=t}get scene(){return this._scene}set scene(t){this._scene=t}get texture(){return this._texture}set texture(t){this._texture=t}_createRenderTargetBright(){const t=new ye(0,0);return t.texture.name="CustomUnrealBloomPass.bright",t.texture.minFilter=ie,t.texture.magFilter=ie,t.texture.format=Fe,t.texture.generateMipmaps=!1,t}_createRenderTargetsBlur(){const t=[],e=[],i={minFilter:ie,magFilter:ie,format:Fe};for(let o=0;o<Mt;o++){const n=new ye(0,0,i);n.texture.name="CustomUnrealBloomPass.h"+o,n.texture.generateMipmaps=!1,t.push(n);const r=new ye(0,0,i);r.texture.name="CustomUnrealBloomPass.v"+o,r.texture.generateMipmaps=!1,e.push(r)}return{horizontal:t,vertical:e}}_createMaterialHighPassFilter(){Vt===void 0&&console.error("THREE.CustomUnrealBloomPass relies on LuminosityHighPassShader");const t=bt.clone(Vt.uniforms);return t.luminosityThreshold.value=this._threshold,t.smoothWidth.value=this._smoothWidth,new Y({uniforms:t,vertexShader:Vt.vertexShader,fragmentShader:Vt.fragmentShader})}_createMaterialColorFilter(){const t=bt.clone(bi.uniforms);return t.colorThreshold.value=this._threshold,t.smoothWidth.value=this._smoothWidth,t.colorFilter.value.copy(this._colorFilter),new Y({uniforms:t,vertexShader:bi.vertexShader,fragmentShader:bi.fragmentShader})}_createSeparableBlurMaterials(){const t=[],e=[3,5,7,9,11];for(let i=0;i<Mt;i++){const o=e[i],n=new Y({vertexShader:sc,fragmentShader:rc,uniforms:{colorTexture:{value:null},texSize:{value:new I(.5,.5)},direction:{value:new I(.5,.5)}},defines:{KERNEL_RADIUS:o,SIGMA:o}});t.push(n)}return t}_createCompositeMaterial(){const t=new Y({vertexShader:cc,fragmentShader:lc,uniforms:{blurTexture1:{value:null},blurTexture2:{value:null},blurTexture3:{value:null},blurTexture4:{value:null},blurTexture5:{value:null},dirtTexture:{value:null},bloomStrength:{value:1},bloomFactors:{value:null},bloomTintColors:{value:null},bloomRadius:{value:0}},defines:{NUM_MIPS:Mt}});t.uniforms.blurTexture1.value=this._renderTargetsBlur.vertical[0].texture,t.uniforms.blurTexture2.value=this._renderTargetsBlur.vertical[1].texture,t.uniforms.blurTexture3.value=this._renderTargetsBlur.vertical[2].texture,t.uniforms.blurTexture4.value=this._renderTargetsBlur.vertical[3].texture,t.uniforms.blurTexture5.value=this._renderTargetsBlur.vertical[4].texture,t.uniforms.bloomStrength.value=this._strength,t.uniforms.bloomRadius.value=this._radius,t.needsUpdate=!0;const e=[1,.8,.6,.4,.2];t.uniforms.bloomFactors.value=e;const i=[new A(1,1,1),new A(1,1,1),new A(1,1,1),new A(1,1,1),new A(1,1,1)];return t.uniforms.bloomTintColors.value=i,t}_createMaterialCopy(){xt===void 0&&console.error("THREE.CustomUnrealBloomPass relies on CopyShader");const t=bt.clone(xt.uniforms);return t.opacity.value=1,new Y({uniforms:t,vertexShader:xt.vertexShader,fragmentShader:this._lastFragmentShader,blending:Ve,depthTest:!1,depthWrite:!1,transparent:!0})}_createBasicMaterial(){return new na}_createFullscreenQuad(){return new Fi(null)}_createMaterialOverride(){return new $({vertexShader:_o,fragmentShader:po})}_createMaterialIntanceOverride(){return new $({vertexShader:_o,fragmentShader:po,defines:{USE_INSTANCING:""}})}_createMaterialTexture(){return new Y({uniforms:{uTexture:{value:this._texture}},vertexShader:mc,fragmentShader:uc})}render(t,e,i,o,n){t.getClearColor(this._oldClearColor),this._oldClearAlpha=t.getClearAlpha();const r=t.autoClear;t.autoClear=!1,t.setClearColor(this._clearColor,0),n&&t.state.buffers.stencil.setTest(!1),this._renderInput(t,i),this._type===yi&&this._renderBright(t,i),this._type===bo&&this._renderColorFilter(t,i),this._type===Ei&&this._renderSelective(t),this._type===xo&&this._renderTexture(t),this._renderBlur(t),this._renderComposite(t),this._renderOutput(t,i,n),t.setClearColor(this._oldClearColor,this._oldClearAlpha),t.autoClear=r}_renderInput(t,e){this.renderToScreen&&(this._fullscreenQuad.material=this._basicMaterial,this._basicMaterial.map=e.texture,t.setRenderTarget(null),this._fullscreenQuad.render(t))}_renderBright(t,e){this._materialHighPassFilter.uniforms.tDiffuse.value=e.texture,this._materialHighPassFilter.uniforms.luminosityThreshold.value=this._threshold,this._materialHighPassFilter.uniforms.smoothWidth.value=this._smoothWidth,this._fullscreenQuad.material=this._materialHighPassFilter,t.setRenderTarget(this._renderTargetBright),this._fullscreenQuad.render(t)}_renderColorFilter(t,e){this._materialColorFilter.uniforms.tDiffuse.value=e.texture,this._materialColorFilter.uniforms.colorThreshold.value=this._threshold,this._materialColorFilter.uniforms.smoothWidth.value=this._smoothWidth,this._materialColorFilter.uniforms.colorFilter.value.copy(this._colorFilter),this._fullscreenQuad.material=this._materialColorFilter,t.setRenderTarget(this._renderTargetBright),this._fullscreenQuad.render(t)}_renderSelective(t){t.setRenderTarget(this._renderTargetBright),this._scene.traverse(e=>{(e.type==="Mesh"||e.type==="SkinnedMesh"||e.type==="Points"||e.type==="Sprite"||e.type==="Reflector")&&(e.userData&&typeof e.userData.renderBloom<"u"&&e.visible?(e.userData.originalVisibilityState=e.visible,e.visible=e.userData.renderBloom,e.userData.renderingBloom=!0,e.userData.bloomMaterial&&(e.userData.originalMaterial=e.material,e.material=e.userData.bloomMaterial)):e.visible&&(e.userData.material=e.material,e.userData.originalVisibilityState=!0,e.instanceMatrix?e.material=this._materialInstanceOverride:e.material=this._materialOverride,e.userData.invisibleForBloom=!0))}),t.clear(),t.render(this._scene,this._camera),this._scene.traverse(e=>{e.userData&&(e.userData.renderingBloom&&(e.userData.renderingBloom=!1),e.userData.originalVisibilityState&&(e.visible=e.userData.originalVisibilityState,e.userData.originalVisibilityState=null),e.userData.invisibleForBloom&&(e.material=e.userData.material,e.userData.invisibleForBloom=!1),e.userData.bloomMaterial&&e.userData.originalMaterial&&(e.material=e.userData.originalMaterial))})}_renderTexture(t){this._fullscreenQuad.material=this._materialTexture,t.setRenderTarget(this._renderTargetBright),this._fullscreenQuad.render(t)}_renderBlur(t){let e=this._renderTargetBright;for(let i=0;i<Mt;i++)this._fullscreenQuad.material=this._separableBlurMaterials[i],this._separableBlurMaterials[i].uniforms.colorTexture.value=e.texture,this._separableBlurMaterials[i].uniforms.direction.value=dc,t.setRenderTarget(this._renderTargetsBlur.horizontal[i]),this._fullscreenQuad.render(t),this._separableBlurMaterials[i].uniforms.colorTexture.value=this._renderTargetsBlur.horizontal[i].texture,this._separableBlurMaterials[i].uniforms.direction.value=vc,t.setRenderTarget(this._renderTargetsBlur.vertical[i]),this._fullscreenQuad.render(t),e=this._renderTargetsBlur.vertical[i]}_renderComposite(t){this._fullscreenQuad.material=this._compositeMaterial,this._compositeMaterial.uniforms.bloomStrength.value=Lt(this._strength,3,this._burn),this._compositeMaterial.uniforms.bloomRadius.value=Lt(this._radius,1,this._burn),t.setRenderTarget(this._renderTargetsBlur.horizontal[0]),t.clear(),this._fullscreenQuad.render(t)}_renderOutput(t,e,i){this._fullscreenQuad.material=this._materialCopy,this._materialCopy.uniforms.tDiffuse.value=this._renderTargetsBlur.horizontal[0].texture,this._materialCopy.uniforms.opacity.value=this._visibility,i&&t.state.buffers.stencil.setTest(!0),this.renderToScreen?(t.setRenderTarget(null),this._fullscreenQuad.render(t)):(t.setRenderTarget(e),this._fullscreenQuad.render(t))}setSize(t,e){this._width=t,this._height=e;let i=Math.round(t*this._resolutionScale),o=Math.round(e*this._resolutionScale);this._renderTargetBright.setSize(i,o);for(let n=0;n<Mt;n++)this._renderTargetsBlur.horizontal[n].setSize(i,o),this._renderTargetsBlur.vertical[n].setSize(i,o),this._separableBlurMaterials[n].uniforms.texSize.value=new I(i,o),i=Math.round(i/2),o=Math.round(o/2)}}new V;class hc{constructor(t,e={}){const i=this,o={densityDissipation:.95,velocityDissipation:.95,pressureDissipation:.95,curlStrength:-2.5,radius:.03/100},n=Object.assign({},o,e);Object.assign(e,n);const r=new Qo;new V(1,1,1),this.enabled=!0;const s=ve();this.uniform={value:null};function c({width:O,height:J,minFilter:re=ie,magFilter:we=re,type:Re,format:Ae,depthBuffer:ot}={}){const je={minFilter:re,magFilter:we,type:Re,format:Ae,depthBuffer:ot},Ue={read:new ye(O,J,je),write:new ye(O,J,je),swap:()=>{const Q=Ue.read;Ue.read=Ue.write,Ue.write=Q}};return Ue}const m=128,f=512,v=10,h={value:new I(1/m,1/m)};let g,b,x;t.isWebgl2?(g=Fe,b=en,x=Jo):(g=Fe,b=Fe,x=Fe);const p=c({width:f,height:f,type:Le,format:g,minFilter:ie,magFilter:ie,depthBuffer:!1});this.uniform.value=p.read.texture;const y=c({width:m,height:m,type:Le,format:b,minFilter:ie,magFilter:ie,depthBuffer:!1}),_=c({width:m,height:m,type:Le,format:x,minFilter:Ne,magFilter:Ne,depthBuffer:!1}),S=new ye(m,m,{type:Le,format:x,minFilter:Ne,magFilter:Ne,depthBuffer:!1}),D=new ye(m,m,{type:Le,format:x,minFilter:Ne,magFilter:Ne,depthBuffer:!1}),E=new si,R=new te(E,new $({vertexShader:at,fragmentShader:gc,uniforms:{texelSize:h,uTexture:{value:null},value:{value:1}},depthTest:!1,depthWrite:!1}));R.scene=new pe,R.scene.add(R),R.frustumCulled=!1;const d=new te(E,new $({vertexShader:at,fragmentShader:pc,uniforms:{texelSize:h,uTarget:{value:null},aspectRatio:{value:1},color:{value:new A},point:{value:new I},radius:{value:.03/100}},depthTest:!1,depthWrite:!1}));d.scene=new pe,d.scene.add(d),d.frustumCulled=!1;const N=new te(E,new $({vertexShader:at,fragmentShader:_c,uniforms:{texelSize:h,dyeTexelSize:{value:new I(1/f,1/f)},uVelocity:{value:null},uSource:{value:null},dt:{value:.016},dissipation:{value:1}},depthTest:!1,depthWrite:!1}));N.scene=new pe,N.scene.add(N),N.frustumCulled=!1;const K=new te(E,new $({vertexShader:at,fragmentShader:xc,uniforms:{texelSize:h,uVelocity:{value:null}},depthTest:!1,depthWrite:!1}));K.scene=new pe,K.scene.add(K),K.frustumCulled=!1;const ce=new te(E,new $({vertexShader:at,fragmentShader:bc,uniforms:{texelSize:h,uVelocity:{value:null}},depthTest:!1,depthWrite:!1}));ce.scene=new pe,ce.scene.add(ce),ce.frustumCulled=!1;const q=new te(E,new $({vertexShader:at,fragmentShader:yc,uniforms:{texelSize:h,uVelocity:{value:null},uCurl:{value:null},curl:{value:5},dt:{value:.016}},depthTest:!1,depthWrite:!1}));q.scene=new pe,q.scene.add(q),q.frustumCulled=!1;const L=new te(E,new $({vertexShader:at,fragmentShader:Sc,uniforms:{texelSize:h,uPressure:{value:null},uDivergence:{value:null}},depthTest:!1,depthWrite:!1}));L.scene=new pe,L.scene.add(L),L.frustumCulled=!1;const H=new te(E,new $({vertexShader:at,fragmentShader:Cc,uniforms:{texelSize:h,uPressure:{value:null},uVelocity:{value:null}},depthTest:!1,depthWrite:!1}));H.scene=new pe,H.scene.add(H),H.frustumCulled=!1;const U=[];"ontouchstart"in window?(window.addEventListener("touchstart",X,!1),window.addEventListener("touchmove",X,!1)):window.addEventListener("pointermove",X,!1);const k=new I;function X(O){const J=O.getCoalescedEvents!=null?O.getCoalescedEvents():[];if(J.length>1){J.forEach(X);return}O.changedTouches&&O.changedTouches.length&&(O.x=O.changedTouches[0].pageX,O.y=O.changedTouches[0].pageY),O.x===void 0&&(O.x=O.pageX,O.y=O.pageY),k.isInit||(k.isInit=!0,k.set(O.x,O.y));let re=O.x-k.x,we=O.y-k.y;const Re=20;re&&(re/=Math.max(1,Math.abs(re)/Re)),we&&(we/=Math.max(1,Math.abs(we)/Re)),k.set(O.x,O.y),(Math.abs(re)||Math.abs(we))&&U.push({x:O.x/window.innerWidth,y:1-O.y/window.innerHeight,dx:re*5,dy:we*-5})}function fe({x:O,y:J,dx:re,dy:we}){d.material.uniforms.uTarget.value=y.read.texture,d.material.uniforms.aspectRatio.value=window.innerWidth/window.innerHeight,d.material.uniforms.point.value.set(O,J),d.material.uniforms.color.value.set(re,we,1),s.cursor.isOver&&s.isWhitePage?d.material.uniforms.radius.value=0:d.material.uniforms.radius.value=e.radius,t.setRenderTarget(y.write),t.render(d.scene,r),y.swap(),d.material.uniforms.uTarget.value=p.read.texture,t.setRenderTarget(p.write),t.render(d.scene,r),p.swap()}St.add(me,70);function me(O){if(i.enabled){t.autoClear,t.autoClear=!1;for(let J=U.length-1;J>=0;J--)fe(U.splice(J,1)[0]);ce.material.uniforms.uVelocity.value=y.read.texture,t.setRenderTarget(D),t.render(ce.scene,r),q.material.uniforms.uVelocity.value=y.read.texture,q.material.uniforms.uCurl.value=D.texture,q.material.uniforms.curl.value=e.curlStrength,t.setRenderTarget(y.write),t.render(q.scene,r),y.swap(),K.material.uniforms.uVelocity.value=y.read.texture,t.setRenderTarget(S),t.render(K.scene,r),R.material.uniforms.uTexture.value=_.read.texture,R.material.uniforms.value.value=e.pressureDissipation,t.setRenderTarget(_.write),t.render(R.scene,r),_.swap(),L.material.uniforms.uDivergence.value=S.texture;for(let J=0;J<v;J++)L.material.uniforms.uPressure.value=_.read.texture,t.setRenderTarget(_.write),t.render(L.scene,r),_.swap();H.material.uniforms.uPressure.value=_.read.texture,H.material.uniforms.uVelocity.value=y.read.texture,t.setRenderTarget(y.write),t.render(H.scene,r),y.swap(),N.material.uniforms.dyeTexelSize.value.set(1/m,1/m),N.material.uniforms.uVelocity.value=y.read.texture,N.material.uniforms.uSource.value=y.read.texture,N.material.uniforms.dissipation.value=e.velocityDissipation,t.setRenderTarget(y.write),t.render(N.scene,r),y.swap(),N.material.uniforms.dyeTexelSize.value.set(1/f,1/f),N.material.uniforms.uVelocity.value=y.read.texture,N.material.uniforms.uSource.value=p.read.texture,N.material.uniforms.dissipation.value=e.densityDissipation,t.setRenderTarget(p.write),t.render(N.scene,r),p.swap(),i.uniform.value=p.read.texture,t.setRenderTarget(null)}}}}const at=`
precision highp float;
attribute vec2 position;
attribute vec2 uv;
varying vec2 vUv;
varying vec2 vL;
varying vec2 vR;
varying vec2 vT;
varying vec2 vB;
uniform vec2 texelSize;
void main () {
	vUv = uv;
	vL = vUv - vec2(texelSize.x, 0.0);
	vR = vUv + vec2(texelSize.x, 0.0);
	vT = vUv + vec2(0.0, texelSize.y);
	vB = vUv - vec2(0.0, texelSize.y);
	gl_Position = vec4(position, 0, 1);
}
`,gc=`
precision mediump float;
precision mediump sampler2D;
varying highp vec2 vUv;
uniform sampler2D uTexture;
uniform float value;
void main () {
	gl_FragColor = value * texture2D(uTexture, vUv);
}
`,pc=`
precision highp float;
precision highp sampler2D;
varying vec2 vUv;
uniform sampler2D uTarget;
uniform float aspectRatio;
uniform vec3 color;
uniform vec2 point;
uniform float radius;
void main () {
	vec2 p = vUv - point.xy;
	p.x *= aspectRatio;
	vec3 splat = exp(-dot(p, p) / radius) * color;
	vec3 base = texture2D(uTarget, vUv).xyz;
	gl_FragColor = vec4(base + splat, 1.0);
}
`,_c=`
precision highp float;
precision highp sampler2D;
varying vec2 vUv;
uniform sampler2D uVelocity;
uniform sampler2D uSource;
uniform vec2 texelSize;
uniform float dt;
uniform float dissipation;
void main () {
	vec2 coord = vUv - dt * texture2D(uVelocity, vUv).xy * texelSize;
	gl_FragColor = dissipation * texture2D(uSource, coord);
	gl_FragColor.a = 1.0;
}
`,xc=`
precision mediump float;
precision mediump sampler2D;
varying highp vec2 vUv;
varying highp vec2 vL;
varying highp vec2 vR;
varying highp vec2 vT;
varying highp vec2 vB;
uniform sampler2D uVelocity;
void main () {
	float L = texture2D(uVelocity, vL).x;
	float R = texture2D(uVelocity, vR).x;
	float T = texture2D(uVelocity, vT).y;
	float B = texture2D(uVelocity, vB).y;
	vec2 C = texture2D(uVelocity, vUv).xy;
	if (vL.x < 0.0) { L = -C.x; }
	if (vR.x > 1.0) { R = -C.x; }
	if (vT.y > 1.0) { T = -C.y; }
	if (vB.y < 0.0) { B = -C.y; }
	float div = 0.5 * (R - L + T - B);
	gl_FragColor = vec4(div, 0.0, 0.0, 1.0);
}
`,bc=`
precision mediump float;
precision mediump sampler2D;
varying highp vec2 vUv;
varying highp vec2 vL;
varying highp vec2 vR;
varying highp vec2 vT;
varying highp vec2 vB;
uniform sampler2D uVelocity;
void main () {
	float L = texture2D(uVelocity, vL).y;
	float R = texture2D(uVelocity, vR).y;
	float T = texture2D(uVelocity, vT).x;
	float B = texture2D(uVelocity, vB).x;
	float vorticity = R - L - T + B;
	gl_FragColor = vec4(0.5 * vorticity, 0.0, 0.0, 1.0);
}
`,yc=`
precision highp float;
precision highp sampler2D;
varying vec2 vUv;
varying vec2 vL;
varying vec2 vR;
varying vec2 vT;
varying vec2 vB;
uniform sampler2D uVelocity;
uniform sampler2D uCurl;
uniform float curl;
uniform float dt;
void main () {
	float L = texture2D(uCurl, vL).x;
	float R = texture2D(uCurl, vR).x;
	float T = texture2D(uCurl, vT).x;
	float B = texture2D(uCurl, vB).x;
	float C = texture2D(uCurl, vUv).x;
	vec2 force = 0.5 * vec2(abs(T) - abs(B), abs(R) - abs(L));
	force /= length(force) + 0.0001;
	force *= curl * C;
	force.y *= -1.0;
	vec2 vel = texture2D(uVelocity, vUv).xy;
	gl_FragColor = vec4(vel + force * dt, 0.0, 1.0);
}
`,Sc=`
precision mediump float;
precision mediump sampler2D;
varying highp vec2 vUv;
varying highp vec2 vL;
varying highp vec2 vR;
varying highp vec2 vT;
varying highp vec2 vB;
uniform sampler2D uPressure;
uniform sampler2D uDivergence;
void main () {
	float L = texture2D(uPressure, vL).x;
	float R = texture2D(uPressure, vR).x;
	float T = texture2D(uPressure, vT).x;
	float B = texture2D(uPressure, vB).x;
	float C = texture2D(uPressure, vUv).x;
	float divergence = texture2D(uDivergence, vUv).x;
	float pressure = (L + R + B + T - divergence) * 0.25;
	gl_FragColor = vec4(pressure, 0.0, 0.0, 1.0);
}
`,Cc=`
precision mediump float;
precision mediump sampler2D;
varying highp vec2 vUv;
varying highp vec2 vL;
varying highp vec2 vR;
varying highp vec2 vT;
varying highp vec2 vB;
uniform sampler2D uPressure;
uniform sampler2D uVelocity;
void main () {
	float L = texture2D(uPressure, vL).x;
	float R = texture2D(uPressure, vR).x;
	float T = texture2D(uPressure, vT).x;
	float B = texture2D(uPressure, vB).x;
	vec2 velocity = texture2D(uVelocity, vUv).xy;
	velocity.xy -= vec2(R - L, T - B);
	gl_FragColor = vec4(velocity, 0.0, 1.0);
}
`,Tc=`precision highp float;precision highp sampler2D;
#define GLSLIFY 1
varying vec2 vUv;uniform sampler2D uTarget;uniform sampler2D tFlowmap;uniform sampler2D tDepth;uniform vec2 uCamera;uniform float uMenu;uniform float uFluidStrength;uniform float uTime;float perspectiveDepthToViewZ(const in float depth,const in float near,const in float far){return(near*far)/((far-near)*depth-far);}float viewZToOrthographicDepth(const in float viewZ,const in float near,const in float far){return(viewZ+near)/(near-far);}float readDepth(sampler2D depthSampler,vec2 coord){float fragCoordZ=texture2D(depthSampler,coord).x;float viewZ=perspectiveDepthToViewZ(fragCoordZ,uCamera.x,uCamera.y);return viewZToOrthographicDepth(viewZ,uCamera.x,uCamera.y);}void main(){vec3 base=texture2D(uTarget,vUv).rgb;float depth=readDepth(tDepth,vUv);vec3 smudgeUv=texture2D(tFlowmap,vUv*6.0+uTime*0.05).rgb*2.0-1.0;vec3 smudge=texture2D(tFlowmap,vUv*vec2(8.0,2.0)+smudgeUv.xy*0.01).rgb*2.0-1.0+smudgeUv*0.5;float s=max(uFluidStrength,uMenu);float s2=s*smoothstep(0.00,0.02,depth);gl_FragColor=vec4(base+smudge*-10.0*s+vec3(0.0,6.0,0.0)*s2,1.0);}`,wc=w(Tc,"fragmentShader");new V;class Ec{constructor(t,{tDepth:e,uCamera:i,uHoldProgress:o,uHold:n,uFluidStrength:r,uMenu:s}){const c=this,m={},f={value:M.get("demoFlowmap")};f.value.wrapS=f.value.wrapT=Z;const{uTime:v}=z.uniforms,g=Object.assign({},{densityDissipation:.93,velocityDissipation:.93,pressureDissipation:.9,curlStrength:1,radius:.2},m);Object.assign(m,g);const b=new Qo;new V(1,1,1),this.enabled=!0,this.uniform={value:null},t.getContext();function x({width:Q,height:Oe,minFilter:he=ie,magFilter:Pe=he,type:B,format:ge,depthBuffer:$e}={}){const We={minFilter:he,magFilter:Pe,type:B,format:ge,depthBuffer:$e},Ge={read:new ye(Q,Oe,We),write:new ye(Q,Oe,We),swap:()=>{const ui=Ge.read;Ge.read=Ge.write,Ge.write=ui}};return Ge}const p=256,y=512,_=3,S={value:new I(1/p,1/p)};let D,E,R;t.isWebgl2?(D=Fe,E=en,R=Jo):(D=Fe,E=Fe,R=Fe);const d=x({width:y,height:y,type:Le,format:D,minFilter:ie,magFilter:ie,depthBuffer:!1});this.uniform.value=d.read.texture;const N=x({width:p,height:p,type:Le,format:E,minFilter:ie,magFilter:ie,depthBuffer:!1}),K=x({width:p,height:p,type:Le,format:R,minFilter:Ne,magFilter:Ne,depthBuffer:!1}),ce=new ye(p,p,{type:Le,format:R,minFilter:Ne,magFilter:Ne,depthBuffer:!1}),q=new ye(p,p,{type:Le,format:R,minFilter:Ne,magFilter:Ne,depthBuffer:!1}),L=new si,H=new te(L,new $({vertexShader:Xe,fragmentShader:Mc,uniforms:{texelSize:S,uTexture:{value:null},value:{value:1}},depthTest:!1,depthWrite:!1}));H.scene=new pe,H.scene.add(H),H.frustumCulled=!1;const U=new te(L,new $({vertexShader:Xe,fragmentShader:Nc,uniforms:{texelSize:S,uTarget:{value:null},aspectRatio:{value:1},color:{value:new A},point:{value:new I},radius:{value:1},uFluidStrength:r},depthTest:!1,depthWrite:!1}));U.scene=new pe,U.scene.add(U),U.frustumCulled=!1;const G=new te(L,new $({vertexShader:Xe,uniforms:{uTarget:{value:null},tFlowmap:f,uTime:v,tDepth:e,uCamera:i,uFluidStrength:r,uHoldProgress:o,uHold:n,uMenu:s},depthTest:!1,depthWrite:!1}));wc.use(G.material),G.scene=new pe,G.scene.add(G),G.frustumCulled=!1;const k=new te(L,new $({vertexShader:Xe,fragmentShader:Dc,uniforms:{texelSize:S,dyeTexelSize:{value:new I(1/y,1/y)},uVelocity:{value:null},uSource:{value:null},dt:{value:.016},dissipation:{value:1}},depthTest:!1,depthWrite:!1}));k.scene=new pe,k.scene.add(k),k.frustumCulled=!1;const X=new te(L,new $({vertexShader:Xe,fragmentShader:Rc,uniforms:{texelSize:S,uVelocity:{value:null}},depthTest:!1,depthWrite:!1}));X.scene=new pe,X.scene.add(X),X.frustumCulled=!1;const fe=new te(L,new $({vertexShader:Xe,fragmentShader:Oc,uniforms:{texelSize:S,uVelocity:{value:null}},depthTest:!1,depthWrite:!1}));fe.scene=new pe,fe.scene.add(fe),fe.frustumCulled=!1;const me=new te(L,new $({vertexShader:Xe,fragmentShader:Pc,uniforms:{texelSize:S,uVelocity:{value:null},uCurl:{value:null},curl:{value:5},dt:{value:.016}},depthTest:!1,depthWrite:!1}));me.scene=new pe,me.scene.add(me),me.frustumCulled=!1;const O=new te(L,new $({vertexShader:Xe,fragmentShader:Ic,uniforms:{texelSize:S,uPressure:{value:null},uDivergence:{value:null}},depthTest:!1,depthWrite:!1}));O.scene=new pe,O.scene.add(O),O.frustumCulled=!1;const J=new te(L,new $({vertexShader:Xe,fragmentShader:Lc,uniforms:{texelSize:S,uPressure:{value:null},uVelocity:{value:null}},depthTest:!1,depthWrite:!1}));J.scene=new pe,J.scene.add(J),J.frustumCulled=!1;const re=[];"ontouchstart"in window?(window.addEventListener("touchstart",Ae,!1),window.addEventListener("touchmove",Ae,!1)):window.addEventListener("pointermove",Ae,!1);const Re=new I;function Ae(Q){const Oe=Q.getCoalescedEvents!=null?Q.getCoalescedEvents():[];if(Oe.length>1){Oe.forEach(Ae);return}Q.changedTouches&&Q.changedTouches.length&&(Q.x=Q.changedTouches[0].pageX,Q.y=Q.changedTouches[0].pageY),Q.x===void 0&&(Q.x=Q.pageX,Q.y=Q.pageY),Re.isInit||(Re.isInit=!0,Re.set(Q.x,Q.y));let he=Q.x-Re.x,Pe=Q.y-Re.y;const B=20;he&&(he/=Math.max(1,Math.abs(he)/B)),Pe&&(Pe/=Math.max(1,Math.abs(Pe)/B)),Re.set(Q.x,Q.y),(Math.abs(he)||Math.abs(Pe))&&re.push({x:Q.x/window.innerWidth,y:1-Q.y/window.innerHeight,dx:he*5,dy:Pe*-5})}function ot({x:Q,y:Oe,dx:he,dy:Pe}){U.material.uniforms.uTarget.value=N.read.texture,U.material.uniforms.aspectRatio.value=window.innerWidth/window.innerHeight,U.material.uniforms.point.value.set(Q,Oe),U.material.uniforms.color.value.set(he,Pe,1),U.material.uniforms.radius.value=m.radius/100,t.setRenderTarget(N.write),t.render(U.scene,b),N.swap(),U.material.uniforms.uTarget.value=d.read.texture,t.setRenderTarget(d.write),t.render(U.scene,b),d.swap()}function je(){G.material.uniforms.uTarget.value=N.read.texture,t.setRenderTarget(N.write),t.render(G.scene,b),N.swap(),G.material.uniforms.uTarget.value=d.read.texture,t.setRenderTarget(d.write),t.render(G.scene,b),d.swap()}St.add(Ue,70);function Ue(Q){if(!c.enabled)return;const Oe=t.autoClear;t.autoClear=!1;for(let he=re.length-1;he>=0;he--)ot(re.splice(he,1)[0]);je(),fe.material.uniforms.uVelocity.value=N.read.texture,t.setRenderTarget(q),t.render(fe.scene,b),me.material.uniforms.uVelocity.value=N.read.texture,me.material.uniforms.uCurl.value=q.texture,me.material.uniforms.curl.value=m.curlStrength,t.setRenderTarget(N.write),t.render(me.scene,b),N.swap(),X.material.uniforms.uVelocity.value=N.read.texture,t.setRenderTarget(ce),t.render(X.scene,b),H.material.uniforms.uTexture.value=K.read.texture,H.material.uniforms.value.value=m.pressureDissipation,t.setRenderTarget(K.write),t.render(H.scene,b),K.swap(),O.material.uniforms.uDivergence.value=ce.texture;for(let he=0;he<_;he++)O.material.uniforms.uPressure.value=K.read.texture,t.setRenderTarget(K.write),t.render(O.scene,b),K.swap();J.material.uniforms.uPressure.value=K.read.texture,J.material.uniforms.uVelocity.value=N.read.texture,t.setRenderTarget(N.write),t.render(J.scene,b),N.swap(),k.material.uniforms.dyeTexelSize.value.set(1/p,1/p),k.material.uniforms.uVelocity.value=N.read.texture,k.material.uniforms.uSource.value=N.read.texture,k.material.uniforms.dissipation.value=m.velocityDissipation,t.setRenderTarget(N.write),t.render(k.scene,b),N.swap(),k.material.uniforms.dyeTexelSize.value.set(1/y,1/y),k.material.uniforms.uVelocity.value=N.read.texture,k.material.uniforms.uSource.value=d.read.texture,k.material.uniforms.dissipation.value=m.densityDissipation,t.setRenderTarget(d.write),t.render(k.scene,b),d.swap(),c.uniform.value=d.read.texture,t.autoClear=Oe,t.setRenderTarget(null)}}}const Xe=`
precision highp float;
attribute vec2 position;
attribute vec2 uv;
varying vec2 vUv;
varying vec2 vL;
varying vec2 vR;
varying vec2 vT;
varying vec2 vB;
uniform vec2 texelSize;
void main () {
	vUv = uv;
	vL = vUv - vec2(texelSize.x, 0.0);
	vR = vUv + vec2(texelSize.x, 0.0);
	vT = vUv + vec2(0.0, texelSize.y);
	vB = vUv - vec2(0.0, texelSize.y);
	gl_Position = vec4(position, 0, 1);
}
`,Mc=`
precision mediump float;
precision mediump sampler2D;
varying highp vec2 vUv;
uniform sampler2D uTexture;
uniform float value;
void main () {
	gl_FragColor = value * texture2D(uTexture, vUv);
}
`,Nc=`
precision highp float;
precision highp sampler2D;
varying vec2 vUv;
uniform sampler2D uTarget;
uniform float aspectRatio;
uniform vec3 color;
uniform vec2 point;
uniform float radius;

uniform float uFluidStrength;

void main () {
	vec2 p = vUv - point.xy;
	p.x *= aspectRatio;
	vec3 splat = exp(-dot(p, p) / radius) * color;
    splat *= uFluidStrength;
	vec3 base = texture2D(uTarget, vUv).xyz;
	gl_FragColor = vec4(base + splat, 1.0);
}
`,Dc=`
precision highp float;
precision highp sampler2D;
varying vec2 vUv;
uniform sampler2D uVelocity;
uniform sampler2D uSource;
uniform vec2 texelSize;
uniform float dt;
uniform float dissipation;
void main () {
	vec2 coord = vUv - dt * texture2D(uVelocity, vUv).xy * texelSize;
	gl_FragColor = dissipation * texture2D(uSource, coord);
	gl_FragColor.a = 1.0;
}
`,Rc=`
precision mediump float;
precision mediump sampler2D;
varying highp vec2 vUv;
varying highp vec2 vL;
varying highp vec2 vR;
varying highp vec2 vT;
varying highp vec2 vB;
uniform sampler2D uVelocity;
void main () {
	float L = texture2D(uVelocity, vL).x;
	float R = texture2D(uVelocity, vR).x;
	float T = texture2D(uVelocity, vT).y;
	float B = texture2D(uVelocity, vB).y;
	vec2 C = texture2D(uVelocity, vUv).xy;
	if (vL.x < 0.0) { L = -C.x; }
	if (vR.x > 1.0) { R = -C.x; }
	if (vT.y > 1.0) { T = -C.y; }
	if (vB.y < 0.0) { B = -C.y; }
	float div = 0.5 * (R - L + T - B);
	gl_FragColor = vec4(div, 0.0, 0.0, 1.0);
}
`,Oc=`
precision mediump float;
precision mediump sampler2D;
varying highp vec2 vUv;
varying highp vec2 vL;
varying highp vec2 vR;
varying highp vec2 vT;
varying highp vec2 vB;
uniform sampler2D uVelocity;
void main () {
	float L = texture2D(uVelocity, vL).y;
	float R = texture2D(uVelocity, vR).y;
	float T = texture2D(uVelocity, vT).x;
	float B = texture2D(uVelocity, vB).x;
	float vorticity = R - L - T + B;
	gl_FragColor = vec4(0.5 * vorticity, 0.0, 0.0, 1.0);
}
`,Pc=`
precision highp float;
precision highp sampler2D;
varying vec2 vUv;
varying vec2 vL;
varying vec2 vR;
varying vec2 vT;
varying vec2 vB;
uniform sampler2D uVelocity;
uniform sampler2D uCurl;
uniform float curl;
uniform float dt;
void main () {
	float L = texture2D(uCurl, vL).x;
	float R = texture2D(uCurl, vR).x;
	float T = texture2D(uCurl, vT).x;
	float B = texture2D(uCurl, vB).x;
	float C = texture2D(uCurl, vUv).x;
	vec2 force = 0.5 * vec2(abs(T) - abs(B), abs(R) - abs(L));
	force /= length(force) + 0.0001;
	force *= curl * C;
	force.y *= -1.0;
	vec2 vel = texture2D(uVelocity, vUv).xy;
	gl_FragColor = vec4(vel + force * dt, 0.0, 1.0);
}
`,Ic=`
precision mediump float;
precision mediump sampler2D;
varying highp vec2 vUv;
varying highp vec2 vL;
varying highp vec2 vR;
varying highp vec2 vT;
varying highp vec2 vB;
uniform sampler2D uPressure;
uniform sampler2D uDivergence;
void main () {
	float L = texture2D(uPressure, vL).x;
	float R = texture2D(uPressure, vR).x;
	float T = texture2D(uPressure, vT).x;
	float B = texture2D(uPressure, vB).x;
	float C = texture2D(uPressure, vUv).x;
	float divergence = texture2D(uDivergence, vUv).x;
	float pressure = (L + R + B + T - divergence) * 0.25;
	gl_FragColor = vec4(pressure, 0.0, 0.0, 1.0);
}
`,Lc=`
precision mediump float;
precision mediump sampler2D;
varying highp vec2 vUv;
varying highp vec2 vL;
varying highp vec2 vR;
varying highp vec2 vT;
varying highp vec2 vB;
uniform sampler2D uPressure;
uniform sampler2D uVelocity;
void main () {
	float L = texture2D(uPressure, vL).x;
	float R = texture2D(uPressure, vR).x;
	float T = texture2D(uPressure, vT).x;
	float B = texture2D(uPressure, vB).x;
	vec2 velocity = texture2D(uVelocity, vUv).xy;
	velocity.xy -= vec2(R - L, T - B);
	gl_FragColor = vec4(velocity, 0.0, 1.0);
}
`,Fc=`#define GLSLIFY 1
varying vec2 vUv;void main(){gl_Position=projectionMatrix*modelViewMatrix*vec4(position,1.0);vUv=uv;}`,Ac=w(Fc,"vertexShader"),Uc=`#define GLSLIFY 1
varying vec2 vUv;uniform sampler2D tDiffuse;uniform sampler2D tMouseFluidFlowmap;uniform sampler2D tFluidFlowmap;uniform sampler2D tNoise;uniform sampler3D tSceneLut;uniform float uSceneLutSize;uniform float uSceneLutAlpha;uniform vec2 uResolution;uniform float uDpr;uniform float uTime;uniform float uMusicTime;uniform float uLetterBox;uniform vec3 uClick[6];uniform vec3 uEggPosition;uniform float uBlackOverlay;uniform float uFluidStrength;uniform mat4 uProjectionInverse;uniform mat4 uViewMatrixInv;
#ifdef FOCUS_NUM
uniform sampler2D tDepth;uniform vec2 uCamera;uniform sampler3D tPaintLut;uniform float uPaintLutSize;uniform sampler2D tNoise3;
#endif
uniform sampler2D tNoise2;uniform sampler2D tFlow;
#ifdef IS_LOADER
uniform vec2 uLoaded;
#endif
#ifdef IS_MENU
uniform sampler2D tUi;
#endif
#ifdef USE_SOBEL
uniform sampler2D tRawDiffuse;
#endif
#ifdef IS_MAIN
uniform float uEggOverlayFade;uniform float uPlanetsOverlayFade;
#endif
vec3 hash32(vec2 p){vec3 p3=fract(vec3(p.xyx)*vec3(0.1031,0.1030,0.0973));p3+=dot(p3,p3.yxz+33.33);return fract((p3.xxy+p3.yzz)*p3.zyx);}void addClickWarp(inout vec2 uv){for(int i=0;i<6;i++){vec2 clickCenter=vUv-uClick[i].xy;clickCenter.x*=uResolution.x/uResolution.y;vec2 clickDir=normalize(clickCenter);float clickDist=length(clickCenter);float clickFalloff=smoothstep(mix(0.4,0.1,uClick[i].z),0.0,clickDist)*smoothstep(0.0,0.1,clickDist);float clickStrength=(sin(clickDist*100.0-uTime*15.0)*0.5+0.5)*smoothstep(0.0,0.9,uClick[i].z);uv-=clickDir*clickStrength*clickFalloff*0.02;}}
#define EGG_WARP_SIZE 0.3
#define EGG_WARP_SMOOTHING 0.15
#define EGG_WARP_THICKNESS 0.4
#define EGG_WARP_WAVES 0.92
#define EGG_WARP_STRENGTH 0.002
#define EGG_WARP_FREQUENCY 0.3593786227683747
#define EGG_WARP_OFFSET 0.9
void addEggWarp(inout vec2 uv){vec2 clickCenter=uv-uEggPosition.xy;clickCenter.x*=uResolution.x/uResolution.y;clickCenter/=uEggPosition.z*35.;vec2 clickDir=normalize(clickCenter);float clickDist=length(clickCenter);float prog=fract((uMusicTime+EGG_WARP_OFFSET)*EGG_WARP_FREQUENCY);float p=prog*EGG_WARP_SIZE;float a=smoothstep(-(EGG_WARP_THICKNESS+EGG_WARP_SMOOTHING)+p,-EGG_WARP_THICKNESS+p,clickDist-0.05)-smoothstep(-EGG_WARP_SMOOTHING+p,0.+p,clickDist);float dd=sin((clickDist-p)*100.*EGG_WARP_WAVES)*smoothstep(1.,0.7,prog);dd*=a*EGG_WARP_STRENGTH;float b=smoothstep(0.1,0.05,clickDist*EGG_WARP_SIZE);dd*=b;uv-=clickDir*dd;}void addColorNoise(inout vec3 color){vec3 s=(hash32(gl_FragCoord.xy+floor(uTime*30.)*100.)-0.5);color+=s*0.05;}void addFadeToBlack(inout vec3 color){color=mix(color,vec3(0),uBlackOverlay);}void addLUTs(inout vec3 color){float pixelWidth=1.0/uSceneLutSize;float halfPixelWidth=0.5/uSceneLutSize;vec3 uvw=vec3(halfPixelWidth)+color*(1.0-pixelWidth);vec3 sceneColor=mix(color,texture(tSceneLut,uvw).rgb,uSceneLutAlpha);
#ifdef FOCUS_NUM
vec3 paintLut=texture(tPaintLut,uvw).rgb;
#else
vec3 paintLut=color;
#endif
color=mix(sceneColor,paintLut,uLetterBox*uFluidStrength);}void addFisheyeEffect(inout vec2 uv,float amount){float amt=-0.8;amt*=amount;vec2 cc=uv-0.5;float dist=dot(cc,cc);uv+=cc*dist*amt;}
#ifdef FOCUS_NUM
float hash12(vec2 p){vec3 p3=fract(vec3(p.xyx)*0.1031);p3+=dot(p3,p3.yzx+33.33);return fract((p3.x+p3.y)*p3.z);}float quadraticInOut(float t){float p=2.0*t*t;return t<0.5 ? p :-p+(4.0*t)-1.0;}vec3 rgb2hsv(vec3 c){vec4 K=vec4(0.0,-1.0/3.0,2.0/3.0,-1.0);vec4 p=mix(vec4(c.bg,K.wz),vec4(c.gb,K.xy),step(c.b,c.g));vec4 q=mix(vec4(p.xyw,c.r),vec4(c.r,p.yzx),step(p.x,c.r));float d=q.x-min(q.w,q.y);float e=1.0e-10;return vec3(abs(q.z+(q.w-q.y)/(6.0*d+e)),d/(q.x+e),q.x);}vec4 biplanarMapping(sampler2D sam,in vec3 p,in vec3 n,in float k){vec3 dpdx=dFdx(p);vec3 dpdy=dFdy(p);n=abs(n);ivec3 ma=(n.x>n.y&&n.x>n.z)? ivec3(0,1,2):(n.y>n.z)? ivec3(1,2,0):ivec3(2,0,1);ivec3 mi=(n.x<n.y&&n.x<n.z)? ivec3(0,1,2):(n.y<n.z)? ivec3(1,2,0):ivec3(2,0,1);ivec3 me=ivec3(3)-mi-ma;vec4 x=textureGrad(sam,vec2(p[ma.y],p[ma.z]),vec2(dpdx[ma.y],dpdx[ma.z]),vec2(dpdy[ma.y],dpdy[ma.z]));vec4 y=textureGrad(sam,vec2(p[me.y],p[me.z]),vec2(dpdx[me.y],dpdx[me.z]),vec2(dpdy[me.y],dpdy[me.z]));vec2 w=vec2(n[ma.x],n[me.x]);w=clamp((w-0.5773)/(1.0-0.5773),0.0,1.0);w=pow(w,vec2(k/8.0));return(x*w.x+y*w.y)/(w.x+w.y);}void addReleaseWarp(inout vec2 uv){float dist=smoothstep(0.2,0.0,abs(length(uv-0.5)-uLetterBox))*uFluidStrength;uv-=0.5;uv*=1.+dist*0.2;uv+=0.5;}vec3 worldPosFromDepth(float depth){float z=depth*2.0-1.0;vec4 clipSpacePosition=vec4(vUv*2.0-1.0,z,1.0);vec4 viewSpacePosition=uProjectionInverse*clipSpacePosition;viewSpacePosition/=viewSpacePosition.w;vec4 worldSpacePosition=uViewMatrixInv*viewSpacePosition;return worldSpacePosition.xyz;}const float LETTERBOX_HEIGHT=0.15;void addLetterbox(inout vec3 color){float letterbox=smoothstep(0.5-0.4,0.5-0.,abs(vUv.y-0.5));letterbox=mix(quadraticInOut(letterbox),letterbox,0.5);color=mix(color,vec3(0.),letterbox*uFluidStrength);}
#endif
#ifdef IS_MAIN
vec3 ContrastSaturationBrightness(vec3 color,float brt,float sat,float con){const float AvgLumR=0.5;const float AvgLumG=0.5;const float AvgLumB=0.5;const vec3 LumCoeff=vec3(0.2125,0.7154,0.0721);vec3 AvgLumin=vec3(AvgLumR,AvgLumG,AvgLumB);vec3 brtColor=color*brt;vec3 intensity=vec3(dot(brtColor,LumCoeff));vec3 satColor=mix(intensity,brtColor,sat);vec3 conColor=mix(AvgLumin,satColor,con);return conColor;}void addEggOverlayFade(inout vec3 color){float pr=1.0-abs(uEggOverlayFade-1.0);color=pow(color,vec3(1.-pr));color=ContrastSaturationBrightness(color,1.,1.+pr*2.,1.+pow(pr,100.));}void addPlanetsOverlayFade(inout vec3 color){color=mix(color,pow(color,vec3(2))*0.2,1.0-abs(uPlanetsOverlayFade-1.0));color=mix(color,vec3(0.),smoothstep(0.9,1.,1.0-abs(uPlanetsOverlayFade-1.0)));}
#endif
#ifdef USE_SOBEL
float intensity(in vec4 c){return sqrt((c.x*c.x)+(c.y*c.y)+(c.z*c.z));}float sobel(float step,vec2 res,vec2 center,sampler2D tex){float stepX=step/res.x*uDpr;float stepY=step/res.y*uDpr;float tLeft=intensity(texture(tex,center+vec2(-stepX,stepY)));float left=intensity(texture(tex,center+vec2(-stepX,0)));float bLeft=intensity(texture(tex,center+vec2(-stepX,-stepY)));float top=intensity(texture(tex,center+vec2(0,stepY)));float bottom=intensity(texture(tex,center+vec2(0,-stepY)));float tRight=intensity(texture(tex,center+vec2(stepX,stepY)));float right=intensity(texture(tex,center+vec2(stepX,0)));float bRight=intensity(texture(tex,center+vec2(stepX,-stepY)));float x=tLeft+2.0*left+bLeft-tRight-2.0*right-bRight;float y=-tLeft-2.0*top-tRight+bLeft+2.0*bottom+bRight;return sqrt((x*x)+(y*y));}
#endif
#ifdef IS_LOADER
void addLoaderWarp(inout vec2 uv){float t2=uLoaded.y;vec2 center=vUv-vec2(0.5,0.56);center.x*=uResolution.x/uResolution.y;vec2 dir=normalize(center);float dist=length(center);float a=1.0-t2;float falloff=smoothstep(mix(0.6,0.1,a),0.0,dist)*smoothstep(0.0,0.1,dist);float strength=(sin(dist*50.0-uTime*4.0)*0.5+0.5)*pow(smoothstep(0.0,0.9,a),2.0);uv-=dir*strength*falloff*0.03;}void addLoaderFade(inout vec3 color,vec3 white){vec2 loaded=uLoaded;float t1=loaded.x;float t2=loaded.y;vec2 center=vUv-vec2(0.5,0.56);center.x*=uResolution.x/uResolution.y;float dist=length(center);vec2 uvNoise2=vUv;uvNoise2.x*=uResolution.x/uResolution.y;uvNoise2*=0.5;float noise2=-(texture(tNoise2,uvNoise2).g*2.0-1.0);float t1Adjust=mix(-0.2,1.0,t1)-noise2*0.4;float t1Fade=smoothstep(t1Adjust,t1Adjust+0.02,dist*0.7);white=mix(white,vec3(1),min(1.0,max(0.0,t1Fade)));vec2 uvNoise=vec2(atan(center.y,center.x),dist*3.0);uvNoise.x=(uvNoise.x/6.28)*6.0;uvNoise.y=pow(uvNoise.y,0.5)+t2*0.5;vec2 flow=texture2D(tFlow,vUv*1.0-uTime*0.1).rg*2.0-1.0;float noise=texture2D(tNoise,uvNoise.yx-flow*0.06).g*2.0-1.0;float t2Adjust=mix(-0.45,1.2,t2)+noise*0.2+flow.g*0.2;float t2Fade=smoothstep(t2Adjust,t2Adjust+0.14,dist)*smoothstep(1.,0.9,t2);color=mix(color,white,min(1.0,max(0.0,t2Fade)));}
#endif
vec3 whiteRender(vec3 render,float edge,vec4 mouseFluid){vec3 white=vec3(1);white*=mix(smoothstep(3.0,0.0,edge),1.0,0.4);white+=smoothstep(0.2,0.9,length(vUv-vec2(0.5,0.8)));white=mix(white,render,smoothstep(0.8,0.9,mouseFluid.b)*0.9);white=min(white,vec3(1));return white;}vec3 mainRender(vec2 uv,float edge,vec4 mouseFluid,vec4 fluid){vec3 render=texture2D(tDiffuse,uv).rgb;
#if !defined(IS_MENU) && !defined(IS_WHITE_PAGE) && !defined(FOCUS_NUM)
float warpAlpha=0.8;render*=(1.0-warpAlpha);vec3 renderWarp=vec3(0);for(int i=0;i<4;i++){uv-=mouseFluid.rg*0.0007;uv+=sin(fluid.rg*0.1)*0.002;renderWarp+=texture2D(tDiffuse,uv).rgb;}renderWarp/=4.0;render+=renderWarp*warpAlpha;
#endif
return render;}
#ifdef IS_MENU
void addMenu(inout vec3 color){vec3 topColor=vec3(0.078,0.098,0.184);vec3 bottomColor=vec3(0.063,0.071,0.176);float gradientBlend=smoothstep(0.6,0.05,vUv.y);vec3 gradient=mix(topColor,bottomColor,gradientBlend);float menuButtonGradient=smoothstep(0.16,0.05,length((vUv-0.94)*vec2(0.7,1.)));float logoButtonGradient=smoothstep(0.15,0.01,length((vUv-vec2(0.04,0.93))));color=mix(color,vec3(0.),menuButtonGradient*0.2);color=mix(color,vec3(0.),logoButtonGradient*0.2);}
#endif
#ifdef FOCUS_NUM
#if FOCUS_NUM == 1
void addFocusEffect1(inout vec3 color,float edge,vec3 worldPos){float yLimit=smoothstep(2.,0.,worldPos.y);float centerDist=length(worldPos-vec3(0.,1.2,0.));float backgroundLimit=step(300.,centerDist);float centerArea=smoothstep(1.3,1.,centerDist);float edgeMix=smoothstep(mix(0.,0.2,centerArea),1.,edge)*1.5;float noiseScale=mix(0.01,2.,smoothstep(5.,1.,centerDist));vec2 noiseUvs=worldPos.xz*noiseScale+uTime*0.01;float noise=texture2D(tNoise,noiseUvs).x;vec3 edgeColor1=vec3(0.1,0.67,1.0);vec3 edgeColor2=vec3(0.59,0.06,0.9);vec3 edgeColor=mix(edgeColor1,edgeColor2,smoothstep(0.3,1.,noise));vec3 lines=edgeMix*edgeColor;float highLights=smoothstep(0.6,0.9,length(color));lines*=mix(0.8,1.2,smoothstep(0.5,0.4,centerDist));lines*=(1.+highLights*10.);float luma=length(color)*0.3;float lumaIncrease=(yLimit*(1.-centerArea));lumaIncrease+=smoothstep(5.,100.,centerDist)*(1.-backgroundLimit)*3.;lumaIncrease+=smoothstep(0.5,0.4,centerDist)*1.;lumaIncrease+=highLights*2.;luma*=lumaIncrease;vec3 colorOut=clamp(lines,vec3(0.),vec3(1.));colorOut+=edgeColor*luma*1.;float wave=smoothstep(0.06,0.0,length(vUv-0.5)-uLetterBox);color=mix(color,colorOut,uLetterBox*uFluidStrength*0.8*wave);}
#elif FOCUS_NUM == 2
mat3 rotateZ(in float angle){return mat3(cos(angle),-sin(angle),0.0,sin(angle),cos(angle),0.0,0.0,0.0,1.0);}void addFocusEffect2(inout vec3 color,float edge,vec3 worldPos,float depth){float egg=smoothstep(1.5,0.5,length(worldPos-vec3(0.,1.125,0.)));vec3 worldPosition=rotateZ(3.1416/4.)*worldPos;float a=smoothstep(2.,0.,worldPos.y)*length(color);float lineAmount=6.;float lineThickness=0.1;float lineWidth=lineThickness;vec2 uv=(worldPosition.zy*lineAmount)-uTime*0.2;vec2 uvDeriv=fwidth(uv);bool invertLine=lineWidth>0.5;vec2 targetWidth=vec2(invertLine ? 1.0-lineWidth : lineWidth);vec2 drawWidth=clamp(targetWidth,uvDeriv,vec2(0.5));vec2 lineAA=uvDeriv*1.5;vec2 gridUV=abs(fract(uv)*2.0-1.0);gridUV=invertLine ? gridUV : 1.0-gridUV;vec2 grid2=smoothstep(drawWidth+lineAA,drawWidth-lineAA,gridUV);grid2*=saturate(targetWidth/drawWidth);grid2=mix(grid2,targetWidth,saturate(uvDeriv*2.0-1.0));grid2=invertLine ? 1.0-grid2 : grid2;float grid=mix(grid2.x,1.0,grid2.y);float depthGradient=pow(depth,200.);float depthe=smoothstep(0.,1.,depthGradient);vec3 colorGreen=vec3(0.757,1.,0.071);float background=step(300.,length(worldPos));float t=(grid+mix(0.,0.,depthe))*(1.-background);float h=hash12(vUv*1000.+uTime)*0.2;float ad=1.0-abs(1.0-t-h);vec3 dFdxPos=dFdx(worldPos);vec3 dFdyPos=dFdy(worldPos);vec3 normal=normalize(cross(dFdxPos,dFdyPos));float shadows=dot(normal,normalize(vec3(1.,1.,1.)));shadows*=(1.-egg)*(1.-background);shadows*=0.25;colorGreen-=shadows;float colorFlip=egg;vec3 colorOut=mix(clamp(colorGreen,vec3(0.),vec3(1.)),vec3(0.),mix(ad,1.-ad,colorFlip));float wave=smoothstep(0.06,0.0,length(vUv-0.5)-uLetterBox);float reveal=uLetterBox*uFluidStrength*wave;color=max(color*smoothstep(1.,0.3,reveal),colorOut*smoothstep(0.,0.7,reveal));}
#elif FOCUS_NUM == 3
void addFocusEffect3(inout vec3 color,float edge,vec3 worldPos,float depth){vec3 colorOut=vec3(0.);float t2=0.5;vec2 c=worldPos.xz*20.;vec3 ndsq=texture2D(tNoise3,worldPos.xz*log(length(worldPos.xz))*0.01).rgb;float dsq=log(length(c+ndsq.xy*200.*smoothstep(5.,10.,length(worldPos.xz))))*0.4-uTime*0.03;vec2 uvNoise=vec2(atan(c.y,c.x),dsq*1.0);uvNoise.x=(uvNoise.x/6.28)*2.0;vec2 flow=texture2D(tFlow,vUv*1.0-uTime*0.03).rg*2.0-1.0;uvNoise=fract(uvNoise);float noise=texture2D(tNoise,uvNoise.yx-flow*0.06).g*2.0-1.0;float t2Adjust=mix(-0.45,1.2,t2)+noise*0.2+flow.g*0.2;float t2Fade=smoothstep(t2Adjust-0.5,t2Adjust+0.14,abs(fract(dsq*5.)-0.5))*smoothstep(1.,0.9,t2);float centerDist=length(worldPos-vec3(0.,0.14,0.));vec3 colorBoost=vec3(t2Fade*0.25-smoothstep(3.,1.,centerDist)*0.3,0.,smoothstep(1.7,1.3,centerDist)*0.5);colorOut=1.-rgb2hsv(normalize(color+colorBoost));float wave=smoothstep(0.06,0.0,length(vUv-0.5)-uLetterBox);color=mix(color,colorOut,uLetterBox*uFluidStrength*wave);}
#elif FOCUS_NUM == 4
void addFocusEffect4(inout vec3 color,float edge,vec3 worldPos,float depth){float background=step(150.,length(worldPos));float depthGradient=pow(depth,200.);vec3 colorOut=mix(vec3(smoothstep(0.3,1.,depthGradient)),vec3(1.-length(vUv-vec2(0.5,0.8))),background);float luma=length(color)*0.5;colorOut=mix(colorOut,vec3(0.1),smoothstep(1.,0.,worldPos.y));colorOut*=smoothstep(2.,3.,length(worldPos.xz+vec2(3.2,0.)));colorOut+=hash12(vUv*1000.+uTime)*0.08;float wave=smoothstep(0.06,0.0,length(vUv-0.5)-uLetterBox);color=mix(color,colorOut,uLetterBox*uFluidStrength*wave*mix(0.9,0.2,smoothstep(0.,1.,depthGradient)));}
#elif FOCUS_NUM == 5
void addFocusEffect5(inout vec3 color,float edge,vec3 worldPos,float depth){vec3 a=rgb2hsv(color);vec3 colorOut=vec3(a.g);float wave=smoothstep(0.06,0.0,length(vUv-0.5)-uLetterBox);color=mix(color,colorOut,uLetterBox*uFluidStrength*wave);}
#endif
vec3 addGlitchEffect(vec3 render,vec2 uv,vec4 mouseFluid){vec2 st=uv;vec2 offset=vec2(0.);float strength=uFluidStrength*0.7-uLetterBox*0.3;addFisheyeEffect(st,strength*0.5);vec2 glitchUv=st*vec2(3.,6.)-uTime*0.01;glitchUv=floor(glitchUv*15.)/15.;glitchUv*=vec2(0.08,0.1);vec2 glitchUv2=st*vec2(2.,5.)+uTime*0.03;glitchUv2=floor(glitchUv2*vec2(10.,15.))/vec2(10.,15.);glitchUv2*=vec2(0.1,0.13);vec3 noise=texture2D(tNoise3,glitchUv).rgb;vec3 noise2=texture2D(tNoise3,glitchUv2).rgb;noise=mix(noise,noise2,step(sin(noise.b*20.),0.3));float b=mix(20.,40.,noise.g);float a=floor(noise.r*b)/b;offset.x=a-0.5;vec3 firstColor=texture2D(tDiffuse,st).rgb;vec3 hsv=rgb2hsv(firstColor);float t=step(0.4,sin(hsv.b*10.));t+=step(hsv.g,0.35)+smoothstep(0.6,0.7,length(uv-0.5+sin(noise.bg*10.-strength)*0.4));float m=length(floor(((uv-0.5)*vec2(0.7,2.)+(noise.rg-0.5)*3.)*vec2(11.,30.))/vec2(11.,30.)+sin(uTime+noise2.rg-0.5)*(noise.gb-0.5)*0.5);t*=step(mix(1.2,1.1,strength),m);t+=step((sin(noise2.r*10.+uTime*mix(1.5,-1.5,step(noise2.g,0.5)))+1.)*2.,mix(0.,0.1,step(m,0.2)));t*=strength;t+=mouseFluid.b*0.03*uLetterBox;t+=smoothstep(0.7,0.8,length(uv-0.5+sin(noise.bg*20.-uTime)*0.3))*mix(0.1,1.,step(hsv.g,mix(0.35,0.3,sin(uTime*4.))))*uLetterBox;vec3 color;color.r=texture2D(tDiffuse,st+offset*t*0.98+0.001*strength).r;color.g=texture2D(tDiffuse,st+offset*t*1.).g;color.b=texture2D(tDiffuse,st+offset*t*1.02-0.001*strength).b;vec3 colorDiff=vec3(color-firstColor);t*=length(step(vec3(0.01),abs(colorDiff)));color=pow(color,vec3(mix(1.,1.2,uLetterBox)))*mix(1.,3.,uLetterBox);vec3 luma=vec3(0.299,0.587,0.114);float v=dot(color,luma);vec3 glitchColor=color;
#ifdef FOCUS_NUM
#if FOCUS_NUM == 1
#elif FOCUS_NUM == 2
vec3 color1=vec3(0.757,1.,0.071);vec3 color2=vec3(0.0);glitchColor=mix(color1,color2,step(v,0.5));
#elif FOCUS_NUM == 3
glitchColor=1.-rgb2hsv(normalize(color));
#elif FOCUS_NUM == 4
#elif FOCUS_NUM == 5
glitchColor=vec3(rgb2hsv(glitchColor).g);
#endif
#endif
color=mix(color,glitchColor,uLetterBox);color=mix(render,color,t*uFluidStrength);return color;}
#endif
void main(){vec3 color=vec3(0);vec4 mouseFluid=texture2D(tMouseFluidFlowmap,vUv);vec4 fluid=texture2D(tFluidFlowmap,vUv);vec2 uvRender=vUv;
#if defined(FOCUS_NUM)
uvRender-=mouseFluid.rg*0.0007;
#if FOCUS_NUM == 4
uvRender+=sin(fluid.rg*0.1)*0.004*uFluidStrength;
#endif
#endif
addClickWarp(uvRender);addEggWarp(uvRender);
#ifdef FOCUS_NUM
addReleaseWarp(uvRender);
#endif
#ifdef IS_LOADER
addLoaderWarp(uvRender);
#endif
#ifdef IS_MAIN
addFisheyeEffect(uvRender,(1.-abs(uPlanetsOverlayFade-1.)));
#endif
#ifdef FOCUS_NUM
float depth=texture2D(tDepth,uvRender).x;vec3 worldPos=worldPosFromDepth(depth);
#endif
#ifdef USE_SOBEL
float edge=sobel(1.0,uResolution,uvRender,tRawDiffuse);
#else
float edge=1.;
#endif
vec3 render=mainRender(uvRender,edge,mouseFluid,fluid*uFluidStrength);vec3 white=whiteRender(render,edge,mouseFluid);color+=render;
#ifdef FOCUS_NUM
#if FOCUS_NUM == 1
addFocusEffect1(color,edge,worldPos);
#elif FOCUS_NUM == 2
addFocusEffect2(color,edge,worldPos,depth);
#elif FOCUS_NUM == 3
addFocusEffect3(color,edge,worldPos,depth);
#elif FOCUS_NUM == 4
addFocusEffect4(color,edge,worldPos,depth);
#elif FOCUS_NUM == 5
addFocusEffect5(color,edge,worldPos,depth);
#endif
color=addGlitchEffect(color,vUv,mouseFluid);
#endif
addLUTs(color);
#ifdef FOCUS_NUM
addLetterbox(color);
#endif
#ifdef IS_MENU
addMenu(color);
#endif
#ifdef IS_MAIN
addEggOverlayFade(color);addPlanetsOverlayFade(color);
#endif
#ifdef IS_WHITE_PAGE
color=white;
#endif
addFadeToBlack(color);
#ifdef IS_LOADER
addLoaderFade(color,white);
#endif
addColorNoise(color);gl_FragColor=vec4(color,1);}`,zc=w(Uc,"fragmentShader");function Ye(a,t){const e=new Y({name:"FinalPass",uniforms:a,defines:t});return Ac.use(e),zc.use(e),e}function Gc(a){return{LOADER:Ye(a,{IS_LOADER:!0,USE_SOBEL:!0}),LOADER_WHITE_PAGE:Ye(a,{IS_LOADER:!0,IS_WHITE_PAGE:!0,USE_SOBEL:!0}),WHITE_PAGE:Ye(a,{IS_WHITE_PAGE:!0,USE_SOBEL:!0}),MENU:Ye(a,{IS_MENU:!0}),MAIN:Ye(a,{IS_MAIN:!0}),FOCUS_1:Ye(a,{IS_MAIN:!0,FOCUS_NUM:1,USE_SOBEL:!0}),FOCUS_2:Ye(a,{IS_MAIN:!0,FOCUS_NUM:2}),FOCUS_3:Ye(a,{IS_MAIN:!0,FOCUS_NUM:3}),FOCUS_4:Ye(a,{IS_MAIN:!0,FOCUS_NUM:4}),FOCUS_5:Ye(a,{IS_MAIN:!0,FOCUS_NUM:5})}}class Bc extends pn{constructor(t,e){const i=ve(),{uTime:o,uResolution:n,uDpr:r}=z.uniforms,s={value:0},c={value:0},m={value:0},f={value:0},v={value:0},h={value:i.isWhitePage?1:0},g={i:0,value:[new A,new A,new A,new A,new A,new A]},b={value:0},x={value:new I(0)},p={value:0},y={value:0},_={value:0},S={value:0},D={value:new A(0)},E={value:new st},R={value:new st},d={value:null},N={value:new I},K={value:null},ce={value:null},q={value:0},L={value:null},H={value:0},U={value:t._renderTarget.texture},G={value:0},k={value:M.get("postNoise")},X={value:M.get("postNoise2")},fe={value:M.get("noise")},me={value:M.get("demoFlowmap")};k.value.wrapS=k.value.wrapT=Z,k.value.magFilter=k.value.minFilter=ie,X.value.wrapS=X.value.wrapT=Z,X.value.magFilter=X.value.minFilter=ie,fe.value.wrapS=X.value.wrapT=Z,fe.value.magFilter=X.value.minFilter=ie,me.value.wrapS=me.value.wrapT=Z,me.value.magFilter=me.value.minFilter=ie;const O=new hc(z._renderer.instance),J=O.uniform;vt.addTexture(O.uniform.value);const re=new Ec(z._renderer.instance,{tDepth:d,uCamera:N,uHoldProgress:b,uHold:s,uFluidStrength:p,uMenu:v}),we=re.uniform;vt.addTexture(re.uniform.value);const Ae=Gc({tDiffuse:K,tSceneLut:ce,uSceneLutSize:q,tPaintLut:L,uPaintLutSize:H,tRawDiffuse:U,uSceneLutAlpha:G,uTest:{value:1},uTime:o,uEggOverlayFade:m,uPlanetsOverlayFade:f,uResolution:n,uDpr:r,uZoom:c,uClick:g,uLoaded:x,uFluidStrength:p,uLetterBox:_,uMusicTime:S,uEggPosition:D,uProjectionInverse:E,uViewMatrixInv:R,uMenu:v,uWhitePage:h,uBlackOverlay:y,tMouseFluidFlowmap:J,tFluidFlowmap:we,tDepth:d,uCamera:N,tNoise:k,tNoise2:X,tNoise3:fe,tFlow:me});super(Ae.MAIN),W(this),this.uiStore=i,this.materials=Ae,this.renderToScreen=!0,this.renderPass=t,this.tDepth=d,this.uCamera=N,this.uProjectionInverse=E,this.uViewMatrixInv=R,this.uMusicTime=S,this.uEggPosition=D,this.mouseFluidFlowmap=O,this.fluidFlowmap=re;const ot=ee(i.isWhitePage),je=ee(!1),Ue=ee(!1),Q=ee(!1);F(()=>i.mainLoader.progressComplete,B=>{const ge=ne.params.skipLoader?0:1;B&&new Te(x.value,ge*3e3,{x:1,ease:"linear",delay:ge*500})},{immediate:!0}),F(()=>i.mainLoader.hidding,B=>{const ge=ne.params.skipLoader?0:1;B&&new Te(x.value,ge*3e3,{y:1,ease:"inQuad",delay:0}).onComplete(()=>{Ue.value=!0})},{immediate:ne.params.skipLoader}),F(()=>i.home.isZoom,B=>{B?(new Te(c,0,{value:1}),new Te(_,1500,{value:1,ease:"outQuart"})):(new Te(c,1e3,{value:0}),new Te(_,1500,{value:0,ease:"inOutQuart"}))}),F(()=>i.home.progress,B=>{const ge=i.home.sectionLimits[2],We=i.home.sectionLimits[3]-ge,Ge=Ft(B,[ge+We*.45,ge+We*.85],[0,1]);this.material.uniforms.uSceneLutAlpha.value=i.home.eggOverlayFade>1?Ge:1},{immediate:!0});const Oe=()=>new Promise(B=>{i.setBgShowState({isHiding:!0,isHidden:!1,isShowing:!1,isShown:!1}),new Te(y,500,{value:1}).onComplete(()=>{i.setBgShowState({isHiding:!1,isHidden:!0}),B()})}),he=()=>new Promise(B=>{i.setBgShowState({isHiding:!1,isHidden:!1,isShowing:!0,isShown:!1}),new Te(y,500,{value:0}).onComplete(()=>{i.setBgShowState({isShowing:!1,isShown:!0}),B()})});F([()=>i.currentRoute,()=>i.menu.isOpen],()=>{Oe().then(()=>{he()})}),F(()=>i.isWhitePageDelayed,B=>{h.value=B?1:0,ot.value=B}),F(()=>i.menu.isOpenDelayed,B=>{v.value=B?1:0,je.value=B}),F(()=>i.home.eggOverlayFade,B=>{m.value=B}),F(()=>i.home.planetsOverlayFade,B=>{f.value=B}),F(()=>i.home.planets,B=>{}),F(()=>i.home.eggExplosion,B=>{}),F(()=>i.home.holdProgress,B=>{b.value=B}),F(()=>i.home.section,()=>{this.updatePaintLUT()}),F(()=>this.uiStore.mainLoader.progressComplete,B=>{B&&(this.updateSceneLUT(),this.updatePaintLUT())},{immediate:!0}),window.addEventListener("mousedown",B=>{if(B.button===2)return;const ge=g.value[g.i];ge.x=wi.normalFlip.x,ge.y=wi.normalFlip.y,ge.z=1,new Te(ge,1400,{z:0}),g.i=(g.i+1)%6}),St.add(()=>{p.value=Math.max(c.value,b.value),Q.value=p.value>1e-4,i.home.fluidStrength=p.value;const B=p.value>0;re.enabled=B,He.currentTheme&&(this.uMusicTime.value=He.currentTheme.seek()),this.updateSceneLUT()});const Pe=Be(()=>{const B=!Ue.value,ge=ot.value,$e=je.value,We=Q.value,Ge=i.home.section;return B?ge?"LOADER_WHITE_PAGE":"LOADER":$e?"MENU":ge?"WHITE_PAGE":We?"FOCUS_"+(Ge+1):"MAIN"});F(Pe,B=>{this.material=Ae[B]},{immediate:!0}),this.fsQuad._mesh.onBeforeRender=(B,ge,$e)=>{this._fsQuadCamera||(this._fsQuadCamera=$e)},this._createDebug(e),this._onConfigUpdated()}compile(){for(const t in this.materials)this.fsQuad.material=this.materials[t],z.renderer.instance.render(this.fsQuad._mesh,this._fsQuadCamera),this.fsQuad.material=this.material}render(...t){var i,o,n,r;const e=(r=(n=(o=(i=z.viewManager._views)==null?void 0:i[0])==null?void 0:o.instance._components)==null?void 0:n.egg)==null?void 0:r.projectedPoint;this.uEggPosition.value.set((e.x+1)/2,(e.y+1)/2,e.z),this.tDepth.value=this.renderPass._renderTarget.depthTexture,this.uCamera.value.set(this.renderPass._camera.near,this.renderPass._camera.far),this.uProjectionInverse.value.copy(this.renderPass._camera.projectionMatrixInverse),this.uViewMatrixInv.value.copy(this.renderPass._camera.matrixWorld),super.render(...t)}updateSceneLUT(){const t=(this.uiStore.home.planetsOverlayFade>.999?1:0)+(this.uiStore.home.eggExplosion>.999?1:0),e=this.uniforms.uMenu.value>.5?Qe.composer.final.menuLut.resource:Qe.composer.final.sceneLuts[t].resource,i=e.data||M.get(e.name);this.uniforms.tSceneLut.value!==(i==null?void 0:i.texture3D)&&(this.uniforms.tSceneLut.value=i==null?void 0:i.texture3D,this.uniforms.uSceneLutSize.value=i==null?void 0:i.size)}updatePaintLUT(){const t=this.uiStore.home.section,e=Qe.composer.final.paintSectionLuts[t].resource,i=e.data||M.get(e.name);this.uniforms.tPaintLut.value=i==null?void 0:i.texture3D,this.uniforms.uPaintLutSize.value=i==null?void 0:i.size}_onConfigUpdated(){this.uiStore.mainLoader.progressComplete&&(this.updateSceneLUT(),this.updatePaintLUT())}_createDebug(t){if(!T)return;const e=t.addFolder({title:"Final Pass"});e.addInput(this.mouseFluidFlowmap,"enabled",{label:"Mouse Flowmap"}),e.addInput(this.fluidFlowmap,"enabled",{label:"Fluid Flowmap"});const i=e.addFolder({title:"Scene LUTS",expanded:!1});for(let n=0;n<Qe.composer.final.sceneLuts.length;n++){const r=Qe.composer.final.sceneLuts[n];C.addLutFileInput(i,r,this._onConfigUpdated,{className:"config",lineCount:1,label:"Scene "+(n+1)})}C.addLutFileInput(i,Qe.composer.final.menuLut,this._onConfigUpdated,{className:"config",lineCount:1,label:"Menu"});const o=e.addFolder({title:"Paint LUTS",expanded:!1});for(let n=0;n<Qe.composer.final.paintSectionLuts.length;n++){const r=Qe.composer.final.paintSectionLuts[n];C.addLutFileInput(o,r,this._onConfigUpdated,{className:"config",lineCount:1,label:"Section "+(n+1)})}}}const yo={enabled:!0,bloom:{enabled:!0,strength:.91,radius:.11,threshold:.15,smoothWidth:.29}};class kc{constructor(t){l(this,"_passes");l(this,"_scenes");l(this,"_enabled");l(this,"_debug");l(this,"_renderTarget");l(this,"_composer");l(this,"_bloomVisibility");W(this),this._scenes={},this._enabled=!1,this._bloomVisibility=1,this._createDebug(t.debugContainer),this._createRenderTarget(),this._createComposer(),this._createPasses(),this.updateSettings(yo),this._bind(!0)}destroy(){var t,e;(t=this._composer)==null||t.dispose(),(e=this._debug)==null||e.dispose(),this._bind(!1)}_bind(t=!0){z[t?"addEventListener":"removeEventListener"]("resize",this.onWindowResize)}get passes(){return this._passes}get enabled(){return this._enabled}get texture(){var t,e;return(e=(t=this._composer)==null?void 0:t.readBuffer)==null?void 0:e.texture}get bloomVisibility(){return this._bloomVisibility}set bloomVisibility(t){this._bloomVisibility=Math.max(0,Math.min(1,t))}render(t){if(this._passes.render.scene=t?t.scene:null,this._passes.render.camera=t?t.camera:null,this._passes.bloom&&this._passes.final){const e=!!this._passes.final.uniforms.uMenu.value,o=(!!!this._passes.final.uniforms.uWhitePage.value||e)&&this._passes.bloom._forceEnabled&&yt.gpu.tier>1;o!==this._passes.bloom.enabled&&(this._passes.bloom.enabled=o)}this._passes.bloom&&this._passes.bloom.enabled&&(this._passes.bloom.scene=t?t.scene:null,this._passes.bloom.camera=t?t.camera:null,this._passes.bloom.visibility=this._bloomVisibility),this._composer.render()}updateSettings(t){const e=JSON.parse(JSON.stringify(yo));t=Vo(e,t),this._enabled=!!t.enabled,this._passes.bloom&&(this._passes.bloom.enabled=t.bloom.enabled,this._passes.bloom.threshold=t.bloom.threshold,this._passes.bloom.smoothWidth=t.bloom.smoothWidth,this._passes.bloom.strength=t.bloom.strength,this._passes.bloom.radius=t.bloom.radius)}_createRenderTarget(){this._renderTarget=new ye(0,0),this._renderTarget.samples=Ko.composer.samples,this._renderTarget.texture.format=Fe,this._renderTarget.texture.colorSpace=qo,this._renderTarget.texture.minFilter=ie,this._renderTarget.texture.magFilter=ie,this._renderTarget.texture.generateMipmaps=!1}_createComposer(){this._composer=new nc(z.renderer.instance,this._renderTarget)}_createPasses(){this._passes={},this._passes.render=this._createRenderPass(),this._passes.bloom=this._createBloomPass(),this._passes.final=this._createFinalPass()}_createRenderPass(){const t=new ac(null,null);return this._composer.addPass(t),t}_createBloomPass(){const t=new fc({type:Ei,threshold:.15,smoothWidth:.29,strength:2.22,radius:1,resolutionScale:.25});if(vt.addTexture(t._renderTargetBright.texture),vt.addTexture(t._renderTargetsBlur.horizontal[0].texture),t.enabled=!0,this._composer.addPass(t),t._forceEnabled=!0,this._debug){const i=this._debug.addFolder({title:"Bloom",expanded:!1});i.addInput(t,"_forceEnabled",{label:"Enabled"}),i.addInput(t,"strength",{min:0,max:3,step:.01}),i.addInput(t,"radius",{min:0,max:1,step:.01}),i.addInput(t,"threshold",{min:0,max:1,step:.01}),i.addInput(t,"smoothWidth",{min:0,max:1,step:.01})}const e=ve();return F([()=>e.home.planetsOverlayFade,()=>e.home.eggOverlayFade],([i,o])=>{t.burn=Math.max(1-Math.abs(i-1),1-Math.abs(o-1))}),t}_createFinalPass(){const t=new Bc(this._passes.render,this._debug);return this._composer.addPass(t),t}onWindowResize({renderWidth:t,renderHeight:e,renderScale:i}){this._composer.setSize(t,e)}_createDebug(t){T&&(this._debug=T.addFolder({title:"Home Composer",parent:t}),this._debug.addInput(this,"_enabled",{label:"enabled"}),this._debug.addInput(this,"bloomVisibility",{step:.01,label:"Bloom Visibility",min:0,max:1}))}}const _n=(a,t,e,i={})=>{const o={override:!1},n=t.renderOrder;return a.addInput(o,"override",{label:"Override Render Order",...i}).on("change",({value:r})=>{t.renderOrder=r?e:n})},Hc=`#define GLSLIFY 1
varying vec3 vPosition;varying vec3 vWorldPosition;uniform sampler2D tNoise;uniform float uTime;uniform float uReveal;uniform float uHighlight;float cremap(float value,float start1,float stop1,float start2,float stop2){float r=start2+(stop2-start2)*((value-start1)/(stop1-start1));return clamp(r,min(start2,stop2),max(start2,stop2));}float remap(float value,float start1,float stop1,float start2,float stop2){return start2+(stop2-start2)*((value-start1)/(stop1-start1));}float textureNoise3D(sampler2D noiseTexture,vec2 uv,float time){vec2 uvNoise=uv+time*0.007;vec2 uvNoise2=uv-time*0.007;vec3 noise=texture2D(noiseTexture,uvNoise).rgb;vec3 noise2=texture2D(noiseTexture,uvNoise2).rgb;vec3 colorDot=vec3(sin(vec3(time,time+1.047,time+2.094)));float colorAvg=(abs(colorDot.r)+abs(colorDot.g)+abs(colorDot.b))/3.;colorDot/=colorAvg;noise=(noise+noise2)/2.;return dot(normalize(noise-0.5),colorDot);}float quadraticThroughAGivenPoint(float x,float a,float b){float epsilon=0.00001;float min_param_a=0.0+epsilon;float max_param_a=1.0-epsilon;float min_param_b=0.0;float max_param_b=1.0;a=min(max_param_a,max(min_param_a,a));b=min(max_param_b,max(min_param_b,b));float A=(1.-b)/(1.-a)-(b/a);float B=(A*(a*a)-b)/a;float y=A*(x*x)-B*(x);y=min(1.,max(0.,y));return y;}void main(){vec2 uv;uv.y=remap(length(vPosition),INNER_RADIUS,OUTER_RADIUS,0.,1.);uv.x=((atan(vPosition.y,vPosition.x)/3.14159)+1.)/2.;vec2 offset=uTime*NOISE_SPEED+NOISE_OFFSET;vec2 noiseUv=uv*NOISE_SIZE;vec3 noise=texture2D(tNoise,noiseUv-offset).rgb/2.;noise+=texture2D(tNoise,noiseUv+offset).rgb/2.;vec3 color=mix(COLOR,HIGHLIGHT_COLOR,uHighlight);float colorWhite=mix(COLOR_WHITE,HIGHLIGHT_COLOR_WHITE,uHighlight);float colorCyan=mix(COLOR_CYAN,HIGHLIGHT_COLOR_CYAN,uHighlight);float colorMagenta=mix(COLOR_MAGENTA,HIGHLIGHT_COLOR_MAGENTA,uHighlight);float colorPower=mix(COLOR_POWER,HIGHLIGHT_COLOR_POWER,uHighlight);float colorOpacity=mix(COLOR_OPACITY,HIGHLIGHT_COLOR_OPACITY,uHighlight);vec3 noiseColor=noise.rrr*colorWhite;noiseColor.gb+=noise.g*colorCyan;noiseColor.rb+=noise.b*colorMagenta;color*=noiseColor;vec2 maskUv=vec2(mix(uv.y,vPosition.y,(sin(uTime*MASK_UV_SPEED)+1.)/2.),mix(uv.y,vPosition.x,(cos(uTime*MASK_UV_SPEED)+1.)/2.))*MASK_NOISE_SIZE+MASK_NOISE_OFFSET;float maskNoise=textureNoise3D(tNoise,maskUv,uTime*MASK_NOISE_SPEED);maskNoise=remap(maskNoise,-2.,2.,0.,1.);color*=0.5+maskNoise*MASK_BOOST_STRENGTH;float gradient=cremap(uv.y,uv.y<GRADIENT_CENTER ? 0. : 1.,GRADIENT_CENTER,0.,1.);gradient=quadraticThroughAGivenPoint(gradient,GRADIENT_EASE.x,GRADIENT_EASE.y);color-=(1.-gradient)*GRADIENT_INTENSITY;color=pow(max(color,vec3(0.)),vec3(colorPower))*colorOpacity;float rp=dot(normalize(vWorldPosition),normalize(vec3(vWorldPosition.x,0.,vWorldPosition.z)));float atm=remap(rp,GROUND_ATMOSPHERE_RANGE.x,GROUND_ATMOSPHERE_RANGE.y,1.,0.);atm=mix(1.,atm,GROUND_ATMOSPHERE_OPACITY*0.3);gl_FragColor=vec4(vec3(((color*atm)-smoothstep(1.,0.2,pow(uReveal,0.5)))*smoothstep(0.2,0.5,uReveal)),1.);
#ifdef DEBUG
#if DEBUG == 1
gl_FragColor=vec4(vec3(uv,1.),1.);
#elif DEBUG == 2
gl_FragColor=vec4(vec3(noise),1.);
#elif DEBUG == 3
gl_FragColor=vec4(vec3(gradient),1.);
#elif DEBUG == 4
gl_FragColor=vec4(vec3(maskNoise),1.);
#elif DEBUG == 5
gl_FragColor=vec4(0.,1.,0.,1.);
#endif
#endif
}`,Vc=w(Hc,"fragmentShader"),Wc=`#define GLSLIFY 1
varying vec3 vPosition;varying vec3 vWorldPosition;void main(){vec4 worldPosition=modelMatrix*vec4(position,1.);gl_Position=projectionMatrix*viewMatrix*worldPosition;vPosition=position;vWorldPosition=worldPosition.xyz;}`,Yc=w(Wc,"vertexShader");class xn extends le{constructor(e){super();l(this,"_config");l(this,"_planetConfig");l(this,"_renderOrder");l(this,"_geometry");l(this,"_mesh");l(this,"_debug");l(this,"_lastGeometryConfig");l(this,"_material");l(this,"_speed",0);W(this),this._config=e.config,this._renderOrder=e.renderOrder,this._planetConfig=e.planetConfig,this._geometry=this._createGeometry(),this._material=this._createMaterial(),this._mesh=this._createMesh(),this._debug=this._createDebug(e.debugContainer),this._lastGeometryConfig=JSON.stringify(this._config.geometry),this._onConfigUpdated()}get speed(){return this._speed}set speed(e){this._speed=e}get reveal(){return this._mesh.material.uniforms.uReveal.value}set reveal(e){this._mesh.material.uniforms.uReveal.value=e}get mesh(){return this._mesh}_createGeometry(){const e=new Zo(this._config.geometry.radius.max,this._config.geometry.radius.min,this._config.geometry.height,this._config.geometry.quality,1,!0);return e.rotateX(Math.PI/2),e}_updateGeometry(){this._geometry.dispose(),this._geometry=this._createGeometry(),this._mesh.geometry=this._geometry}_createMaterial(){const e=M.get("noise");e.minFilter=e.magFilter=ie,e.wrapS=e.wrapT=Z;const i=new Y({uniforms:{tNoise:{value:e},uResolution:{value:new I},uTime:{value:0},uReveal:{value:1},uHighlight:{value:0}},defines:{COLOR:"",COLOR_WHITE:"",COLOR_CYAN:"",COLOR_MAGENTA:"",COLOR_OPACITY:"",COLOR_POWER:"",HIGHLIGHT_COLOR:"",HIGHLIGHT_COLOR_WHITE:"",HIGHLIGHT_COLOR_CYAN:"",HIGHLIGHT_COLOR_MAGENTA:"",HIGHLIGHT_COLOR_OPACITY:"",HIGHLIGHT_COLOR_POWER:"",NOISE_SPEED:"",NOISE_OFFSET:"",NOISE_SIZE:"",GRADIENT_CENTER:"",GRADIENT_EASE:"",GRADIENT_INTENSITY:"",MASK_UV_SPEED:"",MASK_NOISE_SPEED:"",MASK_NOISE_SIZE:"",MASK_NOISE_OFFSET:"",MASK_BOOST_STRENGTH:"",INNER_RADIUS:"",OUTER_RADIUS:"",GROUND_ATMOSPHERE_COLOR_1:"",GROUND_ATMOSPHERE_COLOR_2:"",GROUND_ATMOSPHERE_RANGE:"",GROUND_ATMOSPHERE_OPACITY:"",DEBUG:0},blending:Ve,depthWrite:!1,side:dt,transparent:!0});return Vc.use(i),Yc.use(i),i}_createMesh(){const e=new te(this._geometry,this._material);return this.add(e),e.position.z=.01,e.renderOrder=this._renderOrder,e.userData.renderBloom=!1,zt(e,this._material.uniforms.uResolution.value),e}_onConfigUpdated(){De(this._mesh.material,{COLOR:this._config.color.color,COLOR_WHITE:this._config.color.white,COLOR_CYAN:this._config.color.cyan,COLOR_MAGENTA:this._config.color.magenta,COLOR_OPACITY:this._config.color.opacity,COLOR_POWER:this._config.color.power,HIGHLIGHT_COLOR:this._config.highlightColor.color,HIGHLIGHT_COLOR_WHITE:this._config.highlightColor.white,HIGHLIGHT_COLOR_CYAN:this._config.highlightColor.cyan,HIGHLIGHT_COLOR_MAGENTA:this._config.highlightColor.magenta,HIGHLIGHT_COLOR_OPACITY:this._config.highlightColor.opacity,HIGHLIGHT_COLOR_POWER:this._config.highlightColor.power,NOISE_SPEED:this._config.noise.speed,NOISE_OFFSET:this._config.noise.offset,NOISE_SIZE:this._config.noise.size,GRADIENT_CENTER:this._config.gradient.center,GRADIENT_EASE:this._config.gradient.ease,GRADIENT_INTENSITY:this._config.gradient.intensity,MASK_UV_SPEED:this._config.mask.uvSpeed,MASK_NOISE_SPEED:this._config.mask.noiseSpeed,MASK_NOISE_SIZE:this._config.mask.noiseSize,MASK_NOISE_OFFSET:this._config.mask.noiseOffset,MASK_BOOST_STRENGTH:this._config.mask.boostStrength,GROUND_ATMOSPHERE_COLOR_1:this._planetConfig.groundAtmosphere.color1,GROUND_ATMOSPHERE_COLOR_2:this._planetConfig.groundAtmosphere.color2,GROUND_ATMOSPHERE_RANGE:this._planetConfig.groundAtmosphere.range,GROUND_ATMOSPHERE_OPACITY:this._planetConfig.groundAtmosphere.opacity,INNER_RADIUS:de(this._config.geometry.radius.min,3),OUTER_RADIUS:de(this._config.geometry.radius.max,3)},{precision:3,warn:ne.isProduction});const e=JSON.stringify(this._config.geometry);this._lastGeometryConfig!==e&&(this._updateGeometry(),this._lastGeometryConfig=e)}update({time:e,delta:i}){this._mesh.material.uniforms.uTime.value+=i*(1+this._speed)*(1+this.mesh.material.uniforms.uHighlight.value)}_createDebug(e){if(!T)return;const i=T.addFolder({title:"Aura",parent:e,expanded:!0});i.addInput(this._mesh.material.defines,"DEBUG",{options:{NONE:0,UV:1,NOISE:2,GRADIENT:3,MASK:4,GEOMETRY:5},label:"Debug"}).on("change",()=>{this._mesh.material.needsUpdate=!0}),ft(i,this._mesh.material),_n(i,this._mesh,10,{label:"Bring Forward"});const o=i.addFolder({title:"Transform",expanded:!1});o.addInput(this._mesh,"position",{label:"Position",x:{step:.01},y:{step:.01},z:{step:.01}}),o.addInput(this._mesh,"scale",{label:"Scale",x:{step:.01},y:{step:.01},z:{step:.01}}),o.addInput(this._mesh,"rotation",{label:"Rotation",view:"rotation",rotationMode:"euler",step:.001,order:"XYZ",unit:"rad"});const n=i.addFolder({title:"Color",expanded:!1});C.addInputs(n,this._config.color,this._onConfigUpdated,{color:{label:"Color"},white:{label:"White",step:.01},cyan:{label:"Cyan",step:.01},magenta:{label:"Magenta",step:.01},power:{label:"Power",step:.01},opacity:{label:"Opacity",step:.01}},{className:"config"});const r=i.addFolder({title:"Highlight Color",expanded:!1});C.addInputs(r,this._config.highlightColor,this._onConfigUpdated,{color:{label:"Color"},white:{label:"White",step:.01},cyan:{label:"Cyan",step:.01},magenta:{label:"Magenta",step:.01},power:{label:"Power",step:.01},opacity:{label:"Opacity",step:.01}},{className:"config"});const s=i.addFolder({title:"Geometry",expanded:!1});C.addInputs(s,this._config.geometry,this._onConfigUpdated,{radius:{label:"Radius",min:0,max:3,step:.01},quality:{label:"Quality",step:1,min:3}},{className:"config"});const c=i.addFolder({title:"Noise",expanded:!1});C.addInputs(c,this._config.noise,this._onConfigUpdated,{speed:{label:"Speed",x:{step:.001},y:{step:.001}},size:{label:"Size",x:{step:1},y:{step:.01}},offset:{label:"Offset",x:{step:1},y:{step:.01}}},{className:"config"});const m=i.addFolder({title:"Gradient",expanded:!1});C.addInputs(m,this._config.gradient,this._onConfigUpdated,{center:{label:"Center",step:.01,min:0,max:1},ease:{label:"Ease",x:{min:0,max:1,step:.01},y:{min:0,max:1,step:.01}},intensity:{label:"Intensity",step:.01}},{className:"config"});const f=i.addFolder({title:"Mask",expanded:!1});return C.addInputs(f,this._config.mask,this._onConfigUpdated,{uvSpeed:{label:"Uv Speed",step:.01},noiseSpeed:{label:"Noise Speed",step:.01},noiseSize:{label:"Noise Size",x:{step:.01},y:{step:.01}},noiseOffset:{label:"Noise Offset",x:{step:.01},y:{step:.01}},boostStrength:{label:"Boost",step:.01}},{className:"config"}),i}}const jc=`#define GLSLIFY 1
uniform sampler2D tMap;uniform sampler2D tAtmosphere;uniform float uSphereFactor;uniform vec3 uLightDirection;uniform float uReveal;uniform float uHighlight;varying vec2 vUv;varying vec3 vWorldPosition;float cremap(float value,float start1,float stop1,float start2,float stop2){float r=start2+(stop2-start2)*((value-start1)/(stop1-start1));return clamp(r,min(start2,stop2),max(start2,stop2));}float circularIn(float t){return 1.0-sqrt(max(1.0-t*t,0.));}vec3 packNormalToRGB(const in vec3 normal){return normalize(normal)*0.5+0.5;}float hash12(vec2 p){vec3 p3=fract(vec3(p.xyx)*0.1031);p3+=dot(p3,p3.yzx+33.33);return fract((p3.x+p3.y)*p3.z);}vec3 rgb2hsv(vec3 c){vec4 K=vec4(0.0,-1.0/3.0,2.0/3.0,-1.0);vec4 p=mix(vec4(c.bg,K.wz),vec4(c.gb,K.xy),step(c.b,c.g));vec4 q=mix(vec4(p.xyw,c.r),vec4(c.r,p.yzx),step(p.x,c.r));float d=q.x-min(q.w,q.y);float e=1.0e-10;return vec3(abs(q.z+(q.w-q.y)/(6.0*d+e)),d/(q.x+e),q.x);}vec3 hsv2rgb(vec3 c){vec4 K=vec4(1.0,2.0/3.0,1.0/3.0,3.0);vec3 p=abs(fract(c.xxx+K.xyz)*6.0-K.www);return c.z*mix(K.xxx,clamp(p-K.xxx,0.0,1.0),c.y);}float blendScreen(float base,float blend){return 1.0-((1.0-base)*(1.0-blend));}vec3 blendScreen(vec3 base,vec3 blend){return vec3(blendScreen(base.r,blend.r),blendScreen(base.g,blend.g),blendScreen(base.b,blend.b));}vec3 blendScreen(vec3 base,vec3 blend,float opacity){return(blendScreen(base,blend)*opacity+base*(1.0-opacity));}vec4 reconstructSurface(vec2 uv){float uvLengthSquared=dot(uv,uv);float uvLength=sqrt(uvLengthSquared);float sigDist=uvLength-1.;float mask=1.-clamp(sigDist/fwidth(sigDist)+0.5,0.0,1.0);vec3 surface=vec3(0.0,0.0,0.0);if(sigDist<0.0001){surface=vec3(uv/1.,sqrt(1.-uvLengthSquared));}else{surface=vec3(uv/uvLength,uvLength-1.);}return vec4(surface,mask);}vec2 generateSphericalUv(vec3 position){float width=sqrt(1.0-position.y*position.y);float generatrixX=position.x/width*sign(position.z);vec2 generatrix=vec2(generatrixX,position.y);vec2 uv=asin(generatrix)/3.14159+vec2(0.5,0.5);return vec2(uv);}float isNorm(vec2 _st){if(_st.x>1.||_st.y>1.||_st.x<0.||_st.y<0.)return 0.;return 1.;}void main(){vec2 uv=vUv;vec4 surfaceWithMask=reconstructSurface(uv);vec3 surfaceNormal=surfaceWithMask.xyz;float uvDist=length(uv);uvDist=mix(uvDist,circularIn(uvDist),uSphereFactor);float uvAngle=atan(uv.y,uv.x);vec2 uvFlat=vec2(cos(uvAngle)*uvDist,sin(uvAngle)*uvDist);vec4 texel2=texture2D(tMap,(uvFlat+1.)/2.)*isNorm((uvFlat+1.)/2.);vec3 hsv=rgb2hsv(texel2.rgb);hsv.r+=HUE_SHIFT;texel2.rgb=hsv2rgb(hsv);vec2 atmospherRange=mix(ATMOSPHERE_RANGE,HIGHLIGHT_ATMOSPHERE_RANGE,uHighlight);float atmospherDispersion=mix(ATMOSPHERE_DISPERSION,HIGHLIGHT_ATMOSPHERE_DISPERSION,uHighlight);vec3 atmospherColor=mix(ATMOSPHERE_COLOR,HIGHLIGHT_ATMOSPHERE_COLOR,uHighlight);float fresnelBlend=pow(1.0-surfaceWithMask.z,2.5);float atmosphereAmount=mix(atmospherRange.x,atmospherRange.y,fresnelBlend);vec3 atmosphereNormal=surfaceNormal.xyz;if(surfaceWithMask.w<0.5){float haloBlend=pow(max(1.0-surfaceWithMask.z*5.0,0.0),3.0);atmosphereAmount=haloBlend*atmospherRange.y;atmosphereNormal=vec3(surfaceWithMask.xy,0.0);}vec3 lightMask;lightMask.r=max(dot(atmosphereNormal,uLightDirection)-atmospherDispersion,0.0)*1.5;lightMask.g=max(dot(atmosphereNormal,uLightDirection)+0.0,0.0)*1.5;lightMask.b=max(dot(atmosphereNormal,uLightDirection)+atmospherDispersion,0.0)*1.5;float a=pow(1.-dot(atmosphereNormal,vec3(0.,0.,1.)),1.5)*uHighlight;lightMask+=a*atmospherColor;vec3 light=lightMask*LIGHT_COLOR;vec3 litAtmosphere=light*atmospherColor;vec3 lightDisp=max(normalize(lightMask)*max(length(lightMask),1.),vec3(0.001));float atmosphereMask=max(max(lightMask.r,lightMask.g),lightMask.b);vec4 atm=vec4((lightDisp+a)*LIGHT_COLOR*atmospherColor,atmosphereMask*atmosphereAmount);vec4 surfaceColor=texel2;float lightBlend=mix(0.,1.-LIGHT_BLEND,uReveal);surfaceColor.rgb*=mix(light,vec3(1.),lightBlend)*surfaceWithMask.w;surfaceColor.a*=surfaceWithMask.w;vec4 color=surfaceColor;color.rgb=mix(color.rgb,atm.rgb,max(atm.a,0.001));color.a=max(color.a,atm.a);float rp=dot(normalize(vWorldPosition),normalize(vec3(vWorldPosition.x,0.,vWorldPosition.z)));float atmosphereProg=cremap(rp,GROUND_ATMOSPHERE_RANGE.x,GROUND_ATMOSPHERE_RANGE.y,0.,1.);atmosphereProg+=(hash12(vUv*1000.)-0.5)*0.05;vec3 atmosphereColor=texture2D(tAtmosphere,vec2(0.5,atmosphereProg)).rgb;vec3 backgroundColor=vec3(0.04,0.05,0.1);atmosphereColor=blendScreen(atmosphereColor,backgroundColor)*0.8;color.rgb=blendScreen(color.rgb,atmosphereColor,GROUND_ATMOSPHERE_OPACITY);gl_FragColor=color;
#ifdef DEBUG
#if DEBUG == 1
gl_FragColor=vec4(packNormalToRGB(surfaceNormal),surfaceWithMask.w);
#elif DEBUG == 2
gl_FragColor=vec4(light,surfaceWithMask.w);
#elif DEBUG == 3
gl_FragColor=vec4(litAtmosphere*atmosphereAmount,1.);
#elif DEBUG == 4
gl_FragColor=vec4(surfaceColor);
#elif DEBUG == 5
gl_FragColor=vec4(uv.x,uv.y,1.,1.);
#elif DEBUG == 6
gl_FragColor=vec4(1.,0.,0.,1.);
#endif
if(gl_FragColor.a<0.01){discard;}
#endif
}`,$c=w(jc,"fragmentShader"),Zc=`#define GLSLIFY 1
varying vec2 vUv;varying vec3 vWorldPosition;void main(){vec4 worldPosition=modelMatrix*vec4(position,1.);gl_Position=projectionMatrix*viewMatrix*worldPosition;vUv=uv;vWorldPosition=worldPosition.xyz;}`,Kc=w(Zc,"vertexShader"),Si=new Zt,So=new Zt;class qc{constructor(t){l(this,"_config");l(this,"_globalConfig");l(this,"_mesh");l(this,"_debug");l(this,"_aura");l(this,"_uiStore");l(this,"_debugStartLight",!1);W(this),this._config=t.config,this._globalConfig=t.globalConfig,this._uiStore=ve(),this._mesh=this._createMesh(t.baseMesh,t.atmosphereMap),this._debug=this._createDebug(t.debugContainer),this._aura=this._createAura(),this.bind(),this._onConfigUpdated()}get mesh(){return this._mesh}get aura(){return this._aura}get debugStartLight(){return this._debugStartLight}set debugStartLight(t){this._debugStartLight=t,this._updateLight()}bind(){F(()=>Ft(this._uiStore.home.planets,[0,.67],[0,1])*(1-this._uiStore.home.fluidStrength),t=>{this._mesh.material&&(this._mesh.material.uniforms.uReveal.value=t,this.aura.reveal=t,this._updateLight())},{immediate:!0}),F(()=>this._uiStore.home.highlightedPlanet===this._config.highlightIndex,t=>{this._mesh.material&&(ae.to(this._mesh.material.uniforms.uHighlight,{value:t?1:0,duration:1.5,ease:"power2.out"}),ae.to(this._aura.mesh.material.uniforms.uHighlight,{value:t?1:0,duration:1.5,ease:"power2.out"}))})}_updateLight(){const t=this._mesh.material.uniforms.uLightDirection.value;So.copy(this._globalConfig.components.planets.light.endDirection),Si.copy(this._globalConfig.components.planets.light.startDirection),this._debugStartLight||Si.slerp(So,Ft(this._uiStore.home.planets*(1-this._uiStore.home.fluidStrength),[0,.7],[0,1])),t.set(0,1,0).applyQuaternion(Si)}_createMesh(t,e){const i=new Y({uniforms:{tMap:{value:M.get(this._config.texture)},tAtmosphere:{value:e},uSphereFactor:{value:0},uLightDirection:{value:new A(0,1,0)},uReveal:{value:0},uHighlight:{value:0}},defines:{HUE_SHIFT:"",ATMOSPHERE_RANGE:"",ATMOSPHERE_COLOR:"",ATMOSPHERE_DISPERSION:"",HIGHLIGHT_ATMOSPHERE_RANGE:"",HIGHLIGHT_ATMOSPHERE_COLOR:"",HIGHLIGHT_ATMOSPHERE_DISPERSION:"",LIGHT_COLOR:"",LIGHT_BLEND:"",GROUND_ATMOSPHERE_COLOR_1:"",GROUND_ATMOSPHERE_COLOR_2:"",GROUND_ATMOSPHERE_RANGE:"",GROUND_ATMOSPHERE_OPACITY:"",DEBUG:0},side:ai,depthWrite:!1,transparent:!0});return $c.use(i),Kc.use(i),t.material=i,t.renderOrder=this._globalConfig.renderOrders.planets,t.lookAt(new A(0,0,0)),t}_createAura(){const t=new xn({config:this._config.aura,planetConfig:this._config,renderOrder:this._globalConfig.renderOrders.planetsAura,debugContainer:this._debug});return this._mesh.add(t),t}_onConfigUpdated(){this._mesh.material.uniforms.tMap.value=M.get(this._config.texture),De(this._mesh.material,{HUE_SHIFT:this._config.hueShift,ATMOSPHERE_RANGE:this._config.atmosphere.range,ATMOSPHERE_COLOR:this._config.atmosphere.color,ATMOSPHERE_DISPERSION:this._config.atmosphere.dispersion,HIGHLIGHT_ATMOSPHERE_RANGE:this._config.highlightAtmosphere.range,HIGHLIGHT_ATMOSPHERE_COLOR:this._config.highlightAtmosphere.color,HIGHLIGHT_ATMOSPHERE_DISPERSION:this._config.highlightAtmosphere.dispersion,LIGHT_COLOR:this._globalConfig.components.planets.light.color,LIGHT_BLEND:this._globalConfig.components.planets.light.blend,GROUND_ATMOSPHERE_COLOR_1:this._config.groundAtmosphere.color1,GROUND_ATMOSPHERE_COLOR_2:this._config.groundAtmosphere.color2,GROUND_ATMOSPHERE_RANGE:this._config.groundAtmosphere.range,GROUND_ATMOSPHERE_OPACITY:this._config.groundAtmosphere.opacity},{precision:3,warn:ne.isProduction}),this._updateLight(),this._aura._onConfigUpdated()}update({time:t,delta:e}){this._aura.update({time:t,delta:e})}_createDebug(t){if(!T)return;const e=T.addFolder({title:"Planet",parent:t});e.addInput(this._mesh.material.defines,"DEBUG",{options:{NONE:0,NORMAL:1,LIGHT:2,ATMOSPHERE:3,SURFACE:4,UV:5,GEOMETRY:6},label:"Debug"}).on("change",()=>{this._mesh.material.needsUpdate=!0}),e.addInput(this._mesh.material.uniforms.uSphereFactor,"value",{label:"Sphere Factor",min:0,max:1,step:.01}),C.addInput(e,this._config,"texture",this._onConfigUpdated,{className:"config",label:"Texture",options:{"planet-01":"planet-01","planet-02":"planet-02","planet-03":"planet-03","planet-04":"planet-04"}}),C.addInput(e,this._config,"highlightIndex",this._onConfigUpdated,{className:"config",label:"Highlight Index",options:{0:0,1:1,2:2,3:3}}),C.addInput(e,this._config,"hueShift",this._onConfigUpdated,{className:"config",label:"Hue Shift",min:-1,max:1,step:.01});const i=e.addFolder({title:"Atmosphere",expanded:!1});C.addInputs(i,this._config.atmosphere,this._onConfigUpdated,{color:{label:"Color"},dispersion:{label:"Dispersion",step:.01},range:{label:"Range",min:0,max:1,step:.001}},{className:"config"});const o=e.addFolder({title:"Highlight Atmosphere",expanded:!1});C.addInputs(o,this._config.highlightAtmosphere,this._onConfigUpdated,{color:{label:"Color"},dispersion:{label:"Dispersion",step:.01},range:{label:"Range",min:0,max:1,step:.001}},{className:"config"});const n=e.addFolder({title:"Ground Atmosphere",expanded:!1});return C.addInputs(n,this._config.groundAtmosphere,this._onConfigUpdated,{color1:{label:"Color 1"},color2:{label:"Color 2"},range:{label:"Range",min:0,max:2,step:.001},opacity:{label:"Opacity",min:0,max:1,step:.01}},{className:"config"}),e}}const Xc=`#define GLSLIFY 1
varying vec2 vUv;varying vec3 vPosition;uniform float uTime;uniform float uReveal;uniform sampler2D tNoise;float cremap(float value,float start1,float stop1,float start2,float stop2){float r=start2+(stop2-start2)*((value-start1)/(stop1-start1));return clamp(r,min(start2,stop2),max(start2,stop2));}float remap(float value,float start1,float stop1,float start2,float stop2){return start2+(stop2-start2)*((value-start1)/(stop1-start1));}float textureNoise3D(sampler2D noiseTexture,vec2 uv,float time){vec2 uvNoise=uv+time*0.007;vec2 uvNoise2=uv-time*0.007;vec3 noise=texture2D(noiseTexture,uvNoise).rgb;vec3 noise2=texture2D(noiseTexture,uvNoise2).rgb;vec3 colorDot=vec3(sin(vec3(time,time+1.047,time+2.094)));float colorAvg=(abs(colorDot.r)+abs(colorDot.g)+abs(colorDot.b))/3.;colorDot/=colorAvg;noise=(noise+noise2)/2.;return dot(normalize(noise-0.5),colorDot);}float quadraticThroughAGivenPoint(float x,float a,float b){float epsilon=0.00001;float min_param_a=0.0+epsilon;float max_param_a=1.0-epsilon;float min_param_b=0.0;float max_param_b=1.0;a=min(max_param_a,max(min_param_a,a));b=min(max_param_b,max(min_param_b,b));float A=(1.-b)/(1.-a)-(b/a);float B=(A*(a*a)-b)/a;float y=A*(x*x)-B*(x);y=min(1.,max(0.,y));return y;}float isNorm(vec2 _st){if(_st.x>1.||_st.y>1.||_st.x<0.||_st.y<0.)return 0.;return 1.;}float smin(float a,float b,float k){k*=2.0;float x=b-a;return 0.5*(a+b-sqrt(x*x+k*k));}void main(){vec2 uv=vUv;uv.xy=uv.yx;uv.y=((uv.y-0.5)*mix(UV_SCALE_YNEG,UV_SCALE_YPOS,uv.x))+0.5;vec4 p1=PLANET_1;vec4 p2=PLANET_2;float outOfRange=isNorm(uv);float dist1=length(vPosition-p1.xyz);float dist1mask=smoothstep(p1.w+FADE_PLANET_1.x,p1.w+FADE_PLANET_1.y,dist1);float dist2=length(vPosition-p2.xyz);float dist2mask=smoothstep(p2.w+FADE_PLANET_2.x,p2.w+FADE_PLANET_2.y,dist2);float alpha=outOfRange*min(dist1mask,dist2mask);vec2 offset=uTime*NOISE_SPEED+NOISE_OFFSET;vec2 noiseUv=uv*NOISE_SIZE;vec3 noise=texture2D(tNoise,noiseUv-offset).rgb/2.;noise+=texture2D(tNoise,noiseUv+offset).rgb/2.;vec3 noiseColor=noise.rrr*COLOR_WHITE;noiseColor.gb+=noise.g*COLOR_CYAN;noiseColor.rb+=noise.b*COLOR_MAGENTA;vec3 color=noiseColor;vec2 maskUv=uv;if(MASK_MIRROR){maskUv.y=abs(maskUv.y-0.5)*2.;}maskUv=vec2(smin(dist2,dist1,50.),maskUv.y*60.)*0.02*MASK_NOISE_SIZE+MASK_NOISE_OFFSET;float maskNoise=textureNoise3D(tNoise,maskUv,uTime*MASK_NOISE_SPEED);maskNoise=remap(maskNoise,-2.,2.,0.,1.);color*=0.5+maskNoise*MASK_BOOST_STRENGTH;vec2 gradientUv=uv;if(GRADIENT_MIRROR){gradientUv.y=abs(gradientUv.y-0.5)*2.;}float gradient=cremap(gradientUv.y,gradientUv.y<GRADIENT_CENTER ? 0. : 1.,GRADIENT_CENTER,0.,1.);gradient=quadraticThroughAGivenPoint(gradient,GRADIENT_EASE.x,GRADIENT_EASE.y);color-=(1.-gradient)*GRADIENT_INTENSITY;color=pow(max(color,vec3(0.)),vec3(COLOR_POWER))*COLOR_OPACITY;gl_FragColor=vec4(vec3(color),1.);
#ifdef DEBUG
#if DEBUG == 1
gl_FragColor=vec4(vec3(uv,1.),1.);
#elif DEBUG == 2
gl_FragColor=vec4(vec3(noise),1.);
#elif DEBUG == 3
gl_FragColor=vec4(vec3(gradient),1.);
#elif DEBUG == 4
gl_FragColor=vec4(vec3(maskNoise),1.);
#elif DEBUG == 5
gl_FragColor=vec4(0.,1.,0.,1.);
#endif
#endif
gl_FragColor.a=alpha-(1.-uReveal);}`,Qc=w(Xc,"fragmentShader"),Jc=`#define GLSLIFY 1
varying vec2 vUv;varying vec3 vPosition;void main(){vUv=uv;vPosition=position;gl_Position=projectionMatrix*modelViewMatrix*vec4(position,1.0);}`,eu=w(Jc,"vertexShader");class tu extends le{constructor(e){super();l(this,"_config");l(this,"_globalConfig");l(this,"_mesh");l(this,"_debug");l(this,"_index");l(this,"_planet1");l(this,"_planet2");l(this,"_geometry");l(this,"_material");l(this,"_lastGeometryConfig");W(this),this._globalConfig=e.globalConfig,this._config=e.config,this._index=e.index,this._planet1=e.planet1,this._planet2=e.planet2,this._geometry=this._createGeometry(),this._material=this._createMaterial(),this._mesh=this._createMesh(),this._debug=this._createDebug(e.debugContainer),this._lastGeometryConfig=JSON.stringify(this._config.geometry),this._onConfigUpdated()}get mesh(){return this._mesh}_createGeometry(){const e=this._planet1.mesh.position,i=this._planet1.mesh.scale.x*this._config.geometry.scale1,o=this._planet1.mesh.position.clone().multiplyScalar(1).normalize(),n=this._planet2.mesh.position,r=this._planet2.mesh.scale.x*this._config.geometry.scale2,s=this._planet1.mesh.position.clone().multiplyScalar(1).normalize(),c=Math.max(i,r),m=[e.x,e.y+c,e.z,e.x,e.y-c,e.z,n.x,n.y+c,n.z,n.x,n.y-c,n.z],f=[...o.toArray(),...o.toArray(),...s.toArray(),...s.toArray()],v=[1,1,0,1,1,0,0,0],h=[0,2,1,2,3,1],g=new Se(new Float32Array(m),3),b=new Se(new Float32Array(f),3),x=new Se(new Float32Array(v),2),p=new Se(new Uint16Array(h),1),y=new ri;return y.index=p,y.setAttribute("normal",b),y.setAttribute("position",g),y.setAttribute("uv",x),y}_createMaterial(){const e=this._planet1.mesh.position,i=this._planet1.mesh.scale.x*this._config.geometry.scale1,o=this._planet2.mesh.position,n=this._planet2.mesh.scale.x*this._config.geometry.scale2,r=Math.max(i,n),s=Math.min(i,n),c=r/s,m=i>n,f=M.get("noise");f.minFilter=f.magFilter=ie,f.wrapS=f.wrapT=Z;const v=new Y({uniforms:{tNoise:{value:f},uTime:{value:0},uReveal:{value:0}},defines:{FADE_PLANET_1:"",FADE_PLANET_2:"",COLOR_WHITE:"",COLOR_CYAN:"",COLOR_MAGENTA:"",COLOR_OPACITY:"",COLOR_POWER:"",NOISE_SPEED:"",NOISE_OFFSET:"",NOISE_SIZE:"",GRADIENT_CENTER:"",GRADIENT_EASE:"",GRADIENT_INTENSITY:"",GRADIENT_MIRROR:"",MASK_UV_SPEED:"",MASK_NOISE_SPEED:"",MASK_NOISE_SIZE:"",MASK_NOISE_OFFSET:"",MASK_BOOST_STRENGTH:"",MASK_MIRROR:"",INNER_RADIUS:"",OUTER_RADIUS:"",GROUND_ATMOSPHERE_COLOR_1:"",GROUND_ATMOSPHERE_COLOR_2:"",GROUND_ATMOSPHERE_RANGE:"",GROUND_ATMOSPHERE_OPACITY:"",UV_SCALE_YPOS:de(m?1:c,3),UV_SCALE_YNEG:de(m?c:1,3),PLANET_1:Qt({x:e.x,y:e.y,z:e.z,w:i}),PLANET_2:Qt({x:o.x,y:o.y,z:o.z,w:n}),DEBUG:0},transparent:!0,depthWrite:!1,blending:Ve});return Qc.use(v),eu.use(v),v}_updateGeometry(){this._geometry.dispose(),this._geometry=this._createGeometry(),this._mesh.geometry=this._geometry}_createMesh(){const e=new te(this._geometry,this._material);return e.renderOrder=$t(this._index,[0,5],this._globalConfig.renderOrders.planetsLink),this.add(e),e}_onConfigUpdated(){const e=this._planet1.mesh.scale.x*this._config.geometry.scale1,i=this._planet2.mesh.scale.x*this._config.geometry.scale2,o=Math.max(e,i),n=Math.min(e,i),r=o/n,s=e>i;De(this._mesh.material,{FADE_PLANET_1:this._config.fade.planet1,FADE_PLANET_2:this._config.fade.planet2,COLOR_WHITE:this._config.color.white,COLOR_CYAN:this._config.color.cyan,COLOR_MAGENTA:this._config.color.magenta,COLOR_OPACITY:this._config.color.opacity,COLOR_POWER:this._config.color.power,NOISE_SPEED:this._config.noise.speed,NOISE_OFFSET:this._config.noise.offset,NOISE_SIZE:this._config.noise.size,GRADIENT_CENTER:this._config.gradient.center,GRADIENT_EASE:this._config.gradient.ease,GRADIENT_INTENSITY:this._config.gradient.intensity,GRADIENT_MIRROR:this._config.gradient.mirror,MASK_UV_SPEED:this._config.mask.uvSpeed,MASK_NOISE_SPEED:this._config.mask.noiseSpeed,MASK_NOISE_SIZE:this._config.mask.noiseSize,MASK_NOISE_OFFSET:this._config.mask.noiseOffset,MASK_BOOST_STRENGTH:this._config.mask.boostStrength,MASK_MIRROR:this._config.mask.mirror,UV_SCALE_YPOS:de(s?1:r,3),UV_SCALE_YNEG:de(s?r:1,3)},{precision:3,warn:ne.isProduction}),this._mesh.visible=this._config.enabled;const c=JSON.stringify(this._config.geometry);this._lastGeometryConfig!==c&&(this._updateGeometry(),this._lastGeometryConfig=c)}update({time:e,delta:i}){this._mesh.material.uniforms.uTime.value=e}updateReveal(e){this._mesh.material.uniforms.uReveal.value=e}_createDebug(e){if(!T)return;const i=T.addFolder({title:"Link "+this._index,parent:e});i.addInput(this._mesh.material.defines,"DEBUG",{options:{NONE:0,UV:1,NOISE:2,GRADIENT:3,MASK:4,GEOMETRY:5},label:"Debug"}).on("change",()=>{this._mesh.material.needsUpdate=!0}),ft(i,this._mesh.material),_n(i,this._mesh,10,{label:"Bring Forward"}),C.addInput(i,this._config,"enabled",this._onConfigUpdated,{label:"Enabled",className:"config"});const o=i.addFolder({title:"Geometry",expanded:!1});C.addInputs(o,this._config.geometry,this._onConfigUpdated,{scale1:{label:"Scale 1",step:.01},scale2:{label:"Scale 2",step:.01}},{className:"config"});const n=i.addFolder({title:"Fade",expanded:!1});C.addInputs(n,this._config.fade,this._onConfigUpdated,{planet1:{label:"Planet 1",min:-200,max:200,step:1},planet2:{label:"Planet 2",min:-200,max:200,step:1}},{className:"config"});const r=i.addFolder({title:"Color",expanded:!1});C.addInputs(r,this._config.color,this._onConfigUpdated,{white:{label:"White",step:.01},cyan:{label:"Cyan",step:.01},magenta:{label:"Magenta",step:.01},power:{label:"Power",step:.01},opacity:{label:"Opacity",step:.01}},{className:"config"});const s=i.addFolder({title:"Noise",expanded:!1});C.addInputs(s,this._config.noise,this._onConfigUpdated,{speed:{label:"Speed",x:{step:.001},y:{step:.001}},size:{label:"Size",x:{step:.01},y:{step:.01}},offset:{label:"Offset",x:{step:.01},y:{step:.01}}},{className:"config"});const c=i.addFolder({title:"Gradient",expanded:!1});C.addInputs(c,this._config.gradient,this._onConfigUpdated,{mirror:{label:"Mirror"},center:{label:"Center",step:.01,min:0,max:1},ease:{label:"Ease",x:{min:0,max:1,step:.01},y:{min:0,max:1,step:.01}},intensity:{label:"Intensity",step:.01}},{className:"config"});const m=i.addFolder({title:"Mask",expanded:!1});return C.addInputs(m,this._config.mask,this._onConfigUpdated,{mirror:{label:"Mirror"},uvSpeed:{label:"Uv Speed",step:.01},noiseSpeed:{label:"Noise Speed",step:.01},noiseSize:{label:"Noise Size",x:{step:.01},y:{step:.01}},noiseOffset:{label:"Noise Offset",x:{step:.01},y:{step:.01}},boostStrength:{label:"Boost",step:.01}},{className:"config"}),i}}class iu{constructor(t){l(this,"_config");l(this,"_globalConfig");l(this,"_debug");l(this,"_planets");l(this,"_links");l(this,"_linkProgress");l(this,"_view");l(this,"_linkAnimationObject");l(this,"_uiStore");W(this),this._globalConfig=t.globalConfig,this._config=t.config,this._view=t.view,this._linkAnimationObject=t.gltf.scene.getObjectByName("TRANSITION_PLANETS_LINK"),this._linkProgress=0,this._uiStore=ve(),this._debug=this._createDebug(t.debugContainer),this._planets=this._createPlanets(t.gltf.scene),this._links=this._createLinks(t.gltf.scene),this._onConfigUpdated()}_createPlanets(t){const e=[],o=t.getObjectByName("STARS").material.map;return o.colorSpace=ke,t.getObjectByName("PLANETS").traverse(r=>{"isMesh"in r&&e.push(r)}),e.map((r,s)=>new qc({config:this._config.list[s],globalConfig:this._globalConfig,debugContainer:this._debug,baseMesh:r,atmosphereMap:o}))}_createLinks(t){const e=[],i=[],o=t.getObjectByName("PLANETS");for(let n=0;n<this._planets.length-1;n++){const r=this._planets[n];i.push(r);for(let s=0;s<this._planets.length;s++){const c=this._planets[s];if(i.includes(c))continue;const m=new tu({config:this._config.links[e.length],index:e.length,globalConfig:this._globalConfig,debugContainer:this._debug,planet1:r,planet2:c});i.length===3&&(m.mesh.material.side=ai),o.add(m),e.push(m)}}return e}update({time:t,delta:e}){const i=-this._linkAnimationObject.position.z;this._linkProgress=i;const o=this._planets[0].mesh.parent;o.visible=o.scale.x>.002;for(const n of this._planets)n.update({time:t,delta:e}),n.aura.speed=i;for(const n of this._links)n.update({time:t,delta:e}),n.updateReveal(i*(1-this._uiStore.home.fluidStrength))}_onConfigUpdated(){for(const t of this._planets)t._onConfigUpdated()}_createDebug(t){if(!T)return;const e=T.addFolder({title:"Planets",parent:t});e.addInput(this._uiStore.home,"highlightedPlanet",{label:"Override Highligth",options:{none:-1,Ethereum:0,Base:1,Solana:2,Avalanche:3}});const i=e.addFolder({title:"Light",expanded:!1}),o={debugStartLight:!1};i.addInput(o,"debugStartLight",{label:"Debug Start Light"}).on("change",({value:s})=>{for(const c of this._planets)c.debugStartLight=s}),C.addInputs(i,this._config.light,this._onConfigUpdated,{endDirection:!1,startDirection:!1,blend:{label:"Blend",min:0,max:1,step:.01},color:{label:"Color"}},{className:"config"});const n=(()=>{let s=JSON.stringify(this._config.light.startDirection);return()=>{const c=JSON.stringify(this._config.light.startDirection);s!==c&&(s=c,this._onConfigUpdated())}})(),r=(()=>{let s=JSON.stringify(this._config.light.endDirection);return()=>{const c=JSON.stringify(this._config.light.endDirection);s!==c&&(s=c,this._onConfigUpdated())}})();return C.addInput(i,this._config.light,"startDirection",n,{label:"Start Direction",view:"rotation",unit:"rad",className:"config"}),C.addInput(i,this._config.light,"endDirection",r,{label:"End Direction",view:"rotation",unit:"rad",className:"config"}),e}}const ou=`precision highp int;precision highp float;
#define GLSLIFY 1
#define varying in
#define texture2D texture
#define texture2DProj textureProj
#define gl_FragColor FragColor
out vec4 FragColor;
#define PI 3.141592653589793
uniform float uTime;uniform vec2 uResolution;uniform float uDpr;uniform float uPlanets;uniform sampler2D tNoise;uniform sampler2D tClouds;uniform sampler2D tMap;uniform sampler2D tEmissiveMap;uniform sampler2D tNormalMap;uniform vec2 uNormalStrength;varying vec2 vUv;varying vec3 vNormal;varying vec3 vNormal2;varying vec3 vPos;varying vec3 vMPos;varying vec3 vMVPos;highp float rand(const in vec2 uv){const highp float a=12.9898,b=78.233,c=43758.5453;highp float dt=dot(uv.xy,vec2(a,b)),sn=mod(dt,PI);return fract(sin(sn)*c);}float range(float oldValue,float oldMin,float oldMax,float newMin,float newMax){return(((oldValue-oldMin)*(newMax-newMin))/(oldMax-oldMin))+newMin;}float crange(float oldValue,float oldMin,float oldMax,float newMin,float newMax){return clamp(range(oldValue,oldMin,oldMax,newMin,newMax),min(newMax,newMin),max(newMin,newMax));}vec3 getNormal(vec3 nml){return normalize(nml);}void main(){vec3 color=vec3(0);float alpha=1.0;float dist=length(vMPos)+rand(vMPos.xy*1.0)*1.01;vec3 nearAmbientColor=vec3(0.04,0.05,0.09);vec3 farAmbientColor=vec3(0.032,0.032,0.049);vec3 ambientColor=mix(nearAmbientColor,farAmbientColor,crange(dist,0.0,150.0,0.0,1.0));color+=ambientColor;vec3 normal=getNormal(vNormal);vec3 normal2=getNormal(vNormal2);float normalLighting=max(0.0,dot(normal,normalize(vec3(-1.0,1.0,-2.0))));float normalLightingStrength=crange(dist,10.0,100.0,0.7,0.0);normalLightingStrength*=normalLighting;vec3 normalLightingColor=vec3(0.108,0.103,0.172);color+=normalLightingColor*normalLightingStrength;vec3 distFogParams=vec3(-20.0,200.0,0.2);vec3 distFogColor=vec3(0.162,0.177,0.257);float distFog=crange(dist,distFogParams.x,distFogParams.y,0.0,1.0);distFog*=distFogParams.z;vec3 heightFogParams=vec3(crange(dist,0.0,300.0,1.0,40.0),crange(dist,0.0,300.0,-10.0,10.0),0.8);vec3 heightFogColor=vec3(0.162,0.177,0.257);float heightFog=crange(vPos.y+rand(vec2(vPos.x+vPos.y,vPos.z)*1.0)*1.0,heightFogParams.x,heightFogParams.y,0.0,1.0);heightFog*=heightFogParams.z;color+=distFogColor*distFog;color+=heightFogColor*heightFog;vec3 centralLightPosition=vec3(0.0,0.5,0.0);float centralLightDist=length(centralLightPosition-vPos);vec3 centralLightColor=vec3(0.104,0.114,0.351);vec3 centralLightParams=vec3(10.0,0.0,0.4);float centralLightStrength=pow(crange(centralLightDist,centralLightParams.x,centralLightParams.y,0.0,1.0),2.0);centralLightStrength*=centralLightParams.z;vec3 centralLightDir=normalize(centralLightPosition-vPos);centralLightStrength*=crange(dot(normal2,centralLightDir),-0.0,1.0,0.0,1.0);color+=centralLightColor*centralLightStrength;float dotNormal=dot(normal,normalize(-vMVPos));float thickness=0.1;color+=vec3(0.96,0.81,0.7)*0.08*smoothstep(thickness,0.0,dotNormal)*smoothstep(-thickness,0.0,dotNormal);vec2 uvFissures=vMPos.xz*0.4;float fissuresMask=texture2D(tNoise,uvFissures).g;fissuresMask=pow(fissuresMask,4.0)*2.0;float fissuesFalloff=smoothstep(10.0,5.0,length(vMPos.xz-vec2(4.0,-5.0)));vec3 fissuresColor=vec3(0.45,0.2,1.0);color+=fissuresColor*fissuresMask*fissuesFalloff*0.2;vec3 emission=texture2D(tEmissiveMap,vUv).rgb;color+=emission*3.0;vec2 uvClouds=vMPos.xz*0.02+uTime*0.02;uvClouds+=rand(vUv*3.0)*0.01;float cloudsMask=texture2D(tClouds,uvClouds).g;float cloudStrength=crange(dist,0.0,80.0,1.0,0.0);color-=cloudsMask*cloudStrength*0.06;color*=mix(1.0,0.6,uPlanets);gl_FragColor.rgb=color;gl_FragColor.a=alpha;}`,nu=w(ou,"fragmentShader"),au=`precision highp int;precision highp float;
#define GLSLIFY 1
#define attribute in
#define varying out
#define texture2D texture
#define texture2DProj textureProj
attribute vec2 uv;attribute vec3 position;attribute vec3 normal;uniform mat3 normalMatrix;uniform mat4 modelMatrix;uniform mat4 viewMatrix;uniform mat4 modelViewMatrix;uniform mat4 projectionMatrix;varying vec2 vUv;varying vec3 vNormal;varying vec3 vNormal2;varying vec3 vPos;varying vec3 vMPos;varying vec3 vMVPos;void main(){vUv=uv;vNormal=normalize(normalMatrix*normal);vNormal2=normalize(normal);vec4 pos=vec4(position,1);vPos=pos.xyz;vMPos=(modelMatrix*pos).xyz;vec4 mvPos=modelViewMatrix*pos;vMVPos=mvPos.xyz/mvPos.w;gl_Position=projectionMatrix*modelViewMatrix*pos;}`,ru=w(au,"vertexShader"),su=`precision highp int;precision highp float;
#define GLSLIFY 1
#define varying in
#define texture2D texture
#define texture2DProj textureProj
#define gl_FragColor FragColor
out vec4 FragColor;uniform float uPlanets;uniform sampler2D tEmissiveMap;varying vec2 vUv;void main(){vec3 color=vec3(0);float alpha=1.0;vec3 emission=texture2D(tEmissiveMap,vUv).rgb;color+=emission*10.0;color*=mix(1.0,0.6,uPlanets);gl_FragColor.rgb=color;gl_FragColor.a=alpha;}`,lu=w(su,"fragmentShader"),cu=`precision highp int;precision highp float;
#define GLSLIFY 1
#define attribute in
#define varying out
#define texture2D texture
#define texture2DProj textureProj
attribute vec2 uv;attribute vec3 position;attribute vec3 normal;uniform mat3 normalMatrix;uniform mat4 modelMatrix;uniform mat4 viewMatrix;uniform mat4 modelViewMatrix;uniform mat4 projectionMatrix;varying vec2 vUv;void main(){vUv=uv;vec4 pos=vec4(position,1);vec4 mvPos=modelViewMatrix*pos;gl_Position=projectionMatrix*modelViewMatrix*pos;}`,uu=w(cu,"vertexShader");class mu{constructor({view:t,config:e,debugContainer:i,gltf:o}){const n=ve();W(this);const r={value:M.get("demoNoise")},s={value:M.get("demoClouds")};s.value.wrapS=s.value.wrapT=Z,r.value.wrapS=r.value.wrapT=Z;const{uTime:c,uResolution:m,uDpr:f}=z.uniforms,v={value:0};F(()=>n.home.planets,S=>{v.value=S});const h=o.scene.getObjectByName("RUINS");this._group=h;const g={value:h.material.map},b={value:h.material.emissiveMap},x={value:h.material.normalMap},p={value:new I().copy(h.material.normalScale)},y=new $({glslVersion:It,uniforms:{uResolution:m,uTime:c,uDpr:f,uPlanets:v,tNoise:r,tClouds:s,tMap:g,tEmissiveMap:b,tNormalMap:x,uNormalStrength:p}});ru.use(y),nu.use(y);const _=new $({glslVersion:It,uniforms:{uResolution:m,uTime:c,uDpr:f,uPlanets:v,tNoise:r,tClouds:s,tMap:g,tEmissiveMap:b,tNormalMap:x,uNormalStrength:p}});uu.use(_),lu.use(_),h.material=y,h.userData.renderBloom=!0,h.userData.bloomMaterial=_,this._createDebug(i)}update({time:t,delta:e}){this._group.visible=this._group.scale.y>.02}_createDebug(t){if(!T)return;const e=T.addFolder({title:"Ruins",parent:t});return e.addInput(this._group,"visible",{label:"Visible"}),e}}const du=`precision highp float;
#define GLSLIFY 1
#define PI 3.141592653589793
uniform vec2 uResolution;uniform float uDpr;uniform float uPlanets;uniform float uMenu;uniform sampler2D tSky;uniform sampler2D tNoise;varying vec2 vUv;varying vec3 vNormal;varying vec2 vScreen;highp float rand(const in vec2 uv){const highp float a=12.9898,b=78.233,c=43758.5453;highp float dt=dot(uv.xy,vec2(a,b)),sn=mod(dt,PI);return fract(sin(sn)*c);}void main(){vec3 color=vec3(0);float alpha=1.0;vec2 uvSky=vUv;vec2 o=vec2(0.5,0.15);uvSky-=o;uvSky.x*=3.0;uvSky.x+=0.1;uvSky.y*=4.4;uvSky.y-=0.05;uvSky+=o;uvSky.y=max(uvSky.y,1.0);uvSky=fract(uvSky);uvSky.y=(1.-uvSky.y);uvSky+=rand(vUv*5.0)*vec2(2.0,1.0)*0.005;vec4 sky=texture2D(tSky,uvSky);sky.rgb=pow(sky.rgb,vec3(2.0))*1.3;vec3 colorT=vec3(0.07,0.01,0.12);sky.rgb+=colorT;color=sky.rgb;gl_FragColor.rgb=color;gl_FragColor.a=alpha;}`,vu=w(du,"fragmentShader"),fu=`#define GLSLIFY 1
attribute vec2 uv;attribute vec3 position;attribute vec3 normal;uniform mat3 normalMatrix;uniform mat4 modelMatrix;uniform mat4 viewMatrix;uniform mat4 modelViewMatrix;uniform mat4 projectionMatrix;varying vec2 vUv;varying vec3 vNormal;varying vec2 vScreen;void main(){vUv=uv;vNormal=normalize(normalMatrix*normal);vec4 pos=vec4(position,1);gl_Position=projectionMatrix*modelViewMatrix*pos;vScreen=gl_Position.xy/gl_Position.w*0.5+0.5;}`,hu=w(fu,"vertexShader"),gu=`precision highp float;
#define GLSLIFY 1
#define PI 3.141592653589793
uniform float uTime;uniform vec2 uResolution;uniform float uDpr;uniform float uPlanets;uniform sampler2D tGradient;uniform sampler2D tGalaxy;uniform sampler2D tStars;uniform sampler2D tNoise;varying vec2 vUv;varying vec3 vNormal;varying vec2 vScreen;float remap(float value,float start1,float stop1,float start2,float stop2){return start2+(stop2-start2)*((value-start1)/(stop1-start1));}float hash12(vec2 p){vec3 p3=fract(vec3(p.xyx)*0.1031);p3+=dot(p3,p3.yzx+33.33);return fract((p3.x+p3.y)*p3.z);}float blendScreen(float base,float blend){return 1.0-((1.0-base)*(1.0-blend));}vec3 blendScreen(vec3 base,vec3 blend){return vec3(blendScreen(base.r,blend.r),blendScreen(base.g,blend.g),blendScreen(base.b,blend.b));}vec3 blendScreen(vec3 base,vec3 blend,float opacity){return(blendScreen(base,blend)*opacity+base*(1.0-opacity));}highp float rand(const in vec2 uv){const highp float a=12.9898,b=78.233,c=43758.5453;highp float dt=dot(uv.xy,vec2(a,b)),sn=mod(dt,PI);return fract(sin(sn)*c);}void main(){vec2 gradientUv=vUv;gradientUv.y=remap(gradientUv.y,0.22,0.48,0.,1.);gradientUv+=(hash12(vUv*1000.)-0.5)*0.05;vec3 gradient=texture2D(tGradient,gradientUv).rgb;gradient*=step(1.-gradientUv.y,0.9);vec3 luma=vec3(0.299,0.587,0.114);float v=dot(gradient.xyz,luma);vec2 starsUv=vUv;starsUv.x=fract(starsUv.x+0.08);starsUv*=6.;float stars=texture2D(tStars,starsUv).g;stars=pow(stars,2.)*20.;vec2 galaxyUv=vUv;galaxyUv.y=remap(galaxyUv.y,0.25,0.48,0.,1.);galaxyUv.x=fract(galaxyUv.x+0.5);galaxyUv.x=remap(galaxyUv.x,0.26,0.51,0.,1.);vec3 galaxy=texture2D(tGalaxy,galaxyUv).rgb;galaxy*=step(1.-galaxyUv.y,0.9);galaxy*=0.3;galaxy+=stars;galaxy*=remap(v,0.,0.4,1.,0.);vec3 color=vec3(blendScreen(gradient,galaxy));gl_FragColor.rgb=color;gl_FragColor.a=1.;}`,pu=w(gu,"fragmentShader"),_u=`#define GLSLIFY 1
attribute vec2 uv;attribute vec3 position;attribute vec3 normal;uniform mat3 normalMatrix;uniform mat4 modelMatrix;uniform mat4 viewMatrix;uniform mat4 modelViewMatrix;uniform mat4 projectionMatrix;varying vec2 vUv;varying vec3 vNormal;varying vec2 vScreen;void main(){vUv=uv;vNormal=normalize(normalMatrix*normal);vec4 pos=vec4(position,1);gl_Position=projectionMatrix*modelViewMatrix*pos;vScreen=gl_Position.xy/gl_Position.w*0.5+0.5;}`,xu=w(_u,"vertexShader"),bu=`#define GLSLIFY 1
uniform sampler2D tNoise;uniform sampler2D tMap;uniform float uMenu;uniform float uTime;uniform float uProg;uniform float uDomeDistortion;varying vec2 vUv;varying vec3 vNormal;float circularIn(float t){return 1.0-sqrt(max(1.0-t*t,0.));}float exponentialInOut(float t){return t==0.0||t==1.0? t: t<0.5?+0.5*pow(2.0,(20.0*t)-10.0):-0.5*pow(2.0,10.0-(t*20.0))+1.0;}float textureNoise3D(sampler2D noiseTexture,vec2 uv,float time){vec2 uvNoise=uv+time*0.007;vec2 uvNoise2=uv-time*0.007;vec3 noise=texture2D(noiseTexture,uvNoise).rgb;vec3 noise2=texture2D(noiseTexture,uvNoise2).rgb;vec3 colorDot=vec3(sin(vec3(time,time+1.047,time+2.094)));float colorAvg=(abs(colorDot.r)+abs(colorDot.g)+abs(colorDot.b))/3.;colorDot/=colorAvg;noise=(noise+noise2)/2.;return dot(normalize(noise-0.5),colorDot);}float cremap(float value,float start1,float stop1,float start2,float stop2){float r=start2+(stop2-start2)*((value-start1)/(stop1-start1));return clamp(r,min(start2,stop2),max(start2,stop2));}
#define ITERATIONS 5
const vec2 COORDS[ITERATIONS]=vec2[ITERATIONS](vec2(0.65,0.25),vec2(0.1,0.6),vec2(0.3,0.2),vec2(0.9,0.6),vec2(0.5,0.8));const float OFFSET[ITERATIONS]=float[ITERATIONS](0.1,0.5,0.9,0.2,0.8);const float SPEED[ITERATIONS]=float[ITERATIONS](1.2648,0.9163,0.8654,1.0646,0.9835);float hash12(vec2 p){vec3 p3=fract(vec3(p.xyx)*0.1031);p3+=dot(p3,p3.yzx+33.33);return fract((p3.x+p3.y)*p3.z);}void main(){vec2 uv=vUv;float dt=dot(vNormal,vec3(0.,-1.,0.));float f2=smoothstep(0.35,0.15,dt);float s=(hash12(gl_FragCoord.xy)-0.5)*0.4*(1.-f2);vec2 centeredUv=(uv-0.5)*2.;float uvDist=length(centeredUv);uvDist=mix(uvDist,circularIn(uvDist),uDomeDistortion);float uvAngle=atan(centeredUv.y,centeredUv.x);vec2 uvFlat=(vec2(cos(uvAngle)*uvDist,sin(uvAngle)*uvDist)+1.)/2.;float voronoiTexel=texture2D(tMap,uvFlat*3.-uTime*(0.04+0.052*uMenu)).r;float voronoi=voronoiTexel+s;vec3 noise=texture2D(tNoise,uvFlat*1.).rgb;vec2 flashUv=uvFlat+(noise.rg-0.5)*0.3;float a=0.;
#ifdef DEBUG_SPOTS
float b=0.;
#endif
for(int i=0;i<ITERATIONS;i++){vec2 flashCoord=mix(vec2(0.5),COORDS[i],0.7);float offset=OFFSET[i];float speed=SPEED[i];float t=uTime*speed*5.+offset;float y=(sin(t)+sin(2.2*t+5.52)+sin(2.9*t+0.93)+sin(4.6*t+8.94))/4.;float p=t*0.3+offset*16.8764;float h=smoothstep(-0.5,1.,(sin(p)+sin(2.2*p+5.52)+sin(2.9*p+0.93)+sin(4.6*p+8.94))/4.);float l=length(flashUv-flashCoord);float d=pow(smoothstep(0.5,0.,l),8.)*0.4;d+=pow(1.-l,0.6)*0.08;d*=(y+1.)/2.;d*=pow(h,1.5)*1.5;a+=d;
#ifdef DEBUG_SPOTS
b+=step(l,0.1);
#endif
}float e=a*voronoi+0.008*voronoi;vec3 color1=vec3(0.78,1.0,1.0);vec3 color2=vec3(1.0,0.0,0.0);float f=smoothstep(0.15,0.4,dt);vec3 c=mix(color1,color2,pow(e,0.65));float alpha=pow(e,2.)*3.5*f*uProg;alpha=alpha+pow(alpha,2.)*3.;float d2=smoothstep(0.37,0.29,dt);float fa=mix(alpha,smoothstep(0.1,0.2,voronoi)*smoothstep(0.5,0.49,length(uv-0.5)),d2);c*=alpha;alpha=max((voronoi-pow(f2,20.))*1.,alpha*3.);alpha*=mix(1.,0.5-smoothstep(0.2,0.45,dt)*0.5,uMenu);alpha=max(alpha,0.5*(1.-uMenu));alpha*=uProg;gl_FragColor=vec4(c,alpha);
#ifdef DEBUG_SPOTS
gl_FragColor=vec4(vec3(b),1.);
#endif
}`,yu=w(bu,"fragmentShader"),Su=`#define GLSLIFY 1
varying vec2 vUv;varying vec3 vNormal;void main(){vUv=uv;vNormal=normal;gl_Position=projectionMatrix*modelViewMatrix*vec4(position,1.0);}`,Cu=w(Su,"vertexShader"),Tu=`precision highp float;
#define GLSLIFY 1
#define PI 3.141592653589793
uniform float uMenu;uniform float uTime;uniform vec2 uResolution;uniform float uDpr;uniform float uPlanets;uniform sampler2D tMap;uniform sampler2D tNoise;varying vec2 vUv;varying vec3 vNormal;varying vec2 vScreen;highp float rand(const in vec2 uv){const highp float a=12.9898,b=78.233,c=43758.5453;highp float dt=dot(uv.xy,vec2(a,b)),sn=mod(dt,PI);return fract(sin(sn)*c);}void main(){vec3 color=vec3(0);float alpha=1.0;vec2 uvMap=vUv;uvMap.x=fract(uvMap.x+0.32);float seamMask=smoothstep(0.5,0.495,abs(uvMap.x-0.5));vec2 o=vec2(0.5,0.5);uvMap-=o;uvMap.x*=3.5;uvMap.x+=0.0;uvMap.y*=6.0;uvMap.y+=0.2;uvMap+=o;uvMap.y=max(uvMap.y,0.0);uvMap.x+=uTime*0.01;uvMap.x+=uTime*0.036*uMenu;uvMap+=rand(vUv*5.0)*vec2(2.0,1.0)*0.005;vec4 tex=texture2D(tMap,uvMap);tex.rgb*=tex.a;color+=tex.rgb;color*=0.3;gl_FragColor.rgb=color*seamMask;gl_FragColor.a=alpha;}`,wu=w(Tu,"fragmentShader"),Eu=`#define GLSLIFY 1
attribute vec2 uv;attribute vec3 position;attribute vec3 normal;uniform mat3 normalMatrix;uniform mat4 modelMatrix;uniform mat4 viewMatrix;uniform mat4 modelViewMatrix;uniform mat4 projectionMatrix;varying vec2 vUv;varying vec3 vNormal;varying vec2 vScreen;void main(){vUv=uv;vNormal=normalize(normalMatrix*normal);vec4 pos=vec4(position,1);gl_Position=projectionMatrix*modelViewMatrix*pos;vScreen=gl_Position.xy/gl_Position.w*0.5+0.5;}`,Mu=w(Eu,"vertexShader");class Nu{constructor({view:t,config:e,debugContainer:i,gltf:o}){const n=ve();W(this),this._view=t;const r={value:M.get("demoNoise")};r.value.wrapS=r.value.wrapT=Z;const{uTime:s,uResolution:c,uDpr:m}=z.uniforms,f={value:0};this._stormTransition=o.scene.getObjectByName("TRANSITION_STORM");const v=o.scene.getObjectByName("STORMY_SKY");this._stormySky=v;const h=o.scene.getObjectByName("SKY");this._sky=h;const g=o.scene.getObjectByName("STARS");this._stars=g;const b=o.scene.getObjectByName("CLOUDS");this._clouds=b,F(()=>n.home.planets,x=>{f.value=x}),F(()=>n.home.planets>1e-5,x=>{this._stars.visible=x,this._sky.visible=!x},{immediate:!0});{const x={value:M.get("sky")};x.value.colorSpace=ke,x.value.magFilter=x.value.minFilter=ie,h.material=new $({uniforms:{uResolution:c,uTime:s,uMenu:t._composer.passes.final.uniforms.uMenu,uDpr:m,tSky:x,uPlanets:f}}),hu.use(h.material),vu.use(h.material),h.renderOrder=e.renderOrders.sky}{const x={value:g.material.map},p={value:g.material.emissiveMap},y={value:g.material.normalMap};x.value.colorSpace=ke,p.value.colorSpace=ke,y.value.colorSpace=ke,g.material=new $({uniforms:{uResolution:c,uTime:s,uDpr:m,tGradient:x,tGalaxy:p,tStars:y,uPlanets:f}}),xu.use(g.material),pu.use(g.material),g.renderOrder=e.renderOrders.sky}{const x={value:b.material.map};x.value.colorSpace=ke,b.material=new $({uniforms:{uResolution:c,uTime:s,uDpr:m,tMap:x,uPlanets:f,uMenu:t._composer.passes.final.uniforms.uMenu},transparent:!0,blending:$o,depthWrite:!1}),Mu.use(b.material),wu.use(b.material),b.renderOrder=e.renderOrders.clouds}{const x=M.get("voronoi-clouds");x.wrapS=x.wrapT=Z;const p=M.get("noise");p.wrapS=p.wrapT=Z;const y={value:x},_={value:p};v.material=new Y({uniforms:{uTime:s,tMap:y,tNoise:_,uProg:{value:0},uDomeDistortion:{value:.8},uMenu:t._composer.passes.final.uniforms.uMenu},transparent:!0,blending:jo,depthWrite:!1}),yu.use(v.material),Cu.use(v.material),v.renderOrder=e.renderOrders.stormySky,v.userData.renderBloom=!0}this._createDebug(i)}update(){const t=-this._stormTransition.position.z,e=this._view._composer.passes.final.uniforms.uMenu.value;this._stormySky.material.uniforms.uProg.value=Math.max(t,e),this._stormySky.visible=t>.01||e>.01}_createDebug(t){if(!T)return;const e=T.addFolder({title:"Sky",parent:t});return e.addInput(this._sky,"visible",{label:"Visible"}),e.addInput(this._clouds,"visible",{label:"Clouds"}),ft(e,this._clouds.material,{label:"Clouds Blending"}),e.addInput(this._stormySky,"visible",{label:"Stormy Sky"}),ft(e,this._stormySky.material,{label:"Storm Blending"}),e.addInput(this._stormySky.material.uniforms.uDomeDistortion,"value",{label:"Dome Distortion",step:.01,min:-1,max:2}),e}}class bn{constructor(t,e){this.object=t,this.prop=e}get value(){return`#${this.object[this.prop].getHexString()}`}set value(t){this.object[this.prop].set(t)}}const Du=`precision highp int;precision highp float;
#define GLSLIFY 1
#define varying in
#define texture2D texture
#define texture2DProj textureProj
#define gl_FragColor FragColor
out vec4 FragColor;
#define PI 3.141592653589793
uniform float uTime;uniform float uMusicTime;uniform vec2 uResolution;uniform float uDpr;uniform float uPlanets;uniform float uShowPaint;uniform float uFluidStrength;uniform float uLetterBox;uniform sampler2D tPaint;uniform sampler2D tNoise;uniform sampler2D tClouds;uniform sampler2D tMap;uniform sampler2D tEmissiveMap;uniform sampler2D tNormalMap;uniform vec2 uNormalStrength;uniform vec3 uRingsColor;varying vec2 vUv;varying vec3 vNormal;varying vec3 vNormal2;varying vec3 vPos;varying vec3 vMPos;varying vec3 vMVPos;varying vec3 vWPos;float exponentialOut(float t){return t==1.0 ? t : 1.0-pow(2.0,-10.0*t);}float wideRing(float time,float ringDist){float ft=fract(time*0.3593786227683747);float p=exponentialOut(ft);float a=step(-0.05+p,ringDist)-step(0.+p,ringDist);return a*smoothstep(1.,0.6,ft);}float wideRings(float time,float ringDist){float t=wideRing(time-0.69,(ringDist*0.5));return max(t,wideRing(time,(ringDist*0.5)));}highp float rand(const in vec2 uv){const highp float a=12.9898,b=78.233,c=43758.5453;highp float dt=dot(uv.xy,vec2(a,b)),sn=mod(dt,PI);return fract(sin(sn)*c);}float range(float oldValue,float oldMin,float oldMax,float newMin,float newMax){return(((oldValue-oldMin)*(newMax-newMin))/(oldMax-oldMin))+newMin;}float crange(float oldValue,float oldMin,float oldMax,float newMin,float newMax){return clamp(range(oldValue,oldMin,oldMax,newMin,newMax),min(newMax,newMin),max(newMin,newMax));}vec3 getNormal(vec3 nml){vec3 normal=normalize(nml);vec3 pos_dx=dFdx(vMVPos.xyz);vec3 pos_dy=dFdy(vMVPos.xyz);vec2 tex_dx=dFdx(vUv);vec2 tex_dy=dFdy(vUv);vec3 t=normalize(pos_dx*tex_dy.t-pos_dy*tex_dx.t);vec3 b=normalize(-pos_dx*tex_dy.s+pos_dy*tex_dx.s);mat3 tbn=mat3(t,b,normal);vec3 n=texture2D(tNormalMap,vUv).rgb*2.0-1.0;return normalize(tbn*n);}void main(){vec3 color=vec3(0);float alpha=1.0;float dist=length(vMPos)+rand(vMPos.xy*1.0)*1.01;vec3 nearAmbientColor=vec3(0.04,0.05,0.09);vec3 farAmbientColor=vec3(0.032,0.032,0.049);vec3 ambientColor=mix(nearAmbientColor,farAmbientColor,crange(dist,0.0,150.0,0.0,1.0));color+=ambientColor;
#ifdef USE_NORMAL_MAP
vec3 normal=getNormal(vNormal);vec3 normal2=getNormal(vNormal2);
#else
vec3 normal=normalize(vNormal);vec3 normal2=normalize(vNormal2);
#endif
float normalLighting=max(0.0,dot(normal,normalize(vec3(-1.0,1.0,-2.0))));float normalLightingStrength=crange(dist,10.0,100.0,0.7,0.0);normalLightingStrength*=normalLighting;vec3 normalLightingColor=vec3(0.108,0.103,0.172);color+=normalLightingColor*normalLightingStrength*smoothstep(1.,3.,length(vWPos));vec3 distFogParams=vec3(-20.0,400.0,0.2);vec3 baseFogColor=vec3(0.32,0.22,0.14);vec3 planetsFogColor=vec3(1.0,0.55,0.2);vec3 distFogColor=mix(baseFogColor,planetsFogColor,uPlanets);float distFog=crange(pow(dist,1.3),distFogParams.x,distFogParams.y,0.0,1.0);distFog*=distFogParams.z;vec3 heightFogParams=vec3(crange(dist,0.0,300.0,1.0,40.0),crange(dist,0.0,300.0,-10.0,10.0),0.15);vec3 heightFogColor=vec3(0.25,0.08,0.2);float heightFog=crange(vPos.y+rand(vec2(vPos.x+vPos.y,vPos.z)*1.0)*1.0,heightFogParams.x,heightFogParams.y,0.0,1.0);heightFog*=heightFogParams.z;color+=distFogColor*distFog;color+=heightFogColor*heightFog;vec3 centralLightPosition=vec3(0.0,0.5,0.0);float centralLightDist=length(centralLightPosition-vPos);vec3 centralLightColor=vec3(0.104,0.114,0.351);vec3 centralLightParams=vec3(10.0,0.0,0.4);float centralLightStrength=pow(crange(centralLightDist,centralLightParams.x,centralLightParams.y,0.0,1.0),2.0);centralLightStrength*=centralLightParams.z;vec3 centralLightDir=normalize(centralLightPosition-vPos);centralLightStrength*=crange(dot(normal2,centralLightDir),-0.0,1.0,0.0,1.0);color+=centralLightColor*centralLightStrength;float dotNormal=dot(normal,normalize(-vMVPos));float thickness=0.1;color+=vec3(0.96,0.81,0.7)*0.08*smoothstep(thickness,0.0,dotNormal)*smoothstep(-thickness,0.0,dotNormal)*smoothstep(4.,10.,vWPos.y)*smoothstep(90.,70.,length(vWPos.xz));vec3 ringsPosition=vec3(0.0,0.8,0.0);float ringDist=length(vMPos.xz-ringsPosition.xz)*1.0;float ringsFalloff=smoothstep(1.0,0.5,ringDist);float rings=sin(ringDist*400.0-uTime*3.0)-0.92;rings=clamp(rings/fwidth(rings)+0.5,0.0,1.0);rings*=ringsFalloff;rings=max(wideRings(uMusicTime,ringDist)*smoothstep(2.0,1.5,ringDist),rings);rings*=rand(floor(vMPos.xz*300.0));rings*=1.0-0.8*rand(vMPos.xz*0.5);rings+=ringsFalloff*0.2;rings*=1.0-0.5*rand(vMPos.xz*1.0);vec3 ringsDir=normalize(ringsPosition-vMPos);float dotRings=smoothstep(0.2,1.0,max(0.0,dot(normal2,ringsDir)));vec3 ringsColor=uRingsColor*2.0;rings*=dotRings;rings*=(1.-uLetterBox*uFluidStrength);rings*=(1.-step(0.01,uPlanets));color+=ringsColor*rings;vec2 uvFissures=vMPos.xz*0.4;float fissuresMask=texture2D(tNoise,uvFissures).g;fissuresMask=pow(fissuresMask,4.0)*2.0;float fissuesFalloff=smoothstep(10.0,5.0,length(vMPos.xz-vec2(4.0,-5.0)));vec3 fissuresColor=vec3(0.45,0.2,1.0);color+=fissuresColor*fissuresMask*fissuesFalloff*0.2;vec3 emission=texture2D(tEmissiveMap,vUv).rgb;color+=emission*3.0;vec2 uvPaint=vUv*4.0;vec2 uvPaintNoise=vUv*4.0+uTime*0.004;float paintNoise=smoothstep(0.0,0.5,sin(texture2D(tNoise,uvPaintNoise).g*14.0));vec3 paint=texture2D(tPaint,uvPaint).rgb;float fluidStrength=smoothstep(0.0,1.2,uLetterBox*uFluidStrength);float fluidFalloff=smoothstep(100.0,50.0,length(vMPos.xz-vec2(0)));color+=paint*fluidStrength*fluidFalloff*paintNoise*0.5*uShowPaint;vec2 uvClouds=vMPos.xz*0.02+uTime*0.02;uvClouds+=rand(vUv*3.0)*0.01;float cloudsMask=texture2D(tClouds,uvClouds).g;float cloudStrength=crange(dist,0.0,80.0,1.0,0.0);color-=cloudsMask*cloudStrength*0.06;color*=mix(1.0,0.7,uPlanets);gl_FragColor.rgb=color;gl_FragColor.a=alpha;}`,Co=w(Du,"fragmentShader"),Ru=`precision highp int;precision highp float;
#define GLSLIFY 1
#define attribute in
#define varying out
#define texture2D texture
#define texture2DProj textureProj
attribute vec2 uv;attribute vec3 position;attribute vec3 normal;uniform mat3 normalMatrix;uniform mat4 modelMatrix;uniform mat4 viewMatrix;uniform mat4 modelViewMatrix;uniform mat4 projectionMatrix;varying vec2 vUv;varying vec3 vNormal;varying vec3 vNormal2;varying vec3 vPos;varying vec3 vWPos;varying vec3 vMPos;varying vec3 vMVPos;void main(){vUv=uv;vNormal=normalize(normalMatrix*normal);vNormal2=normalize(normal);vec4 pos=vec4(position,1);vPos=pos.xyz;vMPos=(modelMatrix*pos).xyz;vec4 mvPos=modelViewMatrix*pos;vMVPos=mvPos.xyz/mvPos.w;vWPos=(modelMatrix*pos).xyz;gl_Position=projectionMatrix*modelViewMatrix*pos;}`,To=w(Ru,"vertexShader"),Ou=`precision highp int;precision highp float;
#define GLSLIFY 1
#define varying in
#define texture2D texture
#define texture2DProj textureProj
#define gl_FragColor FragColor
out vec4 FragColor;
#define PI 3.141592653589793
uniform float uTime;uniform float uMusicTime;uniform float uPlanets;uniform float uLetterBox;uniform sampler2D tNoise;uniform sampler2D tEmissiveMap;uniform sampler2D tNormalMap;uniform vec3 uRingsColor;varying vec2 vUv;varying vec3 vNormal;varying vec3 vNormal2;varying vec3 vMPos;varying vec3 vMVPos;float exponentialOut(float t){return t==1.0 ? t : 1.0-pow(2.0,-10.0*t);}float wideRing(float time,float ringDist){float ft=fract(time*0.3593786227683747);float p=exponentialOut(ft);float a=step(-0.05+p,ringDist)-step(0.+p,ringDist);return a*smoothstep(1.,0.6,ft);}float wideRings(float time,float ringDist){float t=wideRing(time-0.69,(ringDist*0.5));return max(t,wideRing(time,(ringDist*0.5)));}highp float rand(const in vec2 uv){const highp float a=12.9898,b=78.233,c=43758.5453;highp float dt=dot(uv.xy,vec2(a,b)),sn=mod(dt,PI);return fract(sin(sn)*c);}vec3 getNormal(vec3 nml){vec3 normal=normalize(nml);vec3 pos_dx=dFdx(vMVPos.xyz);vec3 pos_dy=dFdy(vMVPos.xyz);vec2 tex_dx=dFdx(vUv);vec2 tex_dy=dFdy(vUv);vec3 t=normalize(pos_dx*tex_dy.t-pos_dy*tex_dx.t);vec3 b=normalize(-pos_dx*tex_dy.s+pos_dy*tex_dx.s);mat3 tbn=mat3(t,b,normal);vec3 n=texture2D(tNormalMap,vUv).rgb*2.0-1.0;return normalize(tbn*n);}void main(){vec3 color=vec3(0);float alpha=1.0;
#ifdef USE_NORMAL_MAP
vec3 normal=getNormal(vNormal);vec3 normal2=getNormal(vNormal2);
#else
vec3 normal=normalize(vNormal);vec3 normal2=normalize(vNormal2);
#endif
vec3 ringsPosition=vec3(0.0,0.8,0.0);float ringDist=length(vMPos.xz-ringsPosition.xz)*1.0;float ringsFalloff=smoothstep(1.0,0.5,ringDist);float rings=sin(ringDist*400.0-uTime*3.0)-0.92;rings=clamp(rings/fwidth(rings)+0.5,0.0,1.0);rings*=ringsFalloff;rings=max(wideRings(uMusicTime,ringDist)*smoothstep(2.0,1.5,ringDist),rings);rings*=rand(floor(vMPos.xz*300.0));rings*=1.0-0.8*rand(vMPos.xz*0.5);rings+=ringsFalloff*0.2;rings*=1.0-0.5*rand(vMPos.xz*1.0);vec3 ringsDir=normalize(ringsPosition-vMPos);float dotRings=smoothstep(0.2,1.0,max(0.0,dot(normal2,ringsDir)));vec3 ringsColor=uRingsColor*2.0;rings*=dotRings;rings*=(1.-uLetterBox);rings*=(1.-step(0.01,uPlanets));color+=ringsColor*rings*0.3;vec2 uvFissures=vMPos.xz*0.4;float fissuresMask=texture2D(tNoise,uvFissures).g;fissuresMask=pow(fissuresMask,4.0)*2.0;float fissuesFalloff=smoothstep(10.0,5.0,length(vMPos.xz-vec2(4.0,-5.0)));vec3 fissuresColor=vec3(0.45,0.2,1.0);color+=fissuresColor*fissuresMask*fissuesFalloff*0.1;vec3 emission=texture2D(tEmissiveMap,vUv).rgb;color+=emission*10.0;color*=mix(1.0,0.7,uPlanets);gl_FragColor.rgb=color;gl_FragColor.a=alpha;}`,Pu=w(Ou,"fragmentShader"),Iu=`precision highp int;precision highp float;
#define GLSLIFY 1
#define attribute in
#define varying out
#define texture2D texture
#define texture2DProj textureProj
attribute vec2 uv;attribute vec3 position;attribute vec3 normal;uniform mat3 normalMatrix;uniform mat4 modelMatrix;uniform mat4 viewMatrix;uniform mat4 modelViewMatrix;uniform mat4 projectionMatrix;varying vec2 vUv;varying vec3 vNormal;varying vec3 vNormal2;varying vec3 vMPos;varying vec3 vMVPos;void main(){vUv=uv;vNormal=normalize(normalMatrix*normal);vNormal2=normalize(normal);vec4 pos=vec4(position,1);vMPos=(modelMatrix*pos).xyz;vec4 mvPos=modelViewMatrix*pos;vMVPos=mvPos.xyz/mvPos.w;gl_Position=projectionMatrix*modelViewMatrix*pos;}`,Lu=w(Iu,"vertexShader");class Fu{constructor({view:t,config:e,debugContainer:i,gltf:o}){const n=ve();W(this);const r={value:M.get("demoNoise")},s={value:M.get("demoClouds")},c={value:M.get("paintSwirl")};s.value.wrapS=s.value.wrapT=Z,r.value.wrapS=r.value.wrapT=Z,c.value.wrapS=c.value.wrapT=Z;const{uTime:m,uResolution:f,uDpr:v}=z.uniforms,h={value:0},g={value:0},b={value:1},x={value:new V("#FDADFF")};this.uRingsColor=x,this.uMusicTime=g,F(()=>n.home.planets,_=>{h.value=_}),F(()=>n.home.section!==2,_=>{b.value=_?1:0}),o.scene.getObjectByName("TERRAIN_LOWPOLY").traverse(_=>{if(!_.isMesh)return;const S={value:_.material.map},D={value:_.material.emissiveMap},E={value:_.material.normalMap},R={value:new I().copy(_.material.normalScale)},d=new $({glslVersion:It,uniforms:{uResolution:f,uTime:m,uMusicTime:g,uDpr:v,uPlanets:h,uLetterBox:t._composer._passes.final.uniforms.uLetterBox,uFluidStrength:t._composer._passes.final.uniforms.uFluidStrength,uRingsColor:x,uShowPaint:b,tNoise:r,tClouds:s,tPaint:c,tMap:S,tEmissiveMap:D,tNormalMap:E,uNormalStrength:R},defines:{USE_NORMAL_MAP:!!_.material.normalMap}});To.use(d),Co.use(d),_.material=d,yt.gpu.tier>0&&(_.visible=!1,_.userData.forceRenderReflection=!0)});const y=o.scene.getObjectByName("TERRAIN");y.traverse(_=>{if(!_.isMesh)return;const S={value:_.material.map},D={value:_.material.emissiveMap},E={value:_.material.normalMap},R={value:new I().copy(_.material.normalScale)},d=new $({glslVersion:It,uniforms:{uResolution:f,uTime:m,uMusicTime:g,uDpr:v,uPlanets:h,uLetterBox:t._composer._passes.final.uniforms.uLetterBox,uFluidStrength:t._composer._passes.final.uniforms.uFluidStrength,uShowPaint:b,uRingsColor:x,tNoise:r,tClouds:s,tPaint:c,tMap:S,tEmissiveMap:D,tNormalMap:E,uNormalStrength:R},defines:{USE_NORMAL_MAP:!!_.material.normalMap}});if(To.use(d),Co.use(d),_.material=d,_.userData.renderBloom=_.userData.distance<3?void 0:!1,_.userData.renderReflection=!1,_.userData.distance<2){const N=new $({glslVersion:It,uniforms:{uResolution:f,uTime:m,uMusicTime:g,uDpr:v,uPlanets:h,uLetterBox:t._composer._passes.final.uniforms.uLetterBox,uFluidStrength:t._composer._passes.final.uniforms.uFluidStrength,uShowPaint:b,uRingsColor:x,tNoise:r,tClouds:s,tPaint:c,tMap:S,tEmissiveMap:D,tNormalMap:E,uNormalStrength:R},defines:{USE_NORMAL_MAP:!!_.material.normalMap}});Lu.use(N),Pu.use(N),_.userData.bloomMaterial=N,_.userData.renderBloom=!0,yt.gpu.tier<=0&&(_.visible=!1)}}),this._group=y,this._createDebug(i)}update(){He.currentTheme&&(this.uMusicTime.value=He.currentTheme.seek())}_createDebug(t){if(!T)return;const e=T.addFolder({title:"Terrain",parent:t});return e.addInput(this._group,"visible",{label:"Visible"}),e.addInput(new bn(this.uRingsColor,"value"),"value",{label:"Rings Color"}),e}}const Au=`precision highp float;
#define GLSLIFY 1
uniform float uTime;uniform vec2 uResolution;uniform float uDpr;uniform vec2 uTransition;uniform sampler2D tMatcap;varying vec3 vColor;varying vec2 vUv;varying vec3 vNormal;varying vec4 vPos;varying vec4 vMPos;varying vec4 vMVPos;vec2 matcap(vec3 eye,vec3 normal){vec3 reflected=reflect(eye,normal);float m=2.8284271247461903*sqrt(reflected.z+1.0);return reflected.xy/m+0.5;}void main(){vec3 color=vec3(0);float alpha=1.0;vec3 normal=normalize(vNormal);vec3 mat=texture2D(tMatcap,matcap(normalize(vMVPos.xyz),normal)).rgb;vec3 luma=vec3(0.299,0.587,0.114);float v=dot(mat.xyz,luma)*5.+0.5;v+=smoothstep(0.6,0.5,abs(dot(vNormal,normalize(vec3(0.0,0.5,0.5)))))*0.6;color+=v*vColor;gl_FragColor.rgb=color;gl_FragColor.a=alpha;}`,Uu=w(Au,"fragmentShader"),zu=`#define GLSLIFY 1
attribute vec2 uv;attribute vec3 position;attribute vec3 normal;attribute vec3 color;uniform mat3 normalMatrix;uniform mat4 modelMatrix;uniform mat4 viewMatrix;uniform mat4 modelViewMatrix;uniform mat4 projectionMatrix;uniform float uTime;uniform vec2 uTransition;varying vec3 vColor;varying vec2 vUv;varying vec3 vNormal;varying vec4 vPos;varying vec4 vMPos;varying vec4 vMVPos;vec2 rotate2d(vec2 v,float a){float c=cos(a);float s=sin(a);return mat2(c,-s,s,c)*v;}void main(){vUv=uv;vNormal=normalize(normalMatrix*normal);vPos=vec4(position,1);vColor=color;vPos.xz=rotate2d(vPos.xz,uTransition.x*30.0+uTime*0.21);vPos.yz=rotate2d(vPos.yz,uTransition.x*2.0+uTime*0.12);vMPos=modelMatrix*vPos;vMVPos=viewMatrix*vMPos;gl_Position=projectionMatrix*vMVPos;}`,Gu=w(zu,"vertexShader"),Bu=`precision highp float;
#define GLSLIFY 1
uniform float uTime;uniform vec2 uResolution;uniform float uDpr;uniform vec2 uTransition;uniform float uSceneTransition;uniform sampler2D tNoise;varying vec2 vUv;varying vec3 vNormal;varying vec4 vPos;varying vec4 vMPos;varying vec4 vMVPos;const float FALLOFF_TAIL=-0.2;const float FALLOFF_LEAD=0.01;void main(){vec3 color=vec3(0);vec3 normal=normalize(vNormal);float transition=vUv.x-uTransition.x;float fadeLead=smoothstep(FALLOFF_LEAD,0.0,transition);float fadeTail=smoothstep(FALLOFF_TAIL,0.0,transition);float fade=fadeLead*fadeTail;color+=fade;vec2 uvNoise=vUv*1.0;uvNoise.x*=5.0;uvNoise.y*=0.1;uvNoise.y+=uTime*0.05;uvNoise.x+=uTransition.x*0.0;float noise=texture2D(tNoise,uvNoise).g;noise=1.0-pow(noise,3.0)*10.0;color*=mix(1.0,noise,1.0-fade*0.6);color*=uTransition.y;float tintMix=smoothstep(0.0,-0.06,vUv.x-uTransition.x);vec3 colorGreen=vec3(0.05,0.84,0.0);vec3 colorBlue=vec3(0.0,0.68,1.0);vec3 tokenColor=mix(colorGreen,colorBlue,step(1.,uSceneTransition));vec3 tint=mix(tokenColor*3.,vec3(0.998,0.622,0.090)*3.0,tintMix);color*=max(vec3(1.),tint);color*=0.4;if(color.g<0.01)discard;gl_FragColor.rgb=color;gl_FragColor.a=1.0*(1.-(1.-tintMix)*0.5);}`,ku=w(Bu,"fragmentShader"),Hu=`#define GLSLIFY 1
attribute vec2 uv;attribute vec3 position;attribute vec3 normal;uniform mat3 normalMatrix;uniform mat4 modelMatrix;uniform mat4 viewMatrix;uniform mat4 modelViewMatrix;uniform mat4 projectionMatrix;uniform float uTime;uniform vec2 uTransition;varying vec2 vUv;varying vec3 vNormal;varying vec4 vPos;varying vec4 vMPos;varying vec4 vMVPos;const float FALLOFF_TAIL=-0.2;const float FALLOFF_LEAD=0.01;void main(){vUv=uv;vNormal=normalize(normalMatrix*normal);float transition=vUv.x-uTransition.x;float fadeLead=smoothstep(FALLOFF_LEAD,0.0,transition);float fadeTail=smoothstep(FALLOFF_TAIL,0.0,transition);float fade=fadeTail;vPos=vec4(position,1);vPos.xyz+=normalize(normal)*mix(-0.029,-0.018,fade);vMPos=modelMatrix*vPos;vMVPos=viewMatrix*vMPos;gl_Position=projectionMatrix*vMVPos;}`,Vu=w(Hu,"vertexShader");class Wu{constructor({view:t,config:e,debugContainer:i,gltf:o}){W(this);const n={value:M.get("demoNoise")};n.value.wrapS=n.value.wrapT=Z;const{uTime:r,uResolution:s,uDpr:c}=z.uniforms,m=this.uTransition1={value:new I},f=this.uTransition2={value:new I},v={value:0},h=ve();F(()=>h.home.eggOverlayFade,D=>{v.value=D}),this.group=o.scene.getObjectByName("TOKENS");const g=o.scene.getObjectByName("TOKEN_1"),b=o.scene.getObjectByName("TOKEN_2"),x=o.scene.getObjectByName("TOKEN_1_TRAIL"),p=o.scene.getObjectByName("TOKEN_2_TRAIL");this.transition1=o.scene.getObjectByName("TRANSITION_TOKEN_1"),this.transition2=o.scene.getObjectByName("TRANSITION_TOKEN_2");const y={value:g.material.emissiveMap};this._trail1=x,this._trail2=p;const _=new $({uniforms:{uResolution:s,uTime:r,uDpr:c,tNoise:n,tMatcap:y,uTransition:m}});Gu.use(_),Uu.use(_),g.material=_,b.material=_,g.userData.renderBloom=!1,b.userData.renderBloom=!1,this._tokenMaterial=_,g.onBeforeRender=()=>{_.uniforms.uTransition=m},b.onBeforeRender=()=>{_.uniforms.uTransition=f};const S=new $({uniforms:{uResolution:s,uTime:r,uDpr:c,tNoise:n,uTransition:m,uSceneTransition:v},transparent:!0,blending:Ve,side:dt,depthWrite:!1});Vu.use(S),ku.use(S),x.material=S,p.material=S,x.userData.renderBloom=!0,p.userData.renderBloom=!0,x.renderOrder=1,p.renderOrder=1,this._trailMaterial=S,x.onBeforeRender=()=>{S.uniforms.uTransition=m},p.onBeforeRender=()=>{S.uniforms.uTransition=f},this._createDebug(i)}update({delta:t,time:e}){this.group.traverse(i=>{i.visible&&i.scale.x<=.01&&(i.visible=!1),!i.visible&&i.scale.x>.01&&(i.visible=!0)}),this.transition1&&(this.uTransition1.value.x=-this.transition1.position.z-.01,this.uTransition2.value.x=-this.transition2.position.z-.01,this.uTransition1.value.y=this.transition1.scale.y,this.uTransition2.value.y=this.transition2.scale.y)}_createDebug(t){if(!T)return;const e=T.addFolder({title:"Token",parent:t});return e.addInput(this._tokenMaterial,"visible",{label:"Token Visible"}),e.addInput(this._trailMaterial,"visible",{label:"Trail Visible"}),ft(e,this._trail1.material,{label:"Trail Blending"}),e}}const wo=512;function Yu(a){const t={};for(const e in a){t[e]={};for(const i in a[e]){const o=a[e][i];o&&(o.isColor||o.isMatrix3||o.isMatrix4||o.isVector2||o.isVector3||o.isVector4||o.isTexture||o.isQuaternion)?o.isRenderTargetTexture?(console.warn("UniformsUtils: Textures of render targets cannot be cloned via cloneUniforms() or mergeUniforms()."),t[e][i]=null):t[e][i]=o.clone():Array.isArray(o)?t[e][i]=o.slice():t[e][i]=o}}return t}class ju{constructor(t){l(this,"_config");l(this,"_debug");l(this,"_view");l(this,"_skyBox");l(this,"_accumulation");l(this,"_enabled",!0);l(this,"_renderTarget");W(this),this._config=t.config,this._view=t.view,this._skyBox=this._createSkyBox(),this._debug=this._createDebug(t.debugContainer),this._renderTarget=this._createRenderTarget(),this._accumulation=this._createAccumulation(),this._onConfigUpdated()}get renderTarget(){return this._accumulation.renderTarget2}destroy(){}_createAccumulation(){const t=this._renderTarget.clone(),e=this._renderTarget.clone(),i=new te(new si,new $({vertexShader:`
						attribute vec2 uv;
						attribute vec3 position;

						varying vec2 vUv;

						void main() {
							vUv = uv;
							gl_Position = vec4(position, 1.0);
						}
					`,fragmentShader:`
						precision highp float;

						uniform sampler2D tDiffuse;
						uniform sampler2D tPrevious;
						varying vec2 vUv;

						void main() {
							vec2 uv = vUv;
							vec4 previousTexel = texture2D(tPrevious, uv);
							vec4 diffuseTexel = texture2D(tDiffuse, uv);
							gl_FragColor = mix(previousTexel, diffuseTexel, 0.5);
						}
					`,uniforms:{tDiffuse:{value:this._renderTarget.texture},tPrevious:{value:null}},depthWrite:!1,depthTest:!0}));return vt.addTexture(t.texture),{renderTarget1:t,renderTarget2:e,plane:i}}_createSkyBox(){const t=this._view.scene.environment,e=Math.floor(Math.log2(Math.max(t.image.width,t.image.height)/4)),i=1/t.image.width,o=1/t.image.height,n=new te(new aa(1,1,1),new Y({uniforms:Yu(fi.backgroundCube.uniforms),vertexShader:fi.backgroundCube.vertexShader,fragmentShader:fi.backgroundCube.fragmentShader,side:ai,depthTest:!1,depthWrite:!1,fog:!1,defines:{USE_ENVMAP:!0,ENVMAP_TYPE_CUBE_UV:!0,ENVMAP_MODE_REFLECTION:!0,ENVMAP_BLENDING_NONE:!0,CUBEUV_TEXEL_WIDTH:i,CUBEUV_TEXEL_HEIGHT:o,CUBEUV_MAX_MIP:de(e,2)}}));n.material.uniforms.envMap.value=t;const r=n.material.uniforms.backgroundRotation.value,s=new At(0,-Math.PI/2,0),c=new st().makeRotationFromEuler(s);return r.setFromMatrix4(c),n.scale.setScalar(300),n.renderOrder=-1e4,n.geometry.deleteAttribute("normal"),n.geometry.deleteAttribute("uv"),n.onBeforeRender=function(m,f,v){this.matrixWorld.copyPosition(v.matrixWorld)},n.visible=!1,n.userData.renderTransmission=!0,this._view.scene.add(n),n}_createRenderTarget(){const t=new ye(wo,wo,{depthBuffer:!0,stencilBuffer:!1,generateMipmaps:!0,type:Le,minFilter:ra,magFilter:Ne,wrapS:qi,wrapT:qi});return vt.addTexture(t.texture),t}update({delta:t,time:e}){z.frameCount%2===0&&this._renderTransmission(z.renderer.instance,this._view.scene),this._renderAccumulation(z.renderer.instance)}_renderTransmission(t,e){if(!this._enabled)return;e.traverse(o=>{if(o.type==="Mesh"||o.type==="SkinnedMesh"||o.type==="Points"||o.type==="Sprite"||o.type==="Reflector"){const n=o;n.userData&&(n.userData.originalVisibilityState=n.visible,n.visible=!!n.userData.renderTransmission,n.userData.renderingTransmission=!0)}});const i=t.getRenderTarget();t.setRenderTarget(this._renderTarget),t.clear(),t.render(this._view._scene,this._view.camera),t.setRenderTarget(i),e.traverse(o=>{o.userData&&(o.userData.renderingTransmission&&(o.userData.renderingTransmission=!1),o.userData.originalVisibilityState!==null&&o.userData.originalVisibilityState!==void 0&&(o.visible=!!o.userData.originalVisibilityState,o.userData.originalVisibilityState=null))})}_renderAccumulation(t){t.setRenderTarget(this._accumulation.renderTarget1),this._accumulation.plane.material.uniforms.tPrevious.value=this._accumulation.renderTarget2.texture,t.render(this._accumulation.plane,this._view.camera);const e=this._accumulation.renderTarget1;this._accumulation.renderTarget1=this._accumulation.renderTarget2,this._accumulation.renderTarget2=e}_onConfigUpdated(){}_createDebug(t){if(!T)return;const e=T.addFolder({title:"Transmission Renderer",parent:t});return e.addInput(this,"_enabled",{label:"Enabled"}),e}}class li extends te{constructor(t,e={}){super(t);const i=this;this.isReflector=!0,this.type="Reflector",this.camera=new Pi;const o=this,n=e.color!==void 0?new V(e.color):new V(8355711),r=e.textureWidth||512,s=e.textureHeight||512,c=e.clipBias||0,m=e.shader||li.ReflectorShader,f=e.multisample!==void 0?e.multisample:4;this.clipBias=c;const v=new Ho,h=new A,g=new A,b=new A,x=new st,p=new A(0,0,-1),y=new Kt,_=new A,S=new A,D=new Kt,E=new st,R=this.camera,d=new ye(r,s,{samples:f,type:Le});let N,K,ce;e.accumulation&&(N=d.clone(),K=d.clone(),ce=new te(new si,new $({vertexShader:`
						attribute vec2 uv;
						attribute vec3 position;

						varying vec2 vUv;

						void main() {
							vUv = uv;
							gl_Position = vec4(position, 1.0);
						}
					`,fragmentShader:`
						precision highp float;

						uniform sampler2D tDiffuse;
						uniform sampler2D tPrevious;
						varying vec2 vUv;

						void main() {
							vec2 uv = vUv;
							vec4 previousTexel = texture2D(tPrevious, uv);
							vec4 diffuseTexel = max(texture2D(tDiffuse, uv), vec4(0., 0., 0., 0.));
							gl_FragColor = mix(previousTexel, diffuseTexel, 0.5);
						}
					`,uniforms:{tDiffuse:{value:d.texture},tPrevious:{value:null}},depthWrite:!1,depthTest:!0}))),d.depthTexture=new Xo(r,s);const q=new Y({name:m.name!==void 0?m.name:"unspecified",uniforms:bt.clone(m.uniforms),fragmentShader:m.fragmentShader,vertexShader:m.vertexShader});q.uniforms.tDiffuse.value=d.texture,q.uniforms.color.value=n,q.uniforms.textureMatrix.value=E,this.material=q,this.onBeforeRender=function(L,H,U){if(g.setFromMatrixPosition(o.matrixWorld),b.setFromMatrixPosition(U.matrixWorld),x.extractRotation(o.matrixWorld),h.set(0,0,1),h.applyMatrix4(x),_.subVectors(g,b),_.dot(h)>0)return;_.reflect(h).negate(),_.add(g),x.extractRotation(U.matrixWorld),p.set(0,0,-1),p.applyMatrix4(x),p.add(b),S.subVectors(g,p),S.reflect(h).negate(),S.add(g),R.position.copy(_),R.up.set(0,1,0),R.up.applyMatrix4(x),R.up.reflect(h),R.lookAt(S),R.far=U.far,R.updateMatrixWorld(),R.projectionMatrix.copy(U.projectionMatrix),E.set(.5,0,0,.5,0,.5,0,.5,0,0,.5,.5,0,0,0,1),E.multiply(R.projectionMatrix),E.multiply(R.matrixWorldInverse),E.multiply(o.matrixWorld),v.setFromNormalAndCoplanarPoint(h,g),v.applyMatrix4(R.matrixWorldInverse),y.set(v.normal.x,v.normal.y,v.normal.z,v.constant);const G=R.projectionMatrix;D.x=(Math.sign(y.x)+G.elements[8])/G.elements[0],D.y=(Math.sign(y.y)+G.elements[9])/G.elements[5],D.z=-1,D.w=(1+G.elements[10])/G.elements[14],y.multiplyScalar(2/y.dot(D)),G.elements[2]=y.x,G.elements[6]=y.y,G.elements[10]=y.z+1-i.clipBias,G.elements[14]=y.w,o.visible=!1;const k=L.getRenderTarget(),X=L.xr.enabled,fe=L.shadowMap.autoUpdate;if(L.xr.enabled=!1,L.shadowMap.autoUpdate=!1,L.setRenderTarget(d),L.state.buffers.depth.setMask(!0),L.autoClear===!1&&L.clear(),H.traverse(O=>{var J,re;((J=O.userData)==null?void 0:J.forceRenderReflection)===!0&&(O.userData._preReflectionRenderVisibile=O.visible,O.visible=!0),((re=O.userData)==null?void 0:re.renderReflection)===!1&&(O.userData._preReflectionRenderVisibile=O.visible,O.visible=!1),O.visible&&(O.type==="Mesh"||O.type==="SkinnedMesh"||O.type==="Points"||O.type==="Sprite")&&(O.userData.renderingReflection=!0)}),z.frameCount%2===1&&L.render(H,R),ce){L.setRenderTarget(N),ce.material.uniforms.tPrevious.value=K.texture,L.render(ce,R);const O=N;N=K,K=O,q.uniforms.tDiffuse.value=K.texture}H.traverse(O=>{var J,re;O.visible&&O.userData.renderingReflection&&(O.userData.renderingReflection=!1),((J=O.userData)==null?void 0:J.forceRenderReflection)===!0&&(O.visible=O.userData._preReflectionRenderVisibile),((re=O.userData)==null?void 0:re.renderReflection)===!1&&(O.visible=O.userData._preReflectionRenderVisibile)}),L.xr.enabled=X,L.shadowMap.autoUpdate=fe,L.setRenderTarget(k);const me=U.viewport;me!==void 0&&L.state.viewport(me),o.visible=!0},this.getRenderTarget=function(){return d},this.dispose=function(){d.dispose(),o.material.dispose()}}}li.ReflectorShader={name:"ReflectorShader",uniforms:{color:{value:null},tDiffuse:{value:null},textureMatrix:{value:null}},vertexShader:`
		uniform mat4 textureMatrix;
		varying vec4 vUv;

		#include <common>
		#include <logdepthbuf_pars_vertex>

		void main() {

			vUv = textureMatrix * vec4( position, 1.0 );

			gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );

			#include <logdepthbuf_vertex>

		}`,fragmentShader:`
		uniform vec3 color;
		uniform sampler2D tDiffuse;
		varying vec4 vUv;

		#include <logdepthbuf_pars_fragment>

		float blendOverlay( float base, float blend ) {

			return( base < 0.5 ? ( 2.0 * base * blend ) : ( 1.0 - 2.0 * ( 1.0 - base ) * ( 1.0 - blend ) ) );

		}

		vec3 blendOverlay( vec3 base, vec3 blend ) {

			return vec3( blendOverlay( base.r, blend.r ), blendOverlay( base.g, blend.g ), blendOverlay( base.b, blend.b ) );

		}

		void main() {

			#include <logdepthbuf_fragment>

			vec4 base = texture2DProj( tDiffuse, vUv );
			gl_FragColor = vec4( blendOverlay( base.rgb, color ), 1.0 );

			#include <tonemapping_fragment>
			#include <colorspace_fragment>

		}`};const $u=`precision highp float;
#define GLSLIFY 1
#define PI 3.141592653589793
#define TAU 6.28318530718
uniform float uTime;uniform float uMusicTime;uniform vec2 uResolution;uniform float uDpr;uniform float uPlanets;uniform sampler2D tDiffuse;uniform float uFluidStrength;uniform vec3 cameraPosition;uniform mat3 normalMatrix;uniform vec3 uRingsColor;uniform sampler2D tWaterNoise;uniform sampler2D tWaterNormal;uniform sampler2D tWaterDepth;varying vec2 vUv;varying vec4 vUvReflection;varying vec3 vNormal;varying vec3 vPos;varying vec3 vMPos;varying float vZ;float sdBox(in vec2 p,in vec2 b){vec2 d=abs(p)-b;return length(max(d,0.0))+min(max(d.x,d.y),0.0);}vec3 sdgBox(in vec2 p,in vec2 b){vec2 w=abs(p)-b;vec2 s=vec2(p.x<0.0?-1:1,p.y<0.0?-1:1);float g=max(w.x,w.y);vec2 q=max(w,0.0);float l=length(q);return vec3((g>0.0)?l  :g,s*((g>0.0)?q/l:((w.x>w.y)?vec2(1,0):vec2(0,1))));}const int ITERATIONS=10;float exponentialOut(float t){return t==1.0 ? t : 1.0-pow(2.0,-10.0*t);}float wideRing(float time,float ringDist){float ft=fract(time*0.3593786227683747);float p=exponentialOut(ft);float a=step(-0.05+p,ringDist)-step(0.+p,ringDist);return a*smoothstep(1.,0.6,ft);}float wideRings(float time,float ringDist){float t=wideRing(time-0.69,(ringDist*0.5));return max(t,wideRing(time,(ringDist*0.5)));}
#ifdef USE_DEPTH
#include <packing>
float readDepth(sampler2D depthSampler,vec2 coord){float fragCoordZ=texture2D(depthSampler,coord).x;float viewZ=perspectiveDepthToViewZ(fragCoordZ,uCamera.x,uCamera.y);return viewZ;}
#endif
highp float rand(const in vec2 uv){const highp float a=12.9898,b=78.233,c=43758.5453;highp float dt=dot(uv.xy,vec2(a,b)),sn=mod(dt,PI);return fract(sin(sn)*c);}vec2 mult(inout vec2 r){r=fract(r*vec2(12.9898,78.233));return sqrt(r.x+0.001)*vec2(sin(r.y*TAU),cos(r.y*TAU));}float range(float oldValue,float oldMin,float oldMax,float newMin,float newMax){return(((oldValue-oldMin)*(newMax-newMin))/(oldMax-oldMin))+newMin;}float crange(float oldValue,float oldMin,float oldMax,float newMin,float newMax){return clamp(range(oldValue,oldMin,oldMax,newMin,newMax),min(newMax,newMin),max(newMin,newMax));}vec3 blur(sampler2D tex,vec4 uv,float radius,float aspect,vec2 offset){vec2 circle=vec2(radius);circle.x*=aspect;vec2 rnd=vec2(rand(vec2(uv.xy+offset)));vec3 acc=vec3(0.0);for(int i=0;i<ITERATIONS;i++){acc+=texture2DProj(tex,uv+vec4(vec2(circle*mult(rnd)),0,0)).xyz;}return acc/float(ITERATIONS);}void main(){vec3 color=vec3(0);float alpha=1.0;vec3 c1=vec3(0.191,0.139,0.346);vec3 c2=vec3(0.113,0.103,0.308);vec3 c3=vec3(0.077,0.066,0.191);color=mix(c1,c2,sin(vPos.x*0.5+4.5+uTime*1.3)*0.5+0.5);color=mix(color,c3,sin(vPos.z*0.5+1.9+uTime*0.7)*0.5+0.5);vec2 uvNormal=vUv*100.0;uvNormal+=uTime*0.04;vec3 waterNormal=texture2D(tWaterNormal,uvNormal).xyz;vec2 uvNormal2=vUv*80.0;uvNormal2-=uTime*0.05;vec3 waterNormal2=texture2D(tWaterNormal,uvNormal2).xyz;waterNormal.xy*=waterNormal2.xy;vec2 uvNoise=vUv*50.0;uvNoise+=uTime*0.025;float noise=texture2D(tWaterNoise,uvNoise).g;vec2 uvNoise2=vUv*30.0;uvNoise2-=uTime*0.015;float noise2=texture2D(tWaterNoise,uvNoise2).g;noise*=noise2;noise=pow(noise*2.0,2.0);vec2 uvNoise3=vUv*110.0;uvNoise3+=uTime*0.015;uvNoise3-=waterNormal.xy*0.2;float noise3=texture2D(tWaterNoise,uvNoise3).g;noise3=pow(noise3*2.0,2.0);vec2 waveUv=vMPos.xz-vec2(1.94,2.02);vec2 boxSize=vec2(0.26,0.065);float boxG=sdBox(waveUv,boxSize);float rotation=mix(((noise-0.5)*2.-(noise2-0.5)*2.8+(noise3-0.5)*0.2),-0.2,smoothstep(0.1,0.05,boxG));waveUv=vec2(cos(rotation)*waveUv.x+sin(rotation)*waveUv.y,cos(rotation)*waveUv.y-sin(rotation)*waveUv.x);vec3 box=sdgBox(waveUv,boxSize);float wave=sin(box.x*100.-uTime*5.);wave*=pow(smoothstep(0.9,0.1,box.x),2.)*smoothstep(0.,0.05,box.x);wave*=0.8;wave*=uPlanets;vec3 mpos=vMPos+vec3(0.,wave*4.,0.);vec3 waveNormals=normalize(vec3(box.yz*wave,1.));waterNormal.xy*=waveNormals.xy;float tick=floor(fract(uTime)*15.0);vec2 jitter=vec2(mod(tick*382.0231,21.321),mod(tick*122.0142,31.243));float radius=mix(0.06,0.001,noise*10.0);vec3 depth=blur(tWaterDepth,vUvReflection,0.01,1.0,jitter);float d=smoothstep(0.0,0.2,depth.r);vec4 uvReflection=vUvReflection;uvReflection.xy+=waterNormal.xy*0.1*d;vec3 reflection=blur(tDiffuse,uvReflection,radius*d,1.0*d,jitter);color+=reflection;color*=mix(vec3(1.0),0.5+(reflection*0.5),1.0-0.2*noise3);float centerDist=length(vMPos.xyz-vec3(0.0,0.5,0.0));vec3 ringsPosition=vec3(0.0,0.8,0.0);float ringDist=length(vMPos.xz-ringsPosition.xz)*1.0+noise*0.3;float ringsFalloff=smoothstep(1.0,0.5,ringDist);float rings=smoothstep(0.92,0.95,sin(ringDist*400.0-uTime*2.0));rings*=ringsFalloff;rings=max(wideRings(uMusicTime,ringDist)*smoothstep(2.0,1.5,ringDist)*0.5,rings);rings*=rand(floor(vMPos.xz*300.0));rings*=1.0-0.8*rand(vMPos.xz*0.5);rings+=ringsFalloff*0.2;rings*=1.0-0.5*rand(vMPos.xz*1.0);vec3 ringsDir=normalize(ringsPosition-vMPos);vec3 ringsColor=uRingsColor*2.0;rings*=(1.-uFluidStrength);rings*=(1.-step(0.01,uPlanets));rings*=mix(0.5,1.,d);rings*=smoothstep(2.,1.,ringDist);rings*=0.7;color+=ringsColor*rings;color*=0.8;vec3 rockColor=vec3(0.04,0.03,0.07);color=mix(color,rockColor,(1.-d)*0.3);vec3 lightPos=-vec3(10.,50.,10.);vec3 viewDir=normalize(cameraPosition-mpos);vec3 lightDir=normalize(lightPos-mpos);vec3 reflectDir=reflect(-lightDir,normalize(normalMatrix*waveNormals));float shininess=0.1;float spec=pow(max(dot(viewDir,reflectDir),0.0),32.*shininess);vec3 lightColor=vec3(1.0,0.49,0.1)*0.2;float light=spec*uPlanets;color+=vec3(light*lightColor);float fog=smoothstep(1.,20.,length(vMPos))-smoothstep(4.,10.,vMPos.y);gl_FragColor.rgb=color*mix(1.,0.8,fog);gl_FragColor.a=alpha;}`,Zu=w($u,"fragmentShader"),Ku=`#define GLSLIFY 1
attribute vec2 uv;attribute vec3 position;attribute vec3 normal;uniform mat3 normalMatrix;uniform mat4 modelMatrix;uniform mat4 viewMatrix;uniform mat4 modelViewMatrix;uniform mat4 projectionMatrix;uniform mat4 textureMatrix;varying vec2 vUv;varying vec4 vUvReflection;varying vec3 vNormal;varying vec3 vPos;varying vec3 vMPos;varying vec3 vWPos;void main(){vec4 pos=vec4(position,1);vUv=uv;vUvReflection=textureMatrix*pos;vPos=pos.xyz;vMPos=(modelMatrix*pos).xyz;vec4 mvPosition=modelViewMatrix*pos;vNormal=normalize(normalMatrix*normal);gl_Position=projectionMatrix*mvPosition;}`,qu=w(Ku,"vertexShader"),Eo=.25;class Xu{constructor({view:t,config:e,debugContainer:i,gltf:o}){const n=ve(),r=new li(new Ii(1,1),{clipBias:.03,textureWidth:window.innerWidth*.5,textureHeight:window.innerHeight*.5,accumulation:!0});r.userData.renderReflection=!0,t._scene.add(r),this._mesh=r;const s={value:M.get("demoWaterNoise")},c={value:M.get("demoWaterNormal")};s.value.wrapS=s.value.wrapT=Z,c.value.wrapS=c.value.wrapT=Z;const{uTime:m,uResolution:f,uDpr:v}=z.uniforms,{tDiffuse:h,textureMatrix:g}=r.material.uniforms,{tDepth:b,uCamera:x,uFluidStrength:p}=t._composer.passes.final.uniforms,y={value:0},_={value:0},S={value:new V("#FDADFF")},D={value:r.getRenderTarget().depthTexture},E={uResolution:f,uTime:m,uDpr:v,uCamera:x,uMusicTime:_,uPlanets:y,uRingsColor:S,uFluidStrength:p,tDiffuse:h,tWaterDepth:D,textureMatrix:g,tWaterNoise:s,tWaterNormal:c,tDepth:b};this.uniforms=E;const R=r.onBeforeRender;r.onBeforeRender=function(...N){if(!r.userData.renderReflection)return;const K=t._composer.passes.final.uniforms.uZoom.value>.99,ce=!!t._composer.passes.final.uniforms.uWhitePage.value,q=!!t._composer.passes.final.uniforms.uMenu.value;K||ce&&!q||R(...N)},z.addEventListener("resize",({innerWidth:N,innerHeight:K})=>{r.getRenderTarget().setSize(N*Eo,K*Eo)}),F(()=>n.home.planets,N=>{y.value=N});const d=o.scene.getObjectByName("WATER");d.visible=!1,r.position.copy(d.position),r.quaternion.copy(d.quaternion),r.scale.copy(d.scale),r.material=this._createMaterial(E),r.userData.renderBloom=!1,vt.addTexture(r.material.uniforms.tDiffuse.value),this._createDebug(i)}_createMaterial(t){const e=new $({uniforms:t});return qu.use(e),Zu.use(e),e}update(){He.currentTheme&&(this.uniforms.uMusicTime.value=He.currentTheme.seek())}_createDebug(t){if(!T)return;const e=T.addFolder({title:"Water",parent:t});return e.addInput(this._mesh.userData,"renderReflection",{label:"Render Reflection"}),e.addInput(this._mesh,"visible",{label:"Visible"}),e.addInput(this._mesh,"clipBias",{step:1e-4}),e.addInput(new bn(this.uniforms.uRingsColor,"value"),"value",{label:"Rings Color"}),e}}const Qu=`precision highp float;
#define GLSLIFY 1
#define RECIPROCAL_PI 0.31830988618
#define RECIPROCAL_PI2 0.15915494
#define PI 3.141592653589793
#define TAU 6.28318530718
uniform float uTime;uniform float uDpr;uniform float uPlanets;uniform sampler2D tDust;uniform mat4 viewMatrix;uniform mat4 modelMatrix;uniform vec3 cameraPosition;varying vec3 vPos;varying vec4 vMPos;varying vec4 vRandom;varying vec4 vRandom2;highp float rand(const in vec2 uv){const highp float a=12.9898,b=78.233,c=43758.5453;highp float dt=dot(uv.xy,vec2(a,b)),sn=mod(dt,PI);return fract(sin(sn)*c);}void rotate2d(inout vec2 v,float a){mat2 m=mat2(cos(a),-sin(a),sin(a),cos(a));v=m*v;}void main(){vec3 color=vec3(0);float alpha=1.0;vec2 uv=gl_PointCoord.xy;vec2 uvDust=uv;uvDust-=0.5;rotate2d(uvDust,vRandom.x*6.28);uvDust+=0.5;vec3 masks=texture2D(tDust,uvDust).rgb;float a=vRandom.y*3.0;if(a<1.0){color+=masks.r;}else if(a<2.0){color+=masks.g;}else{color+=masks.b;}color*=vec3(0.53,0.79,1.0);color*=mix(0.1,0.5,vRandom2.w);color*=0.2;color*=mix(1.0,0.0,uPlanets);if(color.g<0.01)discard;gl_FragColor.rgb=color;gl_FragColor.a=alpha;}`,Ju=w(Qu,"fragmentShader"),em=`#define GLSLIFY 1
attribute vec3 position;attribute vec4 random;attribute vec4 random2;uniform mat3 normalMatrix;uniform mat4 modelMatrix;uniform mat4 viewMatrix;uniform mat4 modelViewMatrix;uniform mat4 projectionMatrix;uniform float uTime;uniform float uDpr;varying vec3 vPos;varying vec4 vMPos;varying vec4 vMVPos;varying vec4 vRandom;varying vec4 vRandom2;float sinWave(float speed,float offset,float strength){float t=uTime*0.25;return sin(t*speed+offset)*strength;}void main(){vRandom=random;vRandom2=random2;vec4 pos=vec4(position,1);pos.x+=sinWave(mix(0.05,0.5,vRandom.x),mix(0.0,6.28,vRandom.y),mix(0.05,0.4,vRandom.z));pos.y+=sinWave(mix(0.05,0.5,vRandom.w),mix(0.0,6.28,vRandom.x),mix(0.05,0.4,vRandom2.y));pos.z+=sinWave(mix(0.05,0.5,vRandom2.x),mix(0.0,6.28,vRandom2.y),mix(0.05,0.4,vRandom2.z));vPos=pos.xyz;vMPos=modelMatrix*pos;vMVPos=viewMatrix*vMPos;gl_Position=projectionMatrix*vMVPos;gl_PointSize=20.0/length(vMVPos.xyz)*mix(0.3,1.3,vRandom.w)*uDpr;}`,tm=w(em,"vertexShader"),im=300;class om{constructor({view:t,config:e,debugContainer:i,gltf:o}){const n=ve();W(this);const r={value:M.get("dust-particle")},{uTime:s,uResolution:c,uDpr:m}=z.uniforms,f={value:0};F(()=>n.home.planets,y=>{f.value=y});const v=new ri,h=[],g=[],b=[];for(let y=0;y<im;y++){const _=(Math.random()*2-1)*3,S=Math.random()*3,D=(Math.random()*2-1)*3;h.push(_,S,D),g.push(Math.random(),Math.random(),Math.random(),Math.random()),b.push(Math.random(),Math.random(),Math.random(),Math.random())}v.setAttribute("position",new Pt(h,3)),v.setAttribute("random",new Pt(g,4)),v.setAttribute("random2",new Pt(b,4));const x=new $({uniforms:{uResolution:c,uTime:s,uDpr:m,tDust:r,uPlanets:f},transparent:!0,blending:Ve,depthWrite:!1});tm.use(x),Ju.use(x);const p=new sa(v,x);p.userData.renderBloom=!1,p.userData.renderTransmission=!1,p.userData.renderReflection=!1,t._scene.add(p),this._points=p,this._createDebug(i)}_createDebug(t){if(!T)return;const e=T.addFolder({title:"Dust",parent:t});return e.addInput(this._points,"visible",{label:"Visible"}),e}}var yn={exports:{}};(function(a){var t=/\n/,e=`
`,i=/\s/;a.exports=function(m,f){var v=a.exports.lines(m,f);return v.map(function(h){return m.substring(h.start,h.end)}).join(`
`)},a.exports.lines=function(f,v){if(v=v||{},v.width===0&&v.mode!=="nowrap")return[];f=f||"";var h=typeof v.width=="number"?v.width:Number.MAX_VALUE,g=Math.max(0,v.start||0),b=typeof v.end=="number"?v.end:f.length,x=v.mode,p=v.measure||c;return x==="pre"?r(p,f,g,b,h):s(p,f,g,b,h,x)};function o(m,f,v,h){var g=m.indexOf(f,v);return g===-1||g>h?h:g}function n(m){return i.test(m)}function r(m,f,v,h,g){for(var b=[],x=v,p=v;p<h&&p<f.length;p++){var y=f.charAt(p),_=t.test(y);if(_||p===h-1){var S=_?p:p+1,D=m(f,x,S,g);b.push(D),x=p+1}}return b}function s(m,f,v,h,g,b){var x=[],p=g;for(b==="nowrap"&&(p=Number.MAX_VALUE);v<h&&v<f.length;){for(var y=o(f,e,v,h);v<y&&n(f.charAt(v));)v++;var _=m(f,v,y,p),S=v+(_.end-_.start),D=S+e.length;if(S<y){for(;S>v&&!n(f.charAt(S));)S--;if(S===v)D>v+e.length&&D--,S=D;else for(D=S;S>v&&n(f.charAt(S-e.length));)S--}if(S>=v){var E=m(f,v,S,p);x.push(E)}v=D}return x}function c(m,f,v,h){var g=Math.min(h,v-f);return{start:f,end:f+g}}})(yn);var nm=yn.exports;const am=Ni(nm),Mo=["x","e","a","o","n","s","r","c","u","m","v","w","z"],No=["m","w"],Do=["H","I","N","E","F","K","L","T","U","V","W","X","Y","Z"],Ro=9,Nt=32,rm=0,Sn=1,Cn=2;class sm{constructor(t={}){this.glyphs=[],this._measure=this.computeMetrics.bind(this),this.update(t)}get width(){return this._width}get height(){return this._height}get descender(){return this._descender}get ascender(){return this._ascender}get xHeight(){return this._xHeight}get baseline(){return this._baseline}get capHeight(){return this._capHeight}get lineHeight(){return this._lineHeight}get linesTotal(){return this._linesTotal}get lettersTotal(){return this._lettersTotal}get wordsTotal(){return this._wordsTotal}update(t){if(t=Object.assign({measure:this._measure},t),this._options=t,this._options.tabSize=Io(this._options.tabSize,4),!t.font)throw new Error("must provide a valid bitmap font");const e=this.glyphs,i=t.text||"",o=t.font;this._setupSpaceGlyphs(o);const n=am.lines(i,t),r=t.width||0,s=i.split(" ").filter(D=>D!==`
`).length,c=i.split("").filter(D=>D!==`
`&&D!==" ").length;e.length=0;const m=n.reduce(function(D,E){return Math.max(D,E.width,r)},0);let f=0,v=0;const h=Io(t.lineHeight,o.common.lineHeight),g=o.common.base,b=h-g,x=t.letterSpacing||0,p=h*n.length-b,y=dm(this._options.align);v-=p,this._width=m,this._height=p,this._descender=h-g,this._baseline=g,this._xHeight=cm(o),this._capHeight=mm(o),this._lineHeight=h,this._ascender=h-b-this._xHeight;let _=0,S=0;n.forEach((D,E)=>{const R=D.start,d=D.end,N=D.width,ce=i.slice(R,d).split(" ").filter(G=>G!=="").length,q=i.slice(R,d).split(" ").join("").length;let L=0,H=0,U;for(let G=R;G<d;G++){const k=i.charCodeAt(G),X=this.getGlyph(o,k);if(X){U&&(f+=Po(o,U.id,X.id));let fe=f;y===Sn?fe+=(m-N)/2:y===Cn&&(fe+=m-N),e.push({position:[fe,v],data:X,index:G,linesTotal:n.length,lineIndex:E,lineLettersTotal:q,lineLetterIndex:L,lineWordsTotal:ce,lineWordIndex:H,wordsTotal:s,wordIndex:_,lettersTotal:c,letterIndex:S}),X.id===Nt&&(U==null?void 0:U.id)!==Nt&&(H++,_++),X.id!==Nt&&(L++,S++),f+=X.xadvance+x,U=X}}v+=h,f=0}),this._lettersTotal=c,this._wordsTotal=s,this._linesTotal=n.length}getGlyph(t,e){const i=Oo(t,e);return i||(e===Ro?this._fallbackTabGlyph:e===Nt?this._fallbackSpaceGlyph:null)}computeMetrics(t,e,i,o){const n=this._options.letterSpacing||0,r=this._options.font;let s=0,c=0,m=0,f,v;if(!r.chars||r.chars.length===0)return{start:e,end:e,width:0};i=Math.min(t.length,i);for(let h=e;h<i;h++){const g=t.charCodeAt(h);if(f=this.getGlyph(r,g),f){f.char=t[h],f.xoffset;const b=v?Po(r,v.id,f.id):0;s+=b;const x=s+f.xadvance+n,p=s+f.width;if(p>=o||x>=o)break;s=x,c=p,v=f}m++}return v&&(c+=v.xoffset),{start:e,end:e+m,width:c}}_setupSpaceGlyphs(t){if(this._fallbackSpaceGlyph=null,this._fallbackTabGlyph=null,!t.chars||t.chars.length===0)return;const e=Oo(t,Nt)||um(t)||t.chars[0],i=this._options.tabSize*e.xadvance;this._fallbackSpaceGlyph=e;const o=Object.assign({},e);this._fallbackTabGlyph=Object.assign(o,{x:0,y:0,xadvance:i,id:Ro,xoffset:0,yoffset:0,width:0,height:0})}}function lm(a){return new sm(a)}function Oo(a,t){if(!a.chars||a.chars.length===0)return null;const e=ci(a.chars,t);return e>=0?a.chars[e]:null}function cm(a){for(let t=0;t<Mo.length;t++){const e=Mo[t].charCodeAt(0),i=ci(a.chars,e);if(i>=0)return a.chars[i].height}return 0}function um(a){for(let t=0;t<No.length;t++){const e=No[t].charCodeAt(0),i=ci(a.chars,e);if(i>=0)return a.chars[i]}return 0}function mm(a){for(let t=0;t<Do.length;t++){const e=Do[t].charCodeAt(0),i=ci(a.chars,e);if(i>=0)return a.chars[i].height}return 0}function Po(a,t,e){if(!a.kernings||a.kernings.length===0)return 0;const i=a.kernings;for(let o=0;o<i.length;o++){const n=i[o];if(n.first===t&&n.second===e)return n.amount}return 0}function dm(a){return a==="center"?Sn:a==="right"?Cn:rm}function ci(a,t,e){e=e||0;for(let i=e;i<a.length;i++)if(a[i].id===t)return i;return-1}function Io(a,t){return typeof a=="number"?a:typeof t=="number"?t:0}const Ci=2,be={min:[0,0],max:[0,0]};function Tn(a){const t=a.length/Ci;be.min[0]=a[0],be.min[1]=a[1],be.max[0]=a[0],be.max[1]=a[1];for(let e=0;e<t;e++){const i=a[e*Ci+0],o=a[e*Ci+1];be.min[0]=Math.min(i,be.min[0]),be.min[1]=Math.min(o,be.min[1]),be.max[0]=Math.max(i,be.max[0]),be.max[1]=Math.max(o,be.max[1])}}function vm(a,t){return Tn(a),t.min.set(be.min[0],be.min[1],0),t.max.set(be.max[0],be.max[1],0),t}function fm(a,t){Tn(a);const e=be.min[0],i=be.min[1],o=be.max[0],n=be.max[1],r=o-e,s=n-i,c=Math.sqrt(r*r+s*s);t.center.set(e+r/2,i+s/2,0),t.radius=c/2}const Lo={computeBox:vm,computeSphere:fm};function hm(a){const t=new Float32Array(a.length*4*1);let e=0;return a.forEach(function(i){const o=i.data.page||0;t[e++]=o,t[e++]=o,t[e++]=o,t[e++]=o}),t}function gm(a,t,e,i){const o=new Float32Array(a.length*4*2),n=new Float32Array(a.length*4*2),r=new Float32Array(a.length*4*3),s=new Float32Array(a.length*4*2),c=new Float32Array(a.length*4*4);let m=0,f=0,v=0,h=0,g=0;function b(x,p){const y=x.x+x.width,_=x.y+x.height,S=x.x/p.width;let D=x.y/p.height;const E=y/p.width;let R=_/p.height;return e&&(D=(p.height-x.y)/p.height,R=(p.height-_)/p.height),[S,E,R,D]}return a.forEach(function(x){const p=x.data,[y,_,S,D]=b(p,t);o[m++]=y,o[m++]=D,o[m++]=y,o[m++]=S,o[m++]=_,o[m++]=S,o[m++]=_,o[m++]=D,c[g++]=y,c[g++]=S,c[g++]=_,c[g++]=D,c[g++]=y,c[g++]=S,c[g++]=_,c[g++]=D,c[g++]=y,c[g++]=S,c[g++]=_,c[g++]=D,c[g++]=y,c[g++]=S,c[g++]=_,c[g++]=D,n[h++]=x.position[0]/i.width,n[h++]=(x.position[1]+i.height)/i.height,n[h++]=x.position[0]/i.width,n[h++]=(x.position[1]+i.height+p.height)/i.height,n[h++]=(x.position[0]+p.width)/i.width,n[h++]=(x.position[1]+i.height+p.height)/i.height,n[h++]=(x.position[0]+p.width)/i.width,n[h++]=(x.position[1]+i.height)/i.height;const E=x.position[0]+p.xoffset,R=x.position[1]+p.yoffset,d=p.width,N=p.height;r[f++]=E,r[f++]=R,r[f++]=0,r[f++]=E,r[f++]=R+N,r[f++]=0,r[f++]=E+d,r[f++]=R+N,r[f++]=0,r[f++]=E+d,r[f++]=R,r[f++]=0,s[v++]=E+d/2,s[v++]=R+N/2,s[v++]=E+d/2,s[v++]=R+N/2,s[v++]=E+d/2,s[v++]=R+N/2,s[v++]=E+d/2,s[v++]=R+N/2}),{uvs:o,layoutUvs:n,positions:r,centers:s,bounds:c}}function pm(a,t){const e=new Float32Array(a.length*4),i=new Float32Array(a.length*4),o=new Float32Array(a.length*4),n=new Float32Array(a.length*4),r=new Float32Array(a.length*4),s=new Float32Array(a.length*4),c=new Float32Array(a.length*4),m=new Float32Array(a.length*4),f=new Float32Array(a.length*4),v=new Float32Array(a.length*4);let h=0,g=0,b=0,x=0,p=0,y=0,_=0,S=0,D=0,E=0;for(let R=0;R<a.length;R++){const d=a[R];e[h++]=d.linesTotal,e[h++]=d.linesTotal,e[h++]=d.linesTotal,e[h++]=d.linesTotal,i[g++]=d.lineIndex,i[g++]=d.lineIndex,i[g++]=d.lineIndex,i[g++]=d.lineIndex,o[b++]=d.lineLettersTotal,o[b++]=d.lineLettersTotal,o[b++]=d.lineLettersTotal,o[b++]=d.lineLettersTotal,n[x++]=d.lineLetterIndex,n[x++]=d.lineLetterIndex,n[x++]=d.lineLetterIndex,n[x++]=d.lineLetterIndex,r[p++]=d.lineWordsTotal,r[p++]=d.lineWordsTotal,r[p++]=d.lineWordsTotal,r[p++]=d.lineWordsTotal,s[y++]=d.lineWordIndex,s[y++]=d.lineWordIndex,s[y++]=d.lineWordIndex,s[y++]=d.lineWordIndex,c[_++]=d.wordsTotal,c[_++]=d.wordsTotal,c[_++]=d.wordsTotal,c[_++]=d.wordsTotal,m[S++]=d.wordIndex,m[S++]=d.wordIndex,m[S++]=d.wordIndex,m[S++]=d.wordIndex,f[D++]=d.lettersTotal,f[D++]=d.lettersTotal,f[D++]=d.lettersTotal,f[D++]=d.lettersTotal,v[E++]=d.letterIndex,v[E++]=d.letterIndex,v[E++]=d.letterIndex,v[E++]=d.letterIndex}return{linesTotal:e,lineIndex:i,lineLettersTotal:o,lineLetterIndex:n,lineWordsTotal:r,lineWordIndex:s,wordsTotal:c,wordIndex:m,lettersTotal:f,letterIndex:v}}const Ti={pages:hm,attributes:gm,infos:pm};var _m=function(a){switch(a){case"int8":return Int8Array;case"int16":return Int16Array;case"int32":return Int32Array;case"uint8":return Uint8Array;case"uint16":return Uint16Array;case"uint32":return Uint32Array;case"float32":return Float32Array;case"float64":return Float64Array;case"array":return Array;case"uint8_clamped":return Uint8ClampedArray}},xm=Object.prototype.toString,bm=ym;function ym(a){return a.BYTES_PER_ELEMENT&&xm.call(a.buffer)==="[object ArrayBuffer]"||Array.isArray(a)}/*!
 * Determine if an object is a Buffer
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */var Sm=function(a){return a!=null&&(wn(a)||Cm(a)||!!a._isBuffer)};function wn(a){return!!a.constructor&&typeof a.constructor.isBuffer=="function"&&a.constructor.isBuffer(a)}function Cm(a){return typeof a.readFloatLE=="function"&&typeof a.slice=="function"&&wn(a.slice(0,0))}var Tm=_m,wm=bm,Em=Sm,Mm=[0,2,3],Nm=[2,1,3],Dm=function(t,e){(!t||!(wm(t)||Em(t)))&&(e=t||{},t=null),typeof e=="number"?e={count:e}:e=e||{};for(var i=typeof e.type=="string"?e.type:"uint16",o=typeof e.count=="number"?e.count:1,n=e.start||0,r=e.clockwise!==!1?Mm:Nm,s=r[0],c=r[1],m=r[2],f=o*6,v=t||new(Tm(i))(f),h=0,g=0;h<f;h+=6,g+=4){var b=h+n;v[b+0]=g+0,v[b+1]=g+1,v[b+2]=g+2,v[b+3]=g+s,v[b+4]=g+c,v[b+5]=g+m}return v};const Rm=Ni(Dm);class Om extends ri{constructor(t){super(),typeof t=="string"&&(t={text:t}),this._options=Object.assign({},t),this._layout=null,this._visibleGlyphs=[],this.update(this._options)}get layout(){return this._layout}get visibleGlyphs(){return this._visibleGlyphs}update(t){if(t=this._validateOptions(t),!t)return;this._layout=lm(t);const e=t.flipY!==!1,i=t.font,o=i.common.scaleW,n=i.common.scaleH,r=this._layout.glyphs.filter(f=>{const v=f.data;return v.width*v.height>0});this._visibleGlyphs=r;const s=Ti.attributes(r,{width:o,height:n},e,this._layout),c=Ti.infos(r,this._layout),m=Rm([],{clockwise:!0,type:"uint16",count:r.length});if(this.setIndex(m),this.setAttribute("position",new Se(s.positions,3)),this.setAttribute("center",new Se(s.centers,2)),this.setAttribute("uv",new Se(s.uvs,2)),this.setAttribute("layoutUv",new Se(s.layoutUvs,2)),this.setAttribute("bounds",new Se(s.bounds,4)),this.setAttribute("lineIndex",new Se(c.lineIndex,1)),this.setAttribute("lineLettersTotal",new Se(c.lineLettersTotal,1)),this.setAttribute("lineLetterIndex",new Se(c.lineLetterIndex,1)),this.setAttribute("lineWordsTotal",new Se(c.lineWordsTotal,1)),this.setAttribute("lineWordIndex",new Se(c.lineWordIndex,1)),this.setAttribute("wordIndex",new Se(c.wordIndex,1)),this.setAttribute("letterIndex",new Se(c.letterIndex,1)),!t.multipage&&"page"in this.attributes)this.deleteAttribute("page");else if(t.multipage){const f=Ti.pages(r);this.setAttribute("page",new Se(f,1))}}computeBoundingSphere(){this.boundingSphere===null&&(this.boundingSphere=new la);const t=this.attributes.position.array,e=this.attributes.position.itemSize;if(!t||!e||t.length<2){this.boundingSphere.radius=0,this.boundingSphere.center.set(0,0,0);return}Lo.computeSphere(t,this.boundingSphere),isNaN(this.boundingSphere.radius)&&console.warn('BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.')}computeBoundingBox(){this.boundingBox===null&&(this.boundingBox=new ca);const t=this.boundingBox,e=this.attributes.position.array,i=this.attributes.position.itemSize;if(!e||!i||e.length<2){t.makeEmpty();return}return Lo.computeBox(e,t)}_validateOptions(t){if(typeof t=="string"&&(t={text:t}),t=Object.assign({},this._options,t),!t.font)throw new TypeError("must specify a { font } in options");return t}}const Pm=`#define GLSLIFY 1
uniform sampler2D tAtlas;uniform sampler2D tNoise;uniform sampler2D tPaint;uniform sampler2D tFluidFlowmap;uniform sampler2D tMouseFluidFlowmap;uniform float uProgress;uniform vec2 uResolution;uniform float uTime;varying vec2 vUv;varying vec2 vLayoutUv;varying vec2 vLocalUv;float remap(float value,float start1,float stop1,float start2,float stop2){return start2+(stop2-start2)*((value-start1)/(stop1-start1));}
#ifndef HALF_PI
#define HALF_PI 1.5707963267948966
#endif
float sineOut(float t){return sin(t*HALF_PI);}float quarticIn(float t){return t*t*t*t;}float median(float r,float g,float b){return max(min(r,g),min(max(r,g),b));}vec2 msdf(sampler2D tex,vec2 uv){vec3 texel=texture2D(tex,uv).rgb;float sigDist=median(texel.r,texel.g,texel.b)-0.5;return vec2(clamp(sigDist/fwidth(sigDist)+0.5,0.0,1.0),sigDist);}void main(){vec2 uv=vUv;vec2 screenUv=gl_FragCoord.xy/uResolution;vec2 letter=msdf(tAtlas,vUv);vec2 noiseScale=vec2(1.5,0.5)*0.5;vec4 noise=texture2D(tNoise,vLayoutUv*noiseScale);vec4 fluid=texture2D(tFluidFlowmap,vec2(screenUv.x,1.-screenUv.y));vec4 mouseFluid=texture2D(tMouseFluidFlowmap,vec2(screenUv.x,1.-screenUv.y));float direction=sign(uProgress-1.);float isOut=uProgress>1. ? 1. : 0.;vec2 paintUv=vLayoutUv;paintUv-=mouseFluid.rg*0.005;paintUv+=sin(fluid.rg*0.1)*0.03;paintUv.y+=uTime*0.1;paintUv.xy+=quarticIn(abs(uProgress-1.))*direction*vec2(-1.,1.);vec3 paint=texture2D(tPaint,paintUv).rgb;float prog=smoothstep(0.,0.9,1.-abs(uProgress-1.));float gradient=mix(vLayoutUv.x,1.-vLayoutUv.x,isOut);float paintMask=step(mix(noise.g,gradient,0.4),sineOut(prog));float alphaMask=0.;vec3 color=vec3(1.);color=mix(color,paint,mix(paintMask,prog,0.5));float inBetweenAlpha=alphaMask*(1.-paintMask);float alpha=mix(letter.x,0.,inBetweenAlpha);gl_FragColor=vec4(color,alpha);}`,Im=w(Pm,"fragmentShader"),Lm=`#define GLSLIFY 1
attribute vec2 layoutUv;attribute vec4 bounds;varying vec2 vUv;varying vec2 vLayoutUv;varying vec2 vLocalUv;float remap(float value,float start1,float stop1,float start2,float stop2){return start2+(stop2-start2)*((value-start1)/(stop1-start1));}void main(){vLayoutUv=layoutUv;vUv=uv;vLocalUv.x=remap(uv.x,bounds.x,bounds.z,0.,1.);vLocalUv.y=remap(uv.y,bounds.y,bounds.w,0.,1.);gl_Position=projectionMatrix*modelViewMatrix*vec4(position,1.0);}`,Fm=w(Lm,"vertexShader"),Am=62;class Um extends le{constructor(e){super();l(this,"_config");l(this,"_mesh");l(this,"_debug");l(this,"_view");l(this,"_tween");this._config=e.config,this._view=e.view,this._mesh=this._createMesh(),this._debug=this._createDebug(e.debugContainer),this._onConfigUpdated()}_createMesh(){const e=new Om({font:M.get("font-regular/json"),text:""}),i=M.get("paint");i.wrapS=i.wrapT=ua;const o=new Y({uniforms:{uProgress:{value:0},uResolution:{value:new I},uTime:{value:0},tPaint:{value:i},tNoise:{value:M.get("noise")},tAtlas:{value:M.get("font-regular/atlas")},tMouseFluidFlowmap:this._view._composer.passes.final.uniforms.tMouseFluidFlowmap,tFluidFlowmap:this._view._composer.passes.final.uniforms.tFluidFlowmap},side:dt,transparent:!0});Im.use(o),Fm.use(o);const n=new te(e,o);return zt(n,o.uniforms.uResolution.value),n.frustumCulled=!1,n.visible=!0,this.add(n),n}show(){var i;(i=this._tween)==null||i.kill();const e=this._mesh.material.uniforms.uProgress;return e.value===2?(this._tween=ae.fromTo(e,{value:0},{value:1,ease:"none",duration:1}),this._tween):(this._tween=ae.to(e,{value:1,ease:"none",duration:.7}),this._tween)}hide(){var i;(i=this._tween)==null||i.kill();const e=this._mesh.material.uniforms.uProgress;return this._tween=ae.to(e,{value:2,ease:"none",duration:.5}),this._tween}updateGeometry(e){this._mesh.geometry.update({font:M.get("font-regular/json"),text:(e.text||"").toUpperCase()});const i=e.fontSize/Am;this._mesh.geometry.scale(i,i,i),this._mesh.position.x=e.box.x,this._mesh.position.y=e.box.y+e.fontSize*2/3}update({time:e,delta:i}){this._mesh.material.uniforms.uTime.value=e}_onConfigUpdated(){}_createDebug(e){if(!T)return;const i=T.addFolder({title:"Link",parent:e});return i.addInput(this._mesh.material.uniforms.uProgress,"value",{min:0,max:1,step:.01,label:"Progress"}),i}}const zm=3;class Gm{constructor(t){l(this,"_config");l(this,"_debug");l(this,"_scene");l(this,"_camera");l(this,"_renderTarget");l(this,"_links");l(this,"_scope");l(this,"_view");W(this),this._config=t.config,this._view=t.view,this._camera=this._createCamera(),this._scene=this._createScene(),this._renderTarget=this._createRenderTarget(),this._debug=this._createDebug(t.debugContainer),this._links=this._createLinks(),this._bind(!0),this._onConfigUpdated()}_createScene(){return new pe}_createCamera(){const t=new Oi;return t.position.z=10,t}_createRenderTarget(){return new ye(1,1,{depthBuffer:!1,format:Fe,magFilter:Ne,minFilter:Ne})}_createLinks(){const t=[];for(let e=0;e<zm;e++){const i=new Um({config:{},debugContainer:this._debug,view:this._view});this._scene.add(i),t.push(i)}return t}_bind(t){if(z[t?"addEventListener":"removeEventListener"]("resize",this.onWindowResize),t){const i=ve();this._scope=new ko,this._scope.run(()=>{F(()=>i.menu.linkData,o=>{for(let n=0;n<o.length;n++){const r=o[n];this._links[n].updateGeometry(r)}},{immediate:!0}),F(()=>i.menu.selectedLink,o=>{for(let n=0;n<this._links.length;n++)o===n?this._links[n].show():this._links[n].hide()},{immediate:!0})})}else this._scope.stop(),this._scope=null}onWindowResize(t){this._renderTarget.setSize(t.renderWidth,t.renderHeight),this._camera.left=0,this._camera.top=0,this._camera.right=t.innerWidth,this._camera.top=t.innerHeight,this._camera.updateProjectionMatrix()}compile(){z.renderer.instance.setRenderTarget(this._renderTarget),z.renderer.instance.clearColor(),z.renderer.instance.render(this._scene,this._camera)}render(){return z.renderer.instance.setRenderTarget(this._renderTarget),z.renderer.instance.clearColor(),z.renderer.instance.render(this._scene,this._camera),this._renderTarget}update({time:t,delta:e}){this._scene.visible=this._view._composer.passes.final.uniforms.uMenu.value>.01;for(const i of this._links)i.update({time:t,delta:e})}_onConfigUpdated(){}_createDebug(t){if(!T)return;const e=T.addFolder({title:"Menu UI",parent:t});return e.addInput(this._scene,"visible",{label:"Visible"}),e}}class Bm extends le{constructor(e){super();l(this,"_config");l(this,"_configs");l(this,"_debug");l(this,"_auras");l(this,"_view");l(this,"_lockView",!0);this._config=e.config,this._view=e.view,this.visible=!1,this.position.set(2.1,.75,2.2),this.scale.set(.7,.7,.7),this.rotation.set(.06,.81,.02),this._configs=[{color:{color:"#ffffff",white:1,magenta:.10333,cyan:.20333,opacity:.4,power:.4999999999999997},highlightColor:{color:"#ffffff",white:1,magenta:.10333,cyan:.20333,opacity:.4,power:.4999999999999997},geometry:{radius:{min:.68,max:1.4000000000000001},height:0,quality:8},noise:{speed:{x:.027000000000000003,y:.013},size:{x:1,y:1},offset:{x:0,y:0}},gradient:{center:.2,ease:{x:.24,y:.2},intensity:2},mask:{uvSpeed:0,noiseSpeed:.4,noiseSize:{x:.15,y:.04},noiseOffset:{x:-.07,y:-.1},boostStrength:2}},{color:{color:"#ffffff",white:1,magenta:.10333,cyan:.20333,opacity:.4,power:.4999999999999997},highlightColor:{color:"#ffffff",white:1,magenta:.10333,cyan:.20333,opacity:0,power:2.01},geometry:{radius:{min:.68,max:1.4000000000000001},height:0,quality:8},noise:{speed:{x:.027000000000000003,y:.013},size:{x:1,y:1},offset:{x:0,y:0}},gradient:{center:.2,ease:{x:.24,y:.2},intensity:2},mask:{uvSpeed:0,noiseSpeed:-.4,noiseSize:{x:.15,y:.04},noiseOffset:{x:-.06,y:-.12},boostStrength:2}},{color:{color:"#ffffff",white:1,magenta:.10333,cyan:.20333,opacity:.4,power:.4999999999999997},highlightColor:{color:"#ffffff",white:1,magenta:.10333,cyan:.20333,opacity:0,power:2.01},geometry:{radius:{min:.68,max:1.4000000000000001},height:0,quality:8},noise:{speed:{x:.027000000000000003,y:.013},size:{x:1,y:1},offset:{x:0,y:0}},gradient:{center:.2,ease:{x:.24,y:.2},intensity:2},mask:{uvSpeed:0,noiseSpeed:-.4,noiseSize:{x:.15,y:.04},noiseOffset:{x:.14,y:.02},boostStrength:2}},{color:{color:"#ffffff",white:1,magenta:.10333,cyan:.20333,opacity:0,power:2.01},highlightColor:{color:"#ffffff",white:1,magenta:.10333,cyan:.20333,opacity:0,power:2.01},geometry:{radius:{min:.68,max:1.4000000000000001},height:0,quality:8},noise:{speed:{x:.027000000000000003,y:.013},size:{x:1,y:1},offset:{x:0,y:0}},gradient:{center:.2,ease:{x:.24,y:.2},intensity:2},mask:{uvSpeed:0,noiseSpeed:-.4,noiseSize:{x:.15,y:.04},noiseOffset:{x:.14,y:.02},boostStrength:2}},{color:{color:"#ffffff",white:1,magenta:.10333,cyan:.20333,opacity:0,power:2.01},highlightColor:{color:"#ffffff",white:1,magenta:.10333,cyan:.20333,opacity:0,power:2.01},geometry:{radius:{min:.68,max:1.4000000000000001},height:0,quality:8},noise:{speed:{x:.027000000000000003,y:.013},size:{x:1,y:1},offset:{x:0,y:0}},gradient:{center:.2,ease:{x:.24,y:.2},intensity:2},mask:{uvSpeed:0,noiseSpeed:-.4,noiseSize:{x:.15,y:.04},noiseOffset:{x:.14,y:.02},boostStrength:2}}],this._debug=this._createDebug(e.debugContainer),this._auras=this._createAuras(e.debugContainer),this._view.scene.add(this),this._bind(),this._onConfigUpdated()}_bind(){const e=ve();F([()=>e.home.section===4,()=>e.home.fluidStrength],([i,o])=>{if(!i){this.visible=!1;return}this.visible=o>0;for(const n of this._auras)n.reveal=o})}_createAuras(e){const i={texture:"planet-01",groundAtmosphere:{color1:"#524666",color2:"#9f7d7d",range:{min:.92,max:1},opacity:1},atmosphere:{range:{min:.113,max:.565},color:"#f3e0ff",dispersion:.17}},o=[{rotation:[2.1843453948765625,2.8631067011763216,-.40654573097231494,"XYZ"],scale:[5,5,5],position:[0,0,0]},{rotation:[-1.0418625378839357,-.38102966717075126,.9558712595072314,"XYZ"],scale:[2,2,2],position:[0,0,0]},{rotation:[-.8116899468342071,-2.700885114455721,-1.6935696872361838,"XYZ"],scale:[1,1,1],position:[.11,0,0]},{rotation:[2.440980295104249,.5041534703021944,-.36140778610959456,"XYZ"],scale:[2,2,2],position:[3.61,-.5,-7.72]},{rotation:[-.6,-3.2,-1.6,"XYZ"],scale:[.7000000000000001,.7000000000000001,.7000000000000001],position:[0,1.17,0]}],n=[];for(let r=0;r<this._configs.length;r++){const s=this._configs[r],c=new xn({config:s,debugContainer:this._debug,planetConfig:Object.assign(JSON.parse(JSON.stringify(i)),{aura:s}),renderOrder:100});c.mesh.material.side=dt,c.mesh.rotation.fromArray(o[r].rotation),c.mesh.scale.fromArray(o[r].scale),c.mesh.position.fromArray(o[r].position),n.push(c),this.add(c)}return n}update({time:e,delta:i}){for(let o=0;o<this._auras.length;o++)this._auras[o].update({time:e,delta:i});if(this._lockView){const o=this._view.camera.getWorldPosition(new A);this.rotation.y=-Math.atan2(o.z,o.x)+Math.PI/2}}_onConfigUpdated(){}_createDebug(e){if(!T)return;const i=T.addFolder({title:"Auras Test",parent:e});i.addInput(this,"_lockView",{label:"Lock View"}),i.addButton({title:"Copy config"}).on("click",()=>{navigator.clipboard.writeText(JSON.stringify(this._configs,null,"	"))}),i.addButton({title:"Copy transforms"}).on("click",()=>{navigator.clipboard.writeText(JSON.stringify(this._auras.map(n=>({rotation:n.mesh.rotation.toArray(),scale:n.mesh.scale.toArray(),position:n.mesh.position.toArray()})),null,"	"))});const o=i.addFolder({title:"Transform",expanded:!1});return o.addInput(this,"position",{label:"Position",x:{step:.01},y:{step:.01},z:{step:.01}}),o.addInput(this,"scale",{label:"Scale",x:{step:.01},y:{step:.01},z:{step:.01}}),o.addInput(this,"rotation",{label:"Rotation",view:"rotation",rotationMode:"euler",step:.001,order:"XYZ",unit:"rad"}),i}}const km=`#define GLSLIFY 1
uniform sampler2D tEmissiveMap;uniform sampler2D tNoise;uniform float uTime;uniform float uLinkProgress;uniform float[5]uHighlight;uniform vec3 uEmissive;uniform float uEmissiveStrength;uniform vec3 uEmissive0;uniform float uEmissiveStrength0;uniform vec3 uEmissive1;uniform float uEmissiveStrength1;uniform vec3 uEmissive2;uniform float uEmissiveStrength2;uniform vec3 uEmissive3;uniform float uEmissiveStrength3;uniform vec3 uEmissive4;uniform float uEmissiveStrength4;varying vec2 vUv;float textureNoise3D(sampler2D noiseTexture,vec2 uv,float time){vec2 uvNoise=uv+time*0.007;vec2 uvNoise2=uv-time*0.007;vec3 noise=texture2D(noiseTexture,uvNoise).rgb;vec3 noise2=texture2D(noiseTexture,uvNoise2).rgb;vec3 colorDot=vec3(sin(vec3(time,time+1.047,time+2.094)));float colorAvg=(abs(colorDot.r)+abs(colorDot.g)+abs(colorDot.b))/3.;colorDot/=colorAvg;noise=(noise+noise2)/2.;return dot(normalize(noise-0.5),colorDot);}void main(){vec2 uv=vUv;vec3 emissiveColor=uEmissive;emissiveColor=mix(emissiveColor,uEmissive0,uHighlight[0]);emissiveColor=mix(emissiveColor,uEmissive1,uHighlight[1]);emissiveColor=mix(emissiveColor,uEmissive2,uHighlight[2]);emissiveColor=mix(emissiveColor,uEmissive3,uHighlight[3]);emissiveColor=mix(emissiveColor,uEmissive4,uHighlight[4]);float emissiveStrength=uEmissiveStrength;emissiveStrength=mix(emissiveStrength,uEmissiveStrength0,uHighlight[0]);emissiveStrength=mix(emissiveStrength,uEmissiveStrength1,uHighlight[1]);emissiveStrength=mix(emissiveStrength,uEmissiveStrength2,uHighlight[2]);emissiveStrength=mix(emissiveStrength,uEmissiveStrength3,uHighlight[3]);emissiveStrength=mix(emissiveStrength,uEmissiveStrength4,uHighlight[4]);float isHighlight=min(uHighlight[0]+uHighlight[1]+uHighlight[2]+uHighlight[3]+uHighlight[4],1.);emissiveStrength*=mix(mix(0.5,1.5,uLinkProgress),0.7,isHighlight);float noise=smoothstep(-3.,3.,textureNoise3D(tNoise,uv*2.,uTime*0.8));float emissiveTexel=texture2D(tEmissiveMap,uv).r;vec3 color=emissiveTexel*noise*emissiveColor*emissiveStrength;gl_FragColor=vec4(color,1.);}`,Hm=w(km,"fragmentShader"),Vm=`#define GLSLIFY 1
varying vec2 vUv;void main(){vUv=uv;gl_Position=projectionMatrix*modelViewMatrix*vec4(position,1.0);}`,Wm=w(Vm,"vertexShader"),Ym=`#define GLSLIFY 1
uniform sampler2D tMap;uniform sampler2D tEmissiveMap;uniform sampler2D tNoise;uniform float uTime;uniform float uLinkProgress;uniform float[5]uHighlight;uniform vec3 uEmissive;uniform float uEmissiveStrength;uniform vec3 uEmissive0;uniform float uEmissiveStrength0;uniform vec3 uEmissive1;uniform float uEmissiveStrength1;uniform vec3 uEmissive2;uniform float uEmissiveStrength2;uniform vec3 uEmissive3;uniform float uEmissiveStrength3;uniform vec3 uEmissive4;uniform float uEmissiveStrength4;uniform float uRenderingReflection;varying vec2 vUv;float textureNoise3D(sampler2D noiseTexture,vec2 uv,float time){vec2 uvNoise=uv+time*0.007;vec2 uvNoise2=uv-time*0.007;vec3 noise=texture2D(noiseTexture,uvNoise).rgb;vec3 noise2=texture2D(noiseTexture,uvNoise2).rgb;vec3 colorDot=vec3(sin(vec3(time,time+1.047,time+2.094)));float colorAvg=(abs(colorDot.r)+abs(colorDot.g)+abs(colorDot.b))/3.;colorDot/=colorAvg;noise=(noise+noise2)/2.;return dot(normalize(noise-0.5),colorDot);}void main(){vec2 uv=vUv;vec3 color=texture2D(tMap,vUv).rgb;color*=mix(1.,1.9,uLinkProgress);vec3 emissiveColor=uEmissive;emissiveColor=mix(emissiveColor,uEmissive0,uHighlight[0]);emissiveColor=mix(emissiveColor,uEmissive1,uHighlight[1]);emissiveColor=mix(emissiveColor,uEmissive2,uHighlight[2]);emissiveColor=mix(emissiveColor,uEmissive3,uHighlight[3]);emissiveColor=mix(emissiveColor,uEmissive4,uHighlight[4]);float emissiveStrength=uEmissiveStrength;emissiveStrength=mix(emissiveStrength,uEmissiveStrength0,uHighlight[0]);emissiveStrength=mix(emissiveStrength,uEmissiveStrength1,uHighlight[1]);emissiveStrength=mix(emissiveStrength,uEmissiveStrength2,uHighlight[2]);emissiveStrength=mix(emissiveStrength,uEmissiveStrength3,uHighlight[3]);emissiveStrength=mix(emissiveStrength,uEmissiveStrength4,uHighlight[4]);float isHighlight=min(uHighlight[0]+uHighlight[1]+uHighlight[2]+uHighlight[3]+uHighlight[4],1.);emissiveStrength=mix(emissiveStrength,8.,uRenderingReflection);emissiveStrength*=mix(mix(0.5,1.5,uLinkProgress),0.7,isHighlight);float noise=smoothstep(-3.,3.,textureNoise3D(tNoise,uv*2.,uTime*0.8));noise=mix(noise,1.,uRenderingReflection);color+=texture2D(tEmissiveMap,vUv).rgb*noise*emissiveColor*emissiveStrength;gl_FragColor=vec4(color,1.);}`,jm=w(Ym,"fragmentShader"),$m=`#define GLSLIFY 1
varying vec2 vUv;void main(){vUv=uv;gl_Position=projectionMatrix*modelViewMatrix*vec4(position,1.0);}`,Zm=w($m,"vertexShader");class Km extends le{constructor(e){super();l(this,"_config");l(this,"_mesh");l(this,"_debug");l(this,"_view");W(this),this._config=e.config,this._view=e.view,this._mesh=this._createMesh(e.gltf.scene),this._debug=this._createDebug(e.debugContainer),this._onConfigUpdated(),this._bind()}_bind(){const e=ve();F(()=>e.home.highlightedPlanet,i=>{if(this._mesh.material)for(let o=0;o<5;o++)ae.to(this._mesh.material.uniforms.uHighlight.value,{[o]:o===i?1:0,duration:1.5,ease:"power2.out"}),ae.to(this._mesh.userData.bloomMaterial.uniforms.uHighlight.value,{[o]:o===i?1:0,duration:1.5,ease:"power2.out"})})}_createMesh(e){const i=e.getObjectByName("STELA"),o=i.material,n=M.get("noise");n.wrapS=Z,n.magFilter=ie,o.map.colorSpace=ke;const r=new Y({uniforms:{tMap:{value:o.map},tNoise:{value:n},tEmissiveMap:{value:o.emissiveMap},uLinkProgress:{value:0},uTime:{value:0},uRenderingReflection:{value:0},uHighlight:{value:new Array(5).fill(0)},uEmissive:{value:new V},uEmissiveStrength:{value:0},uEmissive0:{value:new V},uEmissiveStrength0:{value:0},uEmissive1:{value:new V},uEmissiveStrength1:{value:0},uEmissive2:{value:new V},uEmissiveStrength2:{value:0},uEmissive3:{value:new V},uEmissiveStrength3:{value:0},uEmissive4:{value:new V},uEmissiveStrength4:{value:0}}});jm.use(r),Zm.use(r);const s=i.onBeforeRender||(()=>{});i.onBeforeRender=function(...m){r.uniforms.uRenderingReflection.value=i.userData.renderingReflection?1:0,s(...m)};const c=new Y({uniforms:{tEmissiveMap:{value:o.emissiveMap},tNoise:{value:n},uLinkProgress:{value:0},uTime:{value:0},uHighlight:{value:new Array(5).fill(0)},uEmissive:{value:new V},uEmissiveStrength:{value:0},uEmissive0:{value:new V},uEmissiveStrength0:{value:0},uEmissive1:{value:new V},uEmissiveStrength1:{value:0},uEmissive2:{value:new V},uEmissiveStrength2:{value:0},uEmissive3:{value:new V},uEmissiveStrength3:{value:0},uEmissive4:{value:new V},uEmissiveStrength4:{value:0}}});return Hm.use(c),Wm.use(c),i.material=r,i.userData.renderBloom=!0,i.userData.bloomMaterial=c,i.renderOrder=-1,i}_onConfigUpdated(){this._mesh.material.uniforms.uEmissive.value.set(this._config.emissive),this._mesh.material.uniforms.uEmissiveStrength.value=this._config.emissiveStrength,this._mesh.material.uniforms.uEmissive0.value.set(this._config.highlights[0].emissive),this._mesh.material.uniforms.uEmissiveStrength0.value=this._config.highlights[0].emissiveStrength,this._mesh.material.uniforms.uEmissive1.value.set(this._config.highlights[1].emissive),this._mesh.material.uniforms.uEmissiveStrength1.value=this._config.highlights[1].emissiveStrength,this._mesh.material.uniforms.uEmissive2.value.set(this._config.highlights[2].emissive),this._mesh.material.uniforms.uEmissiveStrength2.value=this._config.highlights[2].emissiveStrength,this._mesh.material.uniforms.uEmissive3.value.set(this._config.highlights[3].emissive),this._mesh.material.uniforms.uEmissiveStrength3.value=this._config.highlights[3].emissiveStrength,this._mesh.material.uniforms.uEmissive4.value.set(this._config.highlights[4].emissive),this._mesh.material.uniforms.uEmissiveStrength4.value=this._config.highlights[4].emissiveStrength,this._mesh.userData.bloomMaterial.uniforms.uEmissive.value.set(this._config.bloom),this._mesh.userData.bloomMaterial.uniforms.uEmissiveStrength.value=this._config.bloomStrength,this._mesh.userData.bloomMaterial.uniforms.uEmissive0.value.set(this._config.highlights[0].bloom),this._mesh.userData.bloomMaterial.uniforms.uEmissiveStrength0.value=this._config.highlights[0].bloomStrength,this._mesh.userData.bloomMaterial.uniforms.uEmissive1.value.set(this._config.highlights[1].bloom),this._mesh.userData.bloomMaterial.uniforms.uEmissiveStrength1.value=this._config.highlights[1].bloomStrength,this._mesh.userData.bloomMaterial.uniforms.uEmissive2.value.set(this._config.highlights[2].bloom),this._mesh.userData.bloomMaterial.uniforms.uEmissiveStrength2.value=this._config.highlights[2].bloomStrength,this._mesh.userData.bloomMaterial.uniforms.uEmissive3.value.set(this._config.highlights[3].bloom),this._mesh.userData.bloomMaterial.uniforms.uEmissiveStrength3.value=this._config.highlights[3].bloomStrength,this._mesh.userData.bloomMaterial.uniforms.uEmissive4.value.set(this._config.highlights[4].bloom),this._mesh.userData.bloomMaterial.uniforms.uEmissiveStrength4.value=this._config.highlights[4].bloomStrength}update({time:e}){const i=this._view._components.planets._linkProgress;this._mesh.material.uniforms.uLinkProgress.value=i,this._mesh.userData.bloomMaterial.uniforms.uLinkProgress.value=i,this._mesh.material.uniforms.uTime.value=e,this._mesh.userData.bloomMaterial.uniforms.uTime.value=e}_createDebug(e){if(!T)return;const i=T.addFolder({title:"Stela",parent:e});C.addInputs(i,this._config,this._onConfigUpdated,{bloom:{label:"Bloom"},bloomStrength:{label:"Bloom Strength",step:.01},emissive:{label:"Emissive"},emissiveStrength:{label:"Emissive Strength",step:.01},highlights:!1},{className:"config"});const o=T.addFolder({title:"Highlights",parent:i});for(let r=0;r<this._config.highlights.length;r++){const s=this._config.highlights[r],c=T.addFolder({title:"Highlight "+r,parent:o});C.addInputs(c,s,this._onConfigUpdated,{bloom:{label:"Bloom"},bloomStrength:{label:"Bloom Strength",step:.01},emissive:{label:"Emissive"},emissiveStrength:{label:"Emissive Strength",step:.01}},{className:"config"})}const n=i.addFolder({title:"Transform",expanded:!1});return n.addInput(this._mesh,"position",{label:"Position",x:{step:.01},y:{step:.01},z:{step:.01}}),n.addInput(this._mesh,"scale",{label:"Scale",x:{step:.01},y:{step:.01},z:{step:.01}}),n.addInput(this._mesh,"rotation",{label:"Rotation",view:"rotation",rotationMode:"euler",step:.001,order:"XYZ",unit:"rad"}),i}}let En=console.log.bind(console,"%c - [ %s ] View.%s() - ","background-color: lightblue; color: black");ne.isProduction&&(En=()=>{});class qm extends zr{get renderTargetTexture(){var t,e;return((t=this._composer)==null?void 0:t.texture)||((e=this._renderTarget)==null?void 0:e.texture)}constructor(t){const e=[{name:"orbit",camera:$r,options:{defaultPosition:new A(0,0,10),defaultTarget:new A(0,0,0)}},{name:"default",camera:dn,options:{default:!0,position:new A(0,0,5)}}];super({...t,configName:"home",camerasConfig:e}),W(this),this._uiStore=ve(),this._transitionStore=ma(),this._state={hiding:!1},this._forceProgress=!1,this._composer=new kc({debugContainer:this._debug}),this._composer.updateSettings(this._viewConfig.config.composer),this.parseGLTF(),this.initAnimation(),this.initInteractionAudio(),this._onConfigUpdated()}show(){this._state.hiding=!1;const t=super.show();return t.fromTo(this._renderAlpha,{value:0},{value:1,duration:.7,ease:"sine.inOut"},0),t}hide(t){this._state.hiding=!0;const e=super.hide(t);return e.to(this._renderAlpha,{value:0,duration:.15,ease:"sine.inOut"},0),e}_onHideComplete(t){super._onHideComplete(t),this._state.hiding=!1}_createScenes(){this._scene=new pe;const t=M.get("transmission-material/envmap"),e=new da(z.renderer.instance).fromEquirectangular(t);this._scene.environment=e.texture,this._scene.environmentRotation=new At(0,-Math.PI/2,0)}parseGLTF(){this.gltf=M.get("master-scene"),this.gltf.scene.traverse(i=>{(i.type==="Mesh"||i.type==="SkinnedMesh"||i.type==="Points"||i.type==="Sprite"||i.type==="Reflector")&&(i.userData.renderBloom=!1)}),this._scene.add(this.gltf.scene);const t=this.gltf.scene.userData,e=Number(t.END);["PHASE_1","PHASE_2","PHASE_3","PHASE_4","PHASE_5"].forEach((i,o)=>{this._uiStore.home.sectionLimits[o]=Number(t[i])/e}),["PHASE_1_END","PHASE_2_END","PHASE_3_END","PHASE_4_END","END"].forEach((i,o)=>{this._uiStore.home.sectionEndLimits[o]=Number(t[i])/e}),["PHASE_1_TRANSITION_OUT","PHASE_2_TRANSITION_IN","PHASE_2_TRANSITION_OUT","PHASE_3_TRANSITION_IN","PHASE_3_TRANSITION_OUT","PHASE_4_TRANSITION_IN","PHASE_4_TRANSITION_OUT","PHASE_5_TRANSITION_IN"].forEach((i,o)=>{this._uiStore.home.autoplaySectionLimits[o]=Number(t[i])/e}),this.transitionNodes={eggOverlayFade:this.gltf.scene.getObjectByName("TRANSITION_FADE_1"),planetsOverlayFade:this.gltf.scene.getObjectByName("TRANSITION_FADE_2"),eggExplosion:this.gltf.scene.getObjectByName("TRANSITION_EGG_EXPLOSION"),planets:this.gltf.scene.getObjectByName("TRANSITION_PLANETS"),armour:this.gltf.scene.getObjectByName("TRANSITION_GRIFFON_ARMOUR")}}initInteractionAudio(){this._audio=new Hr}initAnimation(){this.easeProgress=0,this.isPreventHold=!1,this.mixer=new va(this.gltf.scene),this.clip=this.gltf.animations[0],this.mixer.clipAction(this.clip).play(),F(()=>this._uiStore.isFixedScene,t=>{this._forceProgress=t})}_createComponents(){const t={view:this,config:this._viewConfig.config,debugContainer:this._debug,gltf:this.gltf};this._components={transmissionRenderer:this._createTransmissionRendererComponent(),egg:this._createEggComponent(),griffin:this._createGriffinComponent(),planets:this._createPlanetsComponent(),city:this._createCityComponent(),terrain:new Fu(t),ruins:new mu(t),crystals:new Ks(t),sky:new Nu(t),water:new Xu(t),armour:new Jl(t),token:new Wu(t),dust:new om(t),camera:new Kr(t),focusAura:new Bm(t),stela:new Km({view:this,config:this._viewConfig.config.components.stela,debugContainer:this._debug,gltf:this.gltf})}}_createTransmissionRendererComponent(){return new ju({config:{},debugContainer:this._debug,view:this})}_createEggComponent(){const t=new yl({view:this,config:this._viewConfig.config.components.egg,debugContainer:this._debug,name:"Egg",meshName:"EGG",gltf:this.gltf});return this._scene.add(t),t}_createPlanetsComponent(){return new iu({config:this._viewConfig.config.components.planets,globalConfig:this._viewConfig.config,debugContainer:this._debug,gltf:this.gltf,view:this})}_createGriffinComponent(){const t=new Hl({view:this,config:this._viewConfig.config.components.griffin,globalConfig:this._viewConfig.config,debugContainer:this._debug,name:"Griffon",meshName:"GRIFFON",gltf:this.gltf});return this._scene.add(t),t}_createCityComponent(){const t=new Bs({config:this._viewConfig.config.components,scene:this.gltf.scene,view:this,debugContainer:this._debug});return this._scene.add(t),t}_createMenuUIComponent(){return new Gm({config:{},view:this,debugContainer:this._debug})}compile(){this._preCompiled||(En(this.viewName,"compile"),this._preCompiled=!0,this.compileScene())}compileScene(){var t;ne.params.skipLoader||(this._scene.traverse(e=>{e.userData.baseVisibility=e.visible,e.visible=!0,e.userData.baseFrustumCulled=e.frustumCulled,e.frustumCulled=!1}),(t=this._composer)==null||t.render({scene:this.scene,camera:this.camera}),z.renderer.instance.clear(),this._scene.traverse(e=>{e.visible=e.userData.baseVisibility,e.userData.baseVisibility=void 0,e.frustumCulled=e.userData.baseFrustumCulled,e.userData.baseFrustumCulled=void 0}),this._composer._passes.final.compile(),this._components.menuUi&&this._components.menuUi.compile())}_createRenderTargets(){}_onConfigUpdated(){var t;super._onConfigUpdated(),this._components&&((t=this._components.transmissionRenderer)==null||t._onConfigUpdated())}_createDebug(){if(!T)return;super._createDebug();const t={value:!0};this._debug.addInput(t,"value",{label:"Show UI"}).on("change",({value:e})=>{document.querySelector(".page").style.display=e?"":"none"})}update({time:t,delta:e}){var i;if(super.update({time:t,delta:e}),this._components.menuUi&&this._composer){const o=this._components.menuUi.render();this._composer.passes.final.uniforms.tUi.value=o.texture}(i=this._composer)==null||i.render({scene:this.scene,camera:this.camera}),this._components&&(this._components.transmissionRenderer&&(this._components.egg.setTransmission(this._components.transmissionRenderer.renderTarget.texture),this._components.griffin.setTransmission(this._components.transmissionRenderer.renderTarget.texture),this._components.city.setTransmission(this._components.transmissionRenderer.renderTarget.texture)),this.updateAnimation(),this.updateTransitions())}updateAnimation(){const t=this._uiStore.home.progress,e=Math.min(.999,t),i=this.clip.duration;this._forceProgress?(this.easeProgress=0,this.mixer.setTime(0*i)):(this._wasForceProgress||this._wasForceProgress==null?this.easeProgress=e:this.easeProgress+=(e-this.easeProgress)*.04,this.mixer.setTime(this.easeProgress*i)),this._wasForceProgress=this._forceProgress}updateTransitions(){this._uiStore.home.eggOverlayFade=-this.transitionNodes.eggOverlayFade.position.z,this._uiStore.home.planetsOverlayFade=-this.transitionNodes.planetsOverlayFade.position.z,this._uiStore.home.eggExplosion=this.transitionNodes.eggExplosion.scale.z,this._uiStore.home.eggExplosion=this.transitionNodes.eggExplosion.scale.z,this._uiStore.home.planets=-this.transitionNodes.planets.position.z,this._uiStore.home.armour=this.transitionNodes.armour.scale.y}}const Xm={name:"home",class:qm,config:Qe,resources:{preload:{development:!0,production:!0},items:[]}},Qm=[Xm],Jm={class:mt({webglApp:!0})},ed={__name:"WebglApp",props:{firstView:{type:String,default:null},viewsConfig:{type:Array,default:()=>Qm},globalRessources:{type:Array,default:()=>fa}},setup(a){const t=ee(null),e=a,{$webglApp:i}=Go(),o=tn(),n=ve();F(()=>n.mainLoader.progressComplete,m=>{m&&s()},{flush:"pre"}),it(()=>{const{viewsConfig:m,globalRessources:f}=e;i.init({canvas:t.value,isDevelopment:ne.isDevelopment,viewsConfig:m}),et.addEventListener("progress",r),yt.checkGpu().then(()=>{et.start({globalRessources:f,viewsConfig:m})})}),zo(()=>{o.resetViews(),o.setAsLoaded(!1),o.setAsReady(!1),i==null||i.destroy(),M.resources.map(({name:m})=>m).forEach(m=>{const f=M.getResourceByName(m);f&&(mn(f),M.dispose(m))}),M.clearResources(),et.removeEventListener("progress",r),et.destroy()});function r(m){}function s(){o.setAsLoaded(),c()}function c(){i.start(),e.firstView&&i.viewManager.showView1(e.firstView),o.setAsReady()}return(m,f)=>(se(),xe("div",Jm,[_e("canvas",{ref_key:"canvas",ref:t},null,512)]))}},td=lt(ed,[["__scopeId","data-v-b7666bc0"]]),id={class:"ssrLinks"},od={__name:"SsrLinks",props:{isWhite:{type:Boolean,default:!1},isWebgl:{type:Boolean,default:!1},hasMedias:{type:Boolean,default:!1},hasBigSpace:{type:Boolean,default:!1}},setup(a){const t=ni(),e=Be(()=>t.langs.filter(n=>n!==ha).map(n=>({label:n,url:`/${n}/`}))),i=Be(()=>[...t.langs,...t.langsUnpublished].map(n=>({label:n,url:`/${n}/preview/`}))),o=Be(()=>t.nav);return(n,r)=>(se(),xe("section",id,[(se(!0),xe(Ot,null,Wt(oe(e),(s,c)=>(se(),ut(gi,{key:c,url:s.url},{default:tt(()=>[hi(Je(s.url),1)]),_:2},1032,["url"]))),128)),(se(!0),xe(Ot,null,Wt(oe(i),(s,c)=>(se(),ut(gi,{key:c,url:s.url},{default:tt(()=>[hi(Je(s.url),1)]),_:2},1032,["url"]))),128)),(se(!0),xe(Ot,null,Wt(oe(o),(s,c)=>(se(),ut(gi,{key:c,url:s.url},{default:tt(()=>[hi(Je(s.label),1)]),_:2},1032,["url"]))),128))]))}},nd=lt(od,[["__scopeId","data-v-4a5c9ebf"]]),Dt=a=>Math.round(a/1e4)/100+" MB";class ad{constructor(){l(this,"_total","");l(this,"_items",{});if(typeof window>"u")return;const t=typeof window.memory<"u"&&window.memory;t&&(this._total=t._total,this._items=t._items),window.memory=this}get jsHeap(){return!performance.memory||performance.memory.totalJSHeapSize==null?"--":Dt(performance.memory.totalJSHeapSize)}get total(){return Dt(this._total)}async measure(t=!0,e=!1){if(!window.crossOriginIsolated){console.log("performance.measureUserAgentSpecificMemory() is only available in cross-origin-isolated pages"),console.log("See https://web.dev/coop-coep/ to learn more");return}if(!performance.measureUserAgentSpecificMemory){console.log("performance.measureUserAgentSpecificMemory() is not available in this browser");return}const i=await performance.measureUserAgentSpecificMemory();this._total=i.bytes;const o={};i.breakdown.forEach((n,r)=>{const{bytes:s,types:c,attribution:m}=n;if(s===0)return;const f=c.length&&c[0],v=m.length&&m[0],h=v&&v.scope,g=v&&v.url;if(h&&h!=="Window"){o[h]||(o[h]=[]);let b=o[h].find(x=>x.url===g);b||(o[h].push({url:g,instances:[]}),b=o[h].find(x=>x.url===g)),b.instances.push(s)}else o[f]=s});for(const n in o)if(Array.isArray(o[n]))for(let r=0;r<o[n].length;r++){const s=o[n][r],c=await(await fetch(s.url)).text();c.match("THREE.KTX2Loader")&&(s.url="THREE.KTX2Loader"),c.match("THREE.DRACOLoader")&&(s.url="THREE.DRACOLoader")}this._items=o,e&&this.log(),t&&typeof window.memory<"u"&&setTimeout(()=>window.memory.measure(t,e),500)}log(){if(console.log("---------------------------------------------"),console.log("--- memory | js heap",this.jsHeap),console.log("--- memory | global | total",this.total),Object.keys(this._items).length>0){console.log("--- memory | global");for(const t in this._items)Array.isArray(this._items[t])?this._items[t].forEach(e=>{const i=e.instances.map(n=>Dt(n)),o=e.instances.reduce((n,r)=>n+r,0);console.log("--- memory | global | ----",`${Dt(o)} ${t} ${e.url} (${i.join(", ")})`)}):console.log("--- memory | global | ----",`${Dt(this._items[t])} ${t} `)}console.log("---------------------------------------------")}}const rd={__name:"default",setup(a){const{event:t}=Bo(),e=tn(),i=ve(),{hoveringCanvasLink:o}=ga(e),n=ee(null);it(()=>{ne.isDevelopment&&new ad});function r(){return ae.timeline()}function s(){return ae.timeline()}return F(()=>i.menu.isOpen,c=>{t("menu",{type:c?"open":"close"})}),it(()=>{F(()=>i.home.interactionController,c=>{c&&(c.on(ct.START_HOLD,()=>{var m;(m=n.value)==null||m.playLoad()}),c.on(ct.CANCEL_HOLD,()=>{var m;(m=n.value)==null||m.playLoadCancel()}),c.on(ct.ENTER_ZOOM,()=>{var m;(m=n.value)==null||m.playOpen()}),c.on(ct.EXIT_ZOOM,()=>{var m;(m=n.value)==null||m.playClose()}))},{immediate:!0})}),pa({enter:r,leave:s,type:"layout"}),(c,m)=>{const f=ur,v=nn;return se(),xe("div",{class:mt({main:!0,hovering:oe(o)})},[Me(v,null,{default:tt(()=>[!oe(yt).isTouch&&!oe(i).valuePopup.isOpen?(se(),ut(f,{key:0,ref_key:"cursor",ref:n,show:!!oe(i).home.interactionController},null,8,["show"])):Xi("",!0)]),_:1}),Me(td),_e("div",null,[_a(c.$slots,"default",{},void 0,!0)]),Me(jt,null,{default:tt(()=>[oe(i).menu.isOpen?(se(),ut(fr,{key:0})):Xi("",!0)]),_:1}),Me(nd),Me(xa),Me(Ar)],2)}}},vd=lt(rd,[["__scopeId","data-v-8b03ae4b"]]);export{vd as default};
